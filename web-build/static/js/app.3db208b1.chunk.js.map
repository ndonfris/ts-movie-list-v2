{"version":3,"sources":["assets/RT_new.svg","assets/META_new.svg","assets/IMDB_new.svg","helpers/Colors.tsx","components/SearchBar.tsx","helpers/Functions.tsx","helpers/URL.tsx","components/PopupPages/PopupLeft.tsx","components/OpenLinks.tsx","components/ReviewList.tsx","components/PopupPages/PopupCenter.tsx","components/PopupPages/PopupRight.tsx","components/Popup.tsx","components/LoadingSymbol.tsx","components/MovieImage.tsx","components/MovieTile.tsx","components/MovieList.tsx","helpers/apiKeys.tsx","routes/SearchRoute.tsx","routes/BrowseRoute.tsx","components/RemoveTile.tsx","components/SavedMovieList.tsx","routes/SavedRoute.tsx","App.tsx"],"names":["module","exports","colors","black","barDarker","barLighter","dullWhite","brightWhite","slate","styles","StyleSheet","create","container","flex","marginTop","alignItems","color","bar","justifyContent","width","height","textAlign","backgroundColor","borderRadius","paddingLeft","paddingRight","paddingTop","paddingBottom","fontSize","text","SearchBar","placeholder","query","updateQuery","searchFunction","View","style","TextInput","value","placeholderTextColor","returnKeyType","onChangeText","onSubmitEditing","requestHelper","bodyData","console","log","method","mode","headers","body","JSON","stringify","getRandomNumber","min","max","Math","floor","random","noStreamingSites","imdbID","id","icon","name","url","display_name","country","itemNumber","location","setFirstMovieResults","movieArray","start","end","slice","map","sort","serverURL","process","API_URL","StreamingList","availabileSites","FlatList","streamingContainer","data","renderItem","item","streaming","Text","TouchableOpacity","iconContainer","onPress","Linking","openURL","Image","source","uri","keyExtractor","flexDirection","streamingTitle","top","topContainer","minHeight","refresh","padding","button","alignContent","resizeMode","tintColor","title","fontWeight","position","PopupLeft","moreInfo","useState","visible","setVisible","setAvailibleSites","Title","a","async","reqData","fetch","response","json","obj","ShowAvailableSites","Ionicons","size","GetTrailer","searchURL","Pressable","AntDesign","GetGoogle","alignSelf","OpenLinks","IMDB","Ratings","review","find","rating","Source","Value","xml","ImdbIcon","RottenTomatoes","RottenTomatoesIcon","MetaCritic","MetacriticLogo","NoneFound","filter","length","MaterialIcons","error","margin","ReviewList","InLineText","titleText","infoText","textInline","smallTitle","smallText","scroll","maxHeight","mediumTitle","imageContainer","left","image","plot","topWrapper","marginLeft","middleWrapper","bottomWrapper","bottom","PopupCenter","ratings","Poster","Director","Actors","Genre","Released","Runtime","Rated","Awards","ScrollView","fadingEdgeLength","Plot","buttonStyles","pressed","textAlignVertical","textWrapper","buttonWrapper","flexGrow","PopupRight","setPressed","bodyString","SaveMovie","CloseButton","updateModal","modalVisible","buttonClose","centeredView","modalView","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","footer","right","widthContainer","normalDot","marginHorizontal","indicatorContainer","Popup","PopupTiles","scrollX","useRef","Animated","current","windowWidth","useWindowDimensions","onSwipeDown","config","velocityThreshold","directionalOffsetThreshold","Modal","animationType","transparent","onRequestClose","SafeAreaView","horizontal","pagingEnabled","showsHorizontalScrollIndicator","contentOffset","x","y","zoomScale","scrollEventThrottle","snapToStart","snapToEnd","onScroll","event","nativeEvent","useNativeDriver","popupTile","index","movieTile","interpolate","inputRange","outputRange","extrapolate","LoadingImage","spinValue","loop","timing","toValue","duration","easing","Easing","linear","centered","transform","rotate","MaterialCommunityIcons","opacity","MovieImage","movie","extraStyle","shouldShowLoading","loaded","setLoaded","yearText","Year","onLoad","overflow","maxWidth","paddingHorizontal","centeredItems","outer","textShadowColor","textShadowOffset","textShadowRadius","titleContainer","buttonContainer","MovieTile","setMoreInfo","setModalVisible","activeOpacity","found","Writer","Type","Language","Country","Metascore","imdbRating","imdbVotes","DVD","BoxOffice","Production","Website","Response","ShowMoreInfo","items","MovieList","numColumns","apiKeys","searchMovie","searchActor","streamingInfo","apiUrls","SearchRoute","setQuery","Movies","movieResults","setMovieResults","Keyboard","dismiss","search_name","trim","firstPage","params","s","page","r","secondPage","axios","request","result","i","more","moreArr","secondPageMovie","push","Error","searchQuery","results","BrowseRoute","open","setOpen","setValue","label","setItems","onChangeValue","searchGenre","theme","topBar","containerStyle","textStyle","labelStyle","labelProps","numberOfLines","disabledStyle","marginRight","zIndex","removedStyles","removedMovie","removedText","topText","middleText","RemoveTile","setRemovedMovie","undefined","Promise","resolve","RemoveMovie","removeTile","SavedMovieList","removing","refreshing","setRefreshing","loadIcon","onRefresh","extraData","header","headerText","removeButton","buttonText","SavedRoute","movies","setMovies","setRemoving","setLoadIcon","count","setCount","useEffect","res","then","catch","err","warn","retrieveMovies","LogBox","ignoreLogs","App","React","setIndex","key","routes","renderScene","BottomNavigation","SceneMap","search","saved","browse","navigationState","onIndexChange","shifting","barStyle","inactiveColor","activeColor"],"mappings":"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","file":"static/js/app.3db208b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/RT_new.24c54f01.svg\";","module.exports = __webpack_public_path__ + \"static/media/META_new.942dff6e.svg\";","module.exports = __webpack_public_path__ + \"static/media/IMDB_new.4051190c.svg\";","/* default colors for application */\nconst colors = {\n    black: '#0D1117',\n    barDarker: '#292d3e',\n    barLighter: '#3b4252',\n    dullWhite: '#bfc7d5',\n    brightWhite: '#fff',\n    slate: '#C0CAF5'\n}\n\n\nexport default colors;\n\n","/**\n * File:        SearchBar.tsx\n * Author:      Nick Donfris\n * Created:     01/24/22\n */\nimport React, {FC} from 'react';\nimport {View, StyleSheet, TextInput} from 'react-native';\nimport {Movie} from '../helpers/Interfaces';\nimport colors from '../helpers/Colors';\n\n/* props necessary for the searchbar  */\ninterface Props {\n    placeholder?: string;\n    searchFunction: () => void;\n    query: string;\n    updateQuery: (text: string) => void;\n}\n\n\n/**\n * SearchBar component is passed many props, from it's parent component.\n * The parent component defines these props, which is used to decouple  \n * it's states.\n *\n * @param {string} placeholder - string to display when there is no input\n * @param {string} query - the value that is update when the user inserts input\n * @param {function} updateQuery - the function that stores the text inputed\n *                                 by the user, to the query \n * @param {function} searchFunction - when the submit button is pressed, \n *                                    this function is called.\n *\n * @returns {JSX.Element} - the horizontally centered SearchBar component \n */\nconst SearchBar: FC<Props> = ({placeholder, query, updateQuery, searchFunction}) => {\n    return (\n        <View style={styles.container}>\n            <View style={styles.bar}>\n                <TextInput\n                    style={styles.text}\n                    value={query}\n                    placeholder={placeholder}\n                    placeholderTextColor={\"#bfc7d5\"}\n                    returnKeyType={\"search\"}\n                    onChangeText={updateQuery}\n                    onSubmitEditing={searchFunction}\n                />\n            </View>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        marginTop: '15%',\n        alignItems: 'center',\n        color: colors.black,\n    },\n    bar: {\n        justifyContent: \"space-around\",\n        width: 325,\n        height: 50,\n        textAlign: 'center',\n        backgroundColor: colors.barDarker,\n        color: colors.dullWhite,\n        borderRadius: 20,\n        paddingLeft: 20,\n        paddingRight: 20,\n        paddingTop: 15,\n        paddingBottom: 15,\n        fontSize: 15,\n    },\n    text: {\n        color: colors.dullWhite\n    }\n});\n\nexport default SearchBar;\n","/**\n * File:        Functions.tsx\n * Author:      Nick Donfris\n * Created:     02/06/22\n * Description: This file exports functions used throughout the entire \n * frontend of this application. These functions are typically used to\n * help simplify the readability of the components in the application. \n * Building the json needed to send a request to  the backend, and defining\n * what a default state should contain for an Interface, are some examples\n * of what I decided to include here.\n */\n\nimport {PostRequest, Movie, MovieMoreInfo, StreamWebsite, addRequestBody, reqBody, Rating} from './Interfaces';\nimport MovieTileObj from './MovieTileObj';\n\n/**\n * requestHelper(bodyString) - this function is similiar to createRequest. However, instead\n *                             of passing in the entire Interface of options, only the string \n *                             used in the body (as a value for the key \"title\"), is\n *                             passed in. \n *\n * @param {string} bodyString - the string of the post request to call to the backend.\n * @returns {RequestInit} - defines a request to send to a backend URI,\n *                          with this request having the request method, headers, mode\n *                          defined. Also sets the body set to the key \"title\"\n */\nexport function requestHelper(bodyData:string): RequestInit {\n    console.log(\"requestHelper got:\\n\" + bodyData);\n    return {\n        method: \"POST\",\n        mode: \"no-cors\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\"title\": bodyData}),\n    };\n}\n\n/**\n * createRequest(PostRequest) - Returns part of a Request with all of the \n *                              fields defined in the parameter passed in.\n *\n * @param {PostRequest} request - interface containing a method, more, headers,\n *\n * @returns {RequestInit} - the Request to send the back (without the URI),\n *                          with the fields set to their defined values in the\n *                          request parameter \n */\nexport function createRequest(request: PostRequest): RequestInit {\n    return {\n        method: request.method,\n        mode: request.mode,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\"title\": request.body})\n    }\n}\n\n/**\n * createRequestBody(PostRequest) - Returns part of a Request with all of the \n *                                  fields pre-defined and the body matching the\n *                                  key value pair.\n *\n * @param {string} keyString -  the key for the bodyString\n * @param {string} valueString -  the value for the bodyString\n * @returns {RequestInit} - defines a request to send to a backend URI,\n *                          with this request having the request method, headers, mode\n *                          defined. Also sets the body set to the key \"title\"\n */\nexport function createRequestBody(keyString: string, valueString: string): RequestInit {\n    return {\n        method: 'POST',\n        mode: 'no-cors',\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\"Genre\": valueString}),\n    }\n}\n\n\n/**\n * This function is called when a movie is expected to show more info, but \n * the call to the backend failed. \n *\n * @param {Movie} found - the Movie interface that was found from the search screen\n *                        \n * @returns {MovieMoreInfo} - A object, with all availible fields from the Movie\n *                            inserted to the MovieMoreInfo interface.\n */\nexport function failedMovieMoreInfo(found: Movie) : MovieMoreInfo{\n    return {\n        Title: found.Title,\n        Year: found.Year,\n        Rated: \"N/a\",\n        Released: found.Year,\n        Runtime: \"N/a\",\n        Genre: \"N/a\",\n        Director: \"N/a\",\n        Writer: \"N/a\",\n        Actors: \"N/a\",\n        Plot: \"Oops, it looks like there was an error retrieving more info about the \" + found.Type + \", \" + found.Title + \".\",\n        Language: \"N/a\",\n        Country: \"N/a\",\n        Awards: \"N/a\",\n        Poster: found.Poster,\n        Ratings: [{Source: \"N/a\", Value: \"N/a\"}, {Source: \"N/a\", Value: \"N/a\"}],\n        Metascore: \"N/a\",\n        imdbRating: \"N/a\",\n        imdbVotes: \"N/a\",\n        imdbID: found.imdbID,\n        Type: found.Type,\n        DVD: \"N/a\",\n        BoxOffice: \"N/a\",\n        Production: \"N/a\",\n        Website: \"N/a\",\n        Response: \"N/a\"\n    };\n}\n\n\n\nexport function getRandomNumber(min: number, max: number){\n        return Math.floor(Math.random()*(max-min+1)+min);\n    }\n\n/**\n * noStreamingSites(imdbID) - defines a default behavior for the streaming sites\n *                            of a movie when no results are found.\n *\n * @param {string} imdbID - the string of the imdbID field from a Movie interface\n * \n * @returns {StreamWebsite[]} - an array of 1 StreamingWebsite, with only only the \n *                              id, name, display_name, and county.number fields set\n */\nexport function noStreamingSites(imdbID : string): StreamWebsite[] {\n    return [{\n        id: imdbID,\n        icon: \"\",\n        name: \"Not Found\",\n        url: \"\",\n        display_name: \"n/a\",\n        country: [\n            {\n                itemNumber: 0,\n                location: \"\",\n            },\n        ],\n    }]\n}\n\nexport function HitSearchKey() {\n    return [] as Movie[];\n\n}\n\nexport function SimulateSearch() : Movie[] {\n    var amount = getRandomNumber(1, 5);\n    var movies: Movie[] = [];\n    for (let i = 0; i < amount; i++) {\n        movies.push({} as Movie);\n        \n    }\n    return movies;\n}\n\nexport function getBadRatings() : Rating[] {\n    return [{Source: \"N/a\", Value: \"N/a\"}];\n}\n\n\nexport function setFirstMovieResults(movieArray : Movie[]) : Movie[] {\n    let rand = getRandomNumber(0, 4);\n    var start = rand * 50;\n    var end = start + 50;\n\n    const newArr = movieArray.slice(start, end);\n    var shuffled = newArr\n        .map(value => ({value, sort: Math.random}))\n        .sort( () => Math.random() - 0.5) \n        .map(({value}) => value)\n    return shuffled;\n}\n\n","\nconst serverURL = process.env.API_URL || \"https://ts-movie-server-mini.herokuapp.com\" ;\n//const serverURL = \"http://0.0.0.0:3000\";\n\nexport default serverURL;\n","/**\n * File:        PopupLeft.tsx\n * Author:      Nick Donfris\n * Created:     01/31/22\n */\nimport React, {useState} from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Image, FlatList, ListRenderItem, Linking} from \"react-native\";\nimport { MovieMoreInfo, reqBody, StreamWebsite } from '../../helpers/Interfaces';\nimport { createRequest, noStreamingSites, requestHelper } from '../../helpers/Functions';\nimport { Ionicons } from '@expo/vector-icons';\nimport serverURL from '../../helpers/URL';\nimport colors from '../../helpers/Colors';\n\ninterface ShowListProps {\n    availabileSites: StreamWebsite[];\n}\n\n/**\n * This is a functional component that renders the results for the where a movie\n * is streamable on. Backend inserts a StreamWebsite with a name == \"Not Found\"\n * if there are StreamWebsites found.\n *\n * @param {StreamWebsite[]} availabileSites - result from api call of array of websites\n *                                            that a movie is streamable.\n * \n * @returns {JSX.Element} - <FlatList /> of Clickable Websites where you can stream \n *                          a movie.\n */\nfunction StreamingList({availabileSites}: ShowListProps) {\n    \n    /**\n     * Function that returns a singular result from the backend, that is a website\n     * the movie is available to stream on.  One noteable feature implemented \n     * in the ternary operator, is how this function handles displaying \n     * the result list loading.\n     *\n     * @param {StreamWebsite} item - an element in the array of SteamWebsites found \n     *                               from the api.\n     *\n     * @returns {ListRenderItem<StreamWebsite>} - Rendered Item to be used in the\n     *                                            <FlatList/>\n     */\n    const renderItem: ListRenderItem<StreamWebsite> = ({item}) => {\n        return ( \n            item.name === \"Not Found\"\n                ? \n                <View style={styles.streaming}>\n                    <Text style={styles.text}> loading... </Text>\n                </View>\n                :\n                <View style={styles.streaming}>\n                    <TouchableOpacity style={styles.iconContainer}\n                        onPress={() => {Linking.openURL(item.url)}}\n                    >\n                        <Image source={{uri: item.icon}} style={styles.icon}  />\n                    </TouchableOpacity>\n                </View>\n        );\n    }\n\n    return (\n        <FlatList\n            style={styles.streamingContainer}\n            data={availabileSites}\n            renderItem={renderItem}\n            keyExtractor={(item) => item.id}\n        />\n    );\n}\n\n/* the props used in this actual Popup navigation screen */\ninterface Props {\n    moreInfo: MovieMoreInfo;\n}\n\n/**\n * The 0th index of the Popup array of navigation screens. \n *\n * @param {MovieMoreInfo} moreInfo - all info from the backend for an imdbID\n *\n * @returns {JSX.Element} - The left page inside the Popup component list, with\n *                          an inner list of StreamingWebsite interfaces\n */\nconst PopupLeft = ({moreInfo}: Props) => {\n    /* the visibility of the list of available streaming websites */\n    const [visible, setVisible] = useState(false);\n\n    /* the result list from the backend api call of StreamingWebsites \n     * Initial state is set from a helperFunction that sets the default \n     * result with the StreamingWebsite.name field set to \"Not Found\", and\n     * is used in the render item ternary operator, for the FlatList of the\n*    * <StreamingList /> functional component.\n     */\n    const [availabileSites, setAvailibleSites] = useState<StreamWebsite[]>(noStreamingSites(moreInfo.imdbID));\n\n    /**\n     * @async function to call backend and set the StreamWebsites[] state for this\n     * Popup navigation page\n     *\n     * @returns {Promise<void>} - return is void because instead of returning the SteamWebsite[]\n     *                            and storing it in a value, we can make use of the const state\n     *                            for the availabieSites array.\n     */\n    const ShowAvailableSites = async () : Promise<void> => {\n        let reqData = requestHelper(moreInfo.imdbID);\n        console.log(reqData);\n        try {\n            const response = await fetch(serverURL + '/movie/streaming', reqData);\n            const obj = await response.json();\n            setAvailibleSites(obj);\n        } catch (e) {\n            setAvailibleSites(noStreamingSites(moreInfo.imdbID));\n            console.log(e);\n        }\n    }\n    return (\n        <View style={styles.container}>\n        <Text style={styles.title}> {moreInfo.Title} </Text>\n        <View style={styles.topContainer}>\n            <View style={styles.streamingTitle}>\n                <Text style={styles.text}>Availible Streaming Options:</Text>\n            </View>\n            {visible\n                ? <StreamingList availabileSites={availabileSites} />\n                : <TouchableOpacity style={styles.refresh}\n                    onPress={() => {\n                        setVisible(!visible)\n                        ShowAvailableSites()\n                }}>\n                    <Ionicons name=\"ios-refresh-circle-outline\" size={24} color=\"white\" />\n                </TouchableOpacity>\n            }\n            </View>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        flexDirection: \"column\",\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    streamingTitle: {\n        top: -20,\n    },\n    topContainer: {\n        top: 100,\n        minHeight: 200,\n    },\n    refresh: {\n        borderRadius: 20,\n        padding: 20,\n        alignItems: \"center\",\n    },\n    button: {\n        alignContent: \"center\",\n        justifyContent: 'center',\n        alignItems: \"center\",\n        backgroundColor: \"lightblue\",\n        borderRadius: 20,\n        width: \"50%\",\n        height: 60,\n    },\n    streaming: {\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"space-evenly\",\n    },\n    streamingContainer: {\n    },\n    iconContainer: {\n        width: 100,\n    },\n    icon: {\n        width: 100,\n        height: 50,\n        resizeMode: \"contain\",\n        tintColor:  colors.dullWhite\n    },\n    title: {\n        fontSize: 22,\n        fontWeight: \"bold\",\n        color:  colors.dullWhite,\n        position: \"absolute\",\n        top: 10,\n    },\n    text: {\n        color:  colors.dullWhite,\n        fontWeight: 'bold',\n        justifyContent: 'center',\n        textAlign: \"center\",\n    }\n})\n\nexport default PopupLeft;\n","/**\n * File:        OpenLinks.tsx\n * Author:      Nick Donfris\n * Created:     02/29/22\n */\nimport React from 'react';\nimport {StyleSheet, Text, Pressable, View, Linking} from \"react-native\";\nimport {AntDesign} from '@expo/vector-icons';\nimport colors from '../helpers/Colors';\n\ninterface Props {\n    title: string;\n}\n\n/**\n * functional component to return clickable youtube icon, that opens youtube \n * searching for: \"title\" trailer\n *\n * @param {string} title - string to search for\n * @returns {JSX.Element} - Pressable icon for Youtube, with \"Search Trailer\" text \n */\nfunction GetTrailer({title}: Props) {\n    const searchURL = \"https://www.youtube.com/results?search_query=\"+title+\" trailer\";\n    return (\n        <View style={styles.item}> \n            <Pressable onPress={() => { Linking.openURL(searchURL) }} >\n                <AntDesign name=\"youtube\" size={24} color={colors.dullWhite} />\n            </Pressable>\n            <Text style={styles.text}>Search Trailer</Text>\n        </View>\n    );\n}\n\n/**\n * Queries google for the movie at hand. \n * onPress will open Google (in default browser) with search results for movies\n *\n * @param {string} title - the title passed to google search\n * @returns {JSX.Element} - Pressable icon for Google, with \"Search Google\" text\n */\nfunction GetGoogle({title}: Props) {\n    const searchURL = \"https://www.google.com/search?q=\"+title;\n    return (\n        <View style={styles.item}> \n            <Pressable onPress={() => { Linking.openURL(searchURL) }} >\n                <AntDesign name=\"google\" size={24} color={colors.dullWhite} />\n            </Pressable>\n            <Text style={styles.text}>Search Google</Text>\n        </View>\n    );\n}\n\n\n/**\n * This is the OpenLinks component that calls the above functional components,\n * rendering pressable icons which will open other applications on the device.\n *\n * @param {string} .title - the movie title\n * @returns {JSX.Element} - the horizontally centered clickable icons for \n *                          Youtube and Google.\n */\nconst OpenLinks = ({title}: Props) => {\n    return (\n        <View style={styles.container}>\n            <GetTrailer title={title} />\n            <GetGoogle title={title} />\n        </View>\n    );\n}\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: \"row\",\n        alignSelf: \"center\",\n        alignItems: \"flex-end\",\n    },\n    item: {\n        textAlign: \"center\",\n        alignItems: \"center\",\n        alignContent: \"space-between\",\n        paddingLeft: 20,\n        paddingRight: 20,\n    },\n    text: {\n        marginTop: 5,\n        fontSize: 8,\n        color: colors.dullWhite\n    }\n})\n\nexport default OpenLinks;\n","/**\n * File:        ReviewList.tsx\n * Author:      Nick Donfris\n * Created:     01/29/22\n */\nimport React from 'react';\nimport {StyleSheet, Text, View, Pressable, Linking} from \"react-native\";\nimport { Rating} from \"../helpers/Interfaces\";\nimport {SvgXml} from \"react-native-svg\";\nimport RottenTomatoesIcon from '../assets/RT_new.svg';\nimport MetacriticLogo from '../assets/META_new.svg';\nimport ImdbIcon from '../assets/IMDB_new.svg';\nimport {MaterialIcons} from '@expo/vector-icons';\nimport colors from '../helpers/Colors';\n\n\n/* Props used in each of the following functional components */\ninterface ReviewProps {\n    Ratings?: Rating[];\n    Title?: string;\n};\n\n/**\n * Functional component that renders if a review score is found.\n * This component is a pressable icon, that opens imdb in Default Browser\n *\n * @param {Rating[]} Ratings - the array of all found ratings found on for a MovieItem\n * @param {Title} Title - the title ot search for in the IMDB URL\n *\n * @returns {JSX.Element} - IMDB icon that is pressable \n */\nfunction IMDB({Ratings, Title}: ReviewProps) {\n    const review = Ratings.find(rating => rating.Source as Rating === \"Internet Movie Database\")?.Value;\n    if (review == null) {\n        return (<View></View>);\n    } else {\n        const searchURL = \"https://www.imdb.com/find?q=\"+ Title;\n        return (\n            <Pressable style={styles.rating} onPress={() => { Linking.openURL(searchURL) }}>\n                <SvgXml width=\"80\" height=\"100\" xml={ImdbIcon} />\n                <Text style={styles.text}>{review}</Text>\n            </Pressable>\n        );\n    }\n};\n\n/**\n * Functional component that renders if a review score is found that has the\n * Rating.Source field matching Rotten Tomatoes. This component is a pressable\n * icon.\n *\n * @param {Rating[]} Ratings - the array of all ratings found in a MovieItem\n * @param {string} Title - the string of the title, to search for on rotten tomatoes\n *                          URL\n *\n * @returns {JSX.Element} - RottenTomatoes icon that is pressable\n */\nfunction RottenTomatoes({Ratings, Title}: ReviewProps ){\n    let searchURL = \"https://www.rottentomatoes.com/search?search=\"+Title;\n    let review = Ratings.find(rating => rating.Source as Rating== \"Rotten Tomatoes\")?.Value;\n    if (review == null) {\n        return (<View></View>);\n    } else {\n        return (\n            <Pressable style={styles.rating} onPress={() => { Linking.openURL(searchURL) }}>\n                <SvgXml width=\"80\" height=\"100\" xml={RottenTomatoesIcon} />\n                <Text style={styles.text}>{review}</Text>\n            </Pressable>\n        );\n    } \n};\n\n/**\n * Functional component that renders if a review score is found that has the\n * Rating.Source field matching Metacritic. This component is a pressable\n * icon.\n *\n * @param {Rating[]} .Ratings - the array of all ratings found in a MovieItem\n * @param {string} .Title - the string of the title, to search for on Metacritic\n *                          website.\n *\n * @returns {JSX.Element} - MetaCritic icon that is pressable\n */\nfunction MetaCritic({Ratings, Title}: ReviewProps) {\n    let searchURL = \"https://www.metacritic.com/search/all/\"+Title+\"/results\";\n    let review = Ratings.find(rating => rating.Source as Rating == \"Metacritic\")?.Value;\n    if (review == null) {\n        return (<View></View>);\n    } else {\n        return (\n            <Pressable style={styles.rating} onPress={() => { Linking.openURL(searchURL) }}>\n                <SvgXml width=\"80\" height=\"100\" xml={MetacriticLogo} />\n                <Text style={styles.text}>{review}</Text>\n            </Pressable>\n        );\n    }\n}\n\n\ninterface NoneFoundProps {\n    Ratings?: Rating[];\n}\n\n/**\n * Functional component that renders the default Review not found icon. Like all of the\n * functional components called from RevewList, this may return an empty view (nothing).\n *\n * @param {Rating[]} Ratings - the array results found in the backend. The backend\n *                                checks the reviews it finds and if this JSON array is\n *                                empty, it will insert a default Rating interface with the\n *                                the Rating.Source field equal to \"N/A\".\n *\n * @returns {JSX.Element} - NoneFound icon that is not pressable\n */\nfunction NoneFound({Ratings}: NoneFoundProps) {\n    const review = Ratings.filter(({ Source }) => Source === \"N/a\");\n    if (review.length == 0) {\n        return (<View></View>);\n    } else {\n        return (\n            <View style={styles.rating} >\n                <MaterialIcons name=\"error-outline\" size={40} color={colors.dullWhite} style={styles.error}/>\n                <Text style={styles.text}>Reviews not found</Text>\n            </View>\n        );\n    }\n}\n\n\n\n/**\n * ReviewList of pressable icons, and the score the rated a movie. The list of ratings\n * might contain 0-3 reviews (while it can't actually contain zero ratings, backend inserts\n * a value to catch no reviews found), so each functional component called above must handle\n * not finding it's correlating rating.\n *\n * @param {MovieMoreInfo} .moreInfo - All information found by backend for a movie \n * @returns {JSX.Element} - ReviewList of pressable icons correlating to:\n *                          [<IMDb/>, <RottenTomatoes/>, <MetaCritic/>] || [<NoneFound/>]\n */\nconst ReviewList = ({Ratings, Title}: ReviewProps) => {\n    return (\n        <View style={styles.container}>\n            <IMDB Ratings={Ratings} Title={Title} /> \n            <RottenTomatoes Ratings={Ratings} Title={Title} /> \n            <MetaCritic Ratings={Ratings} Title={Title} />\n            <NoneFound Ratings={Ratings}/>\n        </View>\n    );\n}\n    \nconst styles = StyleSheet.create({\n    container: {\n        top: -10,\n        flexDirection: \"row\",\n        alignSelf: \"center\",\n        alignContent: \"space-between\",\n        minHeight: 100,\n    },\n    rating: {\n        color: colors.dullWhite,\n        margin: 10,\n    },\n    text: {\n        color: colors.dullWhite,\n        top: -20,\n        fontSize: 20,\n        fontWeight: \"bold\",\n        textAlign: \"center\",\n    },\n    error: {\n        textAlign: \"center\",\n        top: -10,\n        paddingBottom: 10,\n    }\n});\n\nexport default ReviewList;\n","/**\n * File:        PopupCenter.tsx\n * Author:      Nick Donfris\n * Created:     01/31/22\n */\nimport React, {useState} from 'react';\nimport { StyleSheet, Text, View, Image, ScrollView } from \"react-native\";\nimport OpenLinks from '../OpenLinks';\nimport ReviewList from '../ReviewList';\nimport {MovieMoreInfo, Rating} from '../../helpers/Interfaces';\nimport colors from '../../helpers/Colors';\nimport {getBadRatings} from '../../helpers/Functions';\n\n\n/* strings used to help display the backend api data */\ninterface InLineTextProps {\n    titleText: string;\n    infoText: string;\n}\n\n/**\n * This is a functional component that just allows significant, decomposition\n * in the PopupCenter component. It styles text to have a bold title, and \n * have the corresponding infomation vertically aligned next to it.\n * \n *\n * @param {string} titleText - the string of the title\n * @param {string} infoText - the string for the api result matching the title\n *\n * @returns {JSX.Element} - Vertically aligned component of different sized text\n *                          to render most of the movie information.\n */\nfunction InLineText({titleText, infoText}: InLineTextProps) {\n    return (\n        <View style={styles.textInline}>\n            <Text style={styles.smallTitle}>{titleText}:</Text>\n            <Text style={styles.smallText}>{infoText}</Text>\n        </View>\n    )\n}\n\n/* the props for the PopupCenter component */\ninterface Props {\n    moreInfo: MovieMoreInfo\n};\n\n/**\n * PopupCenter is the first inner navigation screen when the Popup modal is rendered \n * and contains the most information about a Movie\n *\n * @param {MovieMoreInfo} moreInfo - the resolved callback from the backend when an\n *                                   imdbID is searched.\n *\n * @returns {JSX.Element} - The middle page inside the Popup component list.\n */\nconst PopupCenter = ({moreInfo}: Props) => {\n    var ratings = getBadRatings() as Rating[];\n    if (moreInfo.Ratings && moreInfo.Ratings.length) {\n        ratings = moreInfo.Ratings;\n    }\n    return (\n        <View style={styles.container}>\n            <View style={styles.imageContainer}>\n                <Image source={{uri: moreInfo.Poster}} style={styles.image} />\n            </View>\n            <View style={styles.topWrapper}>\n                <Text style={styles.title}>{moreInfo.Title}</Text>\n                <InLineText titleText=\"Director\" infoText={moreInfo.Director} />\n                <InLineText titleText=\"Starring\" infoText={moreInfo.Actors} />\n                <InLineText titleText=\"Genre\" infoText={moreInfo.Genre} />\n                <InLineText titleText=\"Released\" infoText={moreInfo.Released} />\n                <InLineText titleText=\"Runtime\" infoText={moreInfo.Runtime} />\n                <InLineText titleText=\"Rating\" infoText={moreInfo.Rated} />\n                <InLineText titleText=\"Awards\" infoText={moreInfo.Awards} />\n            </View>\n            <View style={styles.middleWrapper}>\n                <Text style={styles.mediumTitle}>Plot: </Text>\n                <ScrollView style={styles.scroll} fadingEdgeLength={1}>\n                    <Text style={styles.plot}>{moreInfo.Plot}</Text>\n                </ScrollView>\n                <ReviewList Ratings={ratings} Title={moreInfo.Title} />\n            </View>\n            <View style={styles.bottomWrapper} >\n                <OpenLinks title={moreInfo.Title} />\n            </View>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        height: \"100%\",\n    },\n    title: {\n        fontSize: 16,\n        fontWeight: \"bold\",\n        paddingBottom: 5,\n        color: colors.dullWhite\n    },\n    scroll: {\n        maxHeight: 125,\n    },\n    smallText: {\n        fontSize: 10,\n        marginTop: 3,\n        paddingRight: 30,\n        color: colors.dullWhite\n    },\n    smallTitle: {\n        fontSize: 13,\n        fontWeight: \"bold\",\n        paddingRight: 5,\n        color: colors.dullWhite\n    },\n    mediumTitle: {\n        fontSize: 14,\n        fontWeight: \"bold\",\n        color: colors.dullWhite\n    },\n    imageContainer: {\n        borderRadius: 20,\n        top: 15,\n        left: 10,\n        position: 'absolute',\n    },\n    image: {\n        width: 100,\n        height: 200,\n        borderRadius: 5,\n    },\n    plot: {\n        fontSize: 14,\n        paddingTop: 10,\n        minHeight: 80,\n        paddingLeft: 0,\n        paddingRight: 15,\n        color: colors.dullWhite\n    },\n    textInline: {\n        flexDirection: \"row\",\n        justifyContent: \"flex-start\",\n        paddingBottom: 5, \n    },\n    topWrapper: {\n        flexDirection: \"column\",\n        marginLeft: 118,\n        top: 10,\n        paddingRight: 10,\n        minHeight: 210,\n        width: \"55%\",\n    },\n    middleWrapper: {\n        paddingTop: 20,\n        paddingLeft: 10,\n    },\n    bottomWrapper: {\n        alignSelf: \"center\",\n        bottom: 15,\n    }\n});\n\nexport default PopupCenter;\n","/**\n * File:        PopupRight.tsx\n * Author:      Nick Donfris\n * Created:     01/31/22\n */\nimport React, {useState} from 'react';\nimport {StyleSheet, Text, View, Image, TouchableOpacity } from \"react-native\";\nimport { requestHelper } from '../../helpers/Functions';\nimport { MovieMoreInfo, reqBody } from '../../helpers/Interfaces';\nimport serverURL from '../../helpers/URL';\nimport colors from '../../helpers/Colors';\n\n/* the MovieMoreInfo prop containing the info pertaining to a Movie  */\ninterface Props {\n    moreInfo: MovieMoreInfo;\n}\n\n/**\n * The 2nd index in the inner navigation screen when the Popup modal is rendered\n * to the display. Renders the poster image for a movie, and a button below it.\n * Clicking anywhere on this prop should add this movie to the bottom tab navigation\n * route for the Watchlist screen.\n *\n * @param {MovieMoreInfo} moreInfo - the availabile information for a movie from \n *                                   the backend\n *\n * @returns {JSX.Element} - The right page inside the Popup component list.\n */\nconst PopupRight = ({moreInfo}: Props) => {\n\n    const [pressed, setPressed] = useState(false);\n\n    /**\n     * @async Function that is called when a movieTile is selected. \n     *        Returns a unresolved promise. Sets the moreInfo on successful\n     *        api call.\n     *        \n     * @returns {Promise<void>} - instead of returning the objects, it sets them\n     *                            and makes use of global variables.\n     */\n    const SaveMovie = async (): Promise<void> => {\n\n        const bodyData: reqBody<MovieMoreInfo> = {\n            \"title\": moreInfo\n        };\n        let bodyString = JSON.stringify(bodyData);\n        const reqData = requestHelper(bodyString);\n        try {\n            const response = await fetch(serverURL + '/watch_list/add', reqData);\n            const obj = await response.json();\n            console.log(obj);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.imageContainer}>\n                <Image source={{uri: moreInfo.Poster}} style={styles.image} />\n            </View>\n            <View style={styles.buttonWrapper}>\n                <TouchableOpacity \n                    style={buttonStyles(pressed).button} \n                    onPress={() => {\n                        setPressed(true);\n                        SaveMovie();\n                    }}>\n                    {pressed\n                        ? <Text style={buttonStyles(pressed).text}>Added to watch-list</Text>\n                        : <Text style={buttonStyles(pressed).text}>Add to watch-list</Text>\n                    }\n                </TouchableOpacity>\n            </View> \n        </View>\n    );\n};\n\nconst buttonStyles = (pressed : boolean) => StyleSheet.create({\n    button: {\n        textAlignVertical: \"center\",\n        height: 35,\n        width: 280,\n        backgroundColor: pressed ? colors.slate : colors.black,\n        borderRadius: 20,\n    },\n    text: {\n        height: 40,\n        width: 280,\n        textAlign: \"center\",\n        fontWeight: \"bold\",\n        color: pressed ? colors.black : colors.dullWhite,\n        marginTop: 10,\n    }\n});\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        marginTop: 20,\n        justifyContent: \"center\",\n    },\n    textWrapper: {\n        textAlignVertical: \"center\",\n        height: 35,\n        width: 280,\n        backgroundColor: colors.black,\n        borderRadius: 20,\n    },\n    buttonWrapper: {\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        top: -10,\n    },\n    imageContainer: {\n        flexGrow: 1,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n    image: {\n        width: \"90%\",\n        height: \"95%\",\n        borderRadius: 20,\n    }\n})\n\nexport default PopupRight;\n","/**\n * File:        Popup.tsx\n * Author:      Nick Donfris\n * Created:     01/27/22\n */\nimport React, { useRef } from 'react';\nimport { Modal, StyleSheet, useWindowDimensions, Pressable, View, Animated, ScrollView, SafeAreaView } from \"react-native\";\nimport GestureRecognizer from 'react-native-swipe-gestures';\nimport PopupLeft from \"./PopupPages/PopupLeft\";\nimport PopupCenter from \"./PopupPages/PopupCenter\";\nimport PopupRight from \"./PopupPages/PopupRight\";\nimport { MovieMoreInfo } from '../helpers/Interfaces';\nimport { AntDesign } from '@expo/vector-icons';\nimport colors from '../helpers/Colors';\n\n/* Props used in the CloseButton Functional Component */\ninterface CloseProps {\n    modalVisible: boolean;\n    updateModal: (modalVisible: boolean) => void;\n}\n\n/**\n * <CloseButton /> functional component that is rendered in the top right corner of\n * the Popup. This component functions takes the modalVisible state (which must be true)\n * and sets it to false.\n *\n * @param {function} updateModal - the function called updating the modalVisible state of\n *                                  the popup.\n * @param {boolean} modalVisible - the state of the visibility of this modal\n *\n * @returns {JSX.Element} - closes/removes visibility of this Popup prop\n */\nfunction CloseButton({updateModal, modalVisible}: CloseProps ){\n    return (\n        <Pressable\n            style={[styles.button, styles.buttonClose]}\n            onPress={() => updateModal(!modalVisible)}\n        >\n            <AntDesign name=\"closecircleo\" size={24} color={colors.dullWhite} />\n        </Pressable>\n    );\n}\n\n/* Props for the exported component from this file (<Popup/>) */\ninterface Props {\n    moreInfo: MovieMoreInfo;\n    modalVisible: boolean;\n    updateModal: (modalVisible: boolean) => void;\n}\n\n/**\n * information (swipe-able) shown within the inner modal \n *\n * @param {MovieMoreInfo} moreInfo - the interface containing all extra information about a \n *                                   movie.\n * @param {function} updateModal - no return, changes the state of the visibility of a modal\n * @param {boolean} modalVisible - the state determining if this Popup is showing. This\n *                                  so that each PopupTile can handle closing the Popup\n *\n * @returns {JSX.Element} - A swippeable list of <PopupTiles/>.\n *                          These are different components in the PopupTiles Directory.\n */\nconst Popup = ({moreInfo, updateModal, modalVisible}: Props) => {\n\n    /* this is an array of functional components, where each index is used as an inner screen */\n    const PopupTiles = [\n        <PopupLeft moreInfo={moreInfo} />,\n        <PopupCenter moreInfo={moreInfo}/>,\n        <PopupRight moreInfo={moreInfo} />,\n    ]\n    \n    /* the X value of that is changed when the user horizontally swipes on the Popup */\n    const scrollX = useRef(new Animated.Value(0)).current;\n\n    /* number that is the width of the Device screen */\n    const {width: windowWidth} = useWindowDimensions();\n\n    return (\n            <View style={styles.container}>\n            <GestureRecognizer\n                onSwipeDown={() => updateModal(!modalVisible)}\n                config={{\n                    velocityThreshold: 0.3,\n                    directionalOffsetThreshold: 300\n                }}>\n                <Modal\n                    animationType=\"slide\"\n                    transparent={true}\n                    visible={modalVisible}\n                    onRequestClose={() => {\n                        updateModal(!modalVisible);\n                }}>\n                    <View style={styles.centeredView}>\n                        <View style={styles.modalView}>\n                            <CloseButton updateModal={updateModal} modalVisible={modalVisible}/>\n                            <SafeAreaView style={styles.widthContainer}>\n                                <ScrollView\n                                    horizontal={true}\n                                    pagingEnabled={true}\n                                    showsHorizontalScrollIndicator={false}\n                                    contentOffset={{x: windowWidth-50, y:0}}\n                                    zoomScale={1}\n                                    scrollEventThrottle={1}\n                                    snapToStart={false}\n                                    snapToEnd={false}\n                                    onScroll={Animated.event([{\n                                        nativeEvent: {\n                                            contentOffset: {\n                                                x: scrollX,\n                                            },\n                                        },\n                                    }],\n                                    {useNativeDriver: false},\n                                    )}\n                                >\n                                    {PopupTiles.map((popupTile, index) => {\n                                        return(\n                                            <Animated.View key={index} style={{width: windowWidth-50, height: \"100%\"}}>\n                                                {popupTile}\n                                            </Animated.View>\n                                        );\n                                    })}\n                                </ScrollView>\n                            </SafeAreaView>\n                            <View style={styles.footer}>\n                                {PopupTiles.map((movieTile, index) => {\n                                    const width = scrollX.interpolate({\n                                        inputRange: [\n                                            windowWidth * (index - 1),\n                                            windowWidth * index,\n                                            windowWidth * (index + 1)\n                                        ],\n                                        outputRange: [8, 16, 8],\n                                        extrapolate: \"clamp\"\n                                    });\n                                    return (\n                                        <Animated.View\n                                            key={index}\n                                            style={[styles.normalDot, { width }]}\n                                        />\n                                    );\n                                })}\n                            </View>\n                        </View>\n                    </View>\n                </Modal>\n                </GestureRecognizer>\n            </View>\n    );\n};\n\n\nconst styles = StyleSheet.create({\n    centeredView: {\n        flex: 1,\n        marginTop: 30,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    modalView: {\n        backgroundColor: colors.barDarker,\n        borderRadius: 20,\n        width: \"90%\",\n        height: \"75%\",\n        shadowColor: \"#000\",\n        shadowOffset: {\n            width: 5,\n            height: 5\n        },\n        shadowOpacity: 0.5,\n        shadowRadius: 3,\n        elevation: 5\n    },\n    footer: {\n        color: colors.dullWhite,\n        flexDirection: \"row\",\n        alignSelf: \"center\",\n        justifyContent: \"space-evenly\",\n        width: \"20%\",\n        position: \"absolute\",\n        bottom: 10,\n    },\n    button: {\n        color: colors.dullWhite,\n        borderRadius: 30,\n        padding: 10,\n        backgroundColor: \"transparent\",\n        position: 'absolute',\n        top: -5,\n        right: -5,\n        elevation: 2,\n    },\n    buttonClose: {\n        backgroundColor: \"transparent\",\n    },\n    container: {\n        borderRadius: 15,\n    },\n    widthContainer: {\n        width: \"95%\",\n        height: \"95%\",\n    },\n    normalDot: {\n        height: 8,\n        width: 8,\n        borderRadius: 4,\n        backgroundColor: colors.dullWhite,\n        marginHorizontal: 4\n    },\n    indicatorContainer: {\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    }\n});\n\nexport default Popup;\n","/** \n * File:        MovieTile.tsx\n * Author:      Nick Donfris\n * Created:     01/24/22\n */\nimport React, {Component, useEffect, useRef} from 'react';\nimport {Animated, Easing, View, StyleSheet} from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport colors from \"../helpers/Colors\";\nimport {getRandomNumber} from '../helpers/Functions';\n\n\nexport default function LoadingImage () { \n\n    const spinValue = new Animated.Value(0);\n\n    Animated.loop(Animated.timing(\n        spinValue,\n        {\n            toValue: 1,\n            duration: getRandomNumber(1000, 3000),\n            easing: Easing.linear,\n            useNativeDriver: true\n        }\n    )).start();\n\n    return (\n        <View style={styles.centered}>\n            <Animated.View style={{\n                transform: [{\n                    rotate: spinValue.interpolate({\n                        inputRange: [0,1],\n                        outputRange: ['0deg', '360deg']\n                    })}]\n            }}>\n                <MaterialCommunityIcons\n                    name=\"movie-roll\"\n                    size={35}\n                    color={colors.dullWhite}\n                    style={{\n                        textAlign: \"center\",\n                        opacity: 0.2\n                    }}\n                    />\n            </Animated.View>\n        </View>\n    );\n}\n\n/* centers view for loading symbol */\nconst styles = StyleSheet.create({\n    centered: {\n        alignItems: \"center\",\n        alignSelf: \"center\", \n        top: '-50%',\n    }\n});\n\n","/**\n * File:        EmptyMovieTile.tsx\n * Author:      Nick Donfris\n * Created:     01/24/22\n */\nimport React, {useState} from 'react';\nimport {StyleSheet, Image, View, ViewStyle, Text} from 'react-native';\nimport {Movie} from '../helpers/Interfaces';\nimport {MaterialCommunityIcons} from '@expo/vector-icons';\nimport colors from '../helpers/Colors';\nimport LoadingSymbol from './LoadingSymbol';\n\n\ninterface Props {\n    movie: Movie;\n    shouldShowLoading: boolean | false;\n    extraStyle?: {};\n}\n\n\nexport default function MovieImage({movie, shouldShowLoading, extraStyle} : Props) {\n\n    const [loaded, setLoaded] = useState(false);\n\n    return (\n        <>\n            <View>\n                {movie.Title == \"N/A\" \n                    ?\n                    <View style={[extraStyle, styles.container]}>\n                        <MaterialCommunityIcons name=\"movie-roll\" size={35} color={colors.dullWhite} style={{textAlign: \"center\"}} />\n                        <Text style={styles.titleText}>{movie.Title}</Text>\n                        <Text style={styles.yearText}>({movie.Year})</Text>\n                    </View>\n                    :\n                    <Image \n                        style={extraStyle}\n                        source={{uri: movie.Poster}}\n                        onLoad={() => {setLoaded(true)}}\n                    />\n                }\n                {!loaded && <LoadingSymbol />}\n            </View>\n        </>\n\n            \n        );          \n\n}\n\n\n\n\nconst styles = StyleSheet.create({\n    container:  {\n        opacity: 0.5,\n        backgroundColor: colors.barDarker,\n    },\n    titleText: {\n        paddingTop : 5,\n        overflow: \"hidden\",\n        maxHeight: 65,\n        maxWidth: 114,\n        paddingHorizontal: 3,\n        color: colors.dullWhite\n    },\n    yearText: {\n        fontSize: 9,\n        position: 'absolute',\n        bottom: 10,\n        color: colors.dullWhite\n    },\n    centeredItems: {\n        alignItems: \"center\",\n        alignSelf: \"center\", \n        top: '-50%',\n    }\n})\n\n","/**\n * File:        MovieTile.tsx\n * Author:      Nick Donfris\n * Created:     01/24/22\n */\nimport React, {useState} from 'react';\nimport {StyleSheet, View, TouchableOpacity} from 'react-native';\nimport {Movie, MovieMoreInfo, reqBody} from '../helpers/Interfaces';\nimport {failedMovieMoreInfo, requestHelper} from '../helpers/Functions';\nimport serverURL from '../helpers/URL';\nimport Popup from './Popup';\nimport LoadingImage from './LoadingImage';\nimport MovieImage from './MovieImage';\nimport colors from '../helpers/Colors';\n\n\n\n/* single movie from typically from a movieArray */\ninterface Props {\n    movie: Movie;\n    shouldShowLoading ?: boolean;\n}\n\n/**\n * A MovieTile, which is a clickable component, which can render more information about the MovieTile\n *\n * @param {Movie} movie - the Movie interface which contains strings that correlate to the necessary details for a movie\n * @returns {JSX.Element} - the tile shown for a Movie, and the set of states that are coupled to rendering more information about a tile. \n */\nconst MovieTile = ({movie, shouldShowLoading}: Props) => {\n    /* the information retrieved from the api call onClick of MovieTile */\n    const [moreInfo, setMoreInfo] = useState<MovieMoreInfo>({} as MovieMoreInfo);\n\n    /* boolean that determines if the moreInfo modal visible */\n    const [modalVisible, setModalVisible] = useState(false);\n\n    /**\n     * @async Function that is called when a movieTile is selected. \n     *        Returns a unresolved promise. Sets the moreInfo on successful\n     *        api call.\n     *        \n     * @returns {Promise<void>} - instead of returning the objects, it sets them\n     *                            and makes use of global variables.\n     */\n    const ShowMoreInfo = async () : Promise<void> => {\n        const reqData = requestHelper(movie.imdbID);\n        console.log(reqData);\n        if (reqData == {}) {\n            console.log(\"reqData empty\");\n            return;\n        }\n        try {\n            const response = await fetch(serverURL + '/movie/more_info', reqData);\n            const obj = await response.json();\n            console.log(obj);\n            setMoreInfo(obj);\n        } catch (e) {\n            setMoreInfo(failedMovieMoreInfo(movie));\n            console.log(e);\n        }\n    }\n\n    return (\n        <View style={styles.outer}>\n            <Popup moreInfo={moreInfo} modalVisible={modalVisible} updateModal={() => { setModalVisible(!modalVisible) }} />\n            <TouchableOpacity\n                style={styles.buttonContainer}\n                activeOpacity={0.2}\n                onPress={() => {\n                    ShowMoreInfo();\n                    setModalVisible(true);\n                }}>\n                <View style={styles.container}>\n                    <MovieImage movie={movie} extraStyle={styles.container} shouldShowLoading={shouldShowLoading}/>\n                </View>\n            </TouchableOpacity> \n        </View>\n    );\n}\n\n\nconst styles = StyleSheet.create({\n    outer: {\n        flex: 1,\n        alignItems: 'center',\n        padding: 10,\n    },\n    container: {\n        borderRadius: 10,\n        width: 120,\n        height: 120,\n        alignItems: 'center',\n        overflow: 'hidden',\n    },\n    titleText: {\n        textAlign: 'center',\n        color: \"#fff\",\n        position: 'absolute',\n        bottom: 5,\n        fontSize: 10,\n        fontWeight: 'bold',\n        textShadowColor: \"#000\",\n        textShadowOffset: {\n            width: -1,\n            height: 1 \n        },\n        textShadowRadius: 1,\n    },\n    titleContainer: {\n        alignItems: 'center',\n        textAlign: 'center',\n    },\n    buttonContainer: {\n        alignItems: 'center',\n    }\n});\n\nexport default MovieTile;\n","/**\n * File:        MovieList.tsx\n * Author:      Nick Donfris\n * Created:     01/25/22\n */\nimport React, {useState} from 'react';\nimport {StyleSheet, View, FlatList, ListRenderItem} from 'react-native';\nimport MovieTile from './MovieTile';\nimport {Movie} from '../helpers/Interfaces';\n\n/* Array of Movies from Backend */\ninterface Props {\n    movieArray?: Movie[];\n}\n\n/**\n * Renders the MovieList, of MovieTiles.\n *\n * @param {Movie[]} movieArray - the Array of movies found from api backend\n *\n * @returns {JSX.Element} - a list of <MovieTiles/>\n */\nconst MovieList = ({movieArray}: Props) => {\n\n    const renderItem: ListRenderItem<Movie> = ({item}) => {\n        return (\n            <MovieTile movie={item} shouldShowLoading={true} /> \n        );           \n    }\n\n    return (\n        <View style={styles.container}>\n            <FlatList\n                style={styles.items}\n                data={movieArray}\n                renderItem={renderItem}\n                keyExtractor={(item) => item.imdbID}\n                numColumns={3}\n            />\n        </View>\n    )\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n    },\n    items: {}\n});\n\nexport default MovieList;\n\n","const MORE_INFO_HEADERS = {\n    'X-RapidAPI-Host': 'movie-database-alternative.p.rapidapi.com',\n    'X-RapidAPI-Key': 'b7a1750641mshd4e6ef3df5d8fe4p1cb598jsn335a11e3b912'\n};\n\nconst STREAMING_INFO_HEADERS = {\n  \"X-RapidAPI-Host\":\n    \"utelly-tv-shows-and-movies-availability-v1.p.rapidapi.com\",\n  \"X-RapidAPI-Key\": \"b7a1750641mshd4e6ef3df5d8fe4p1cb598jsn335a11e3b912\",\n};\n\nconst SEARCH_MOVIE = {\n    'X-RapidAPI-Host': 'movie-database-alternative.p.rapidapi.com',\n    'X-RapidAPI-Key': 'b7a1750641mshd4e6ef3df5d8fe4p1cb598jsn335a11e3b912'\n};\n\nconst SEARCH_ACTOR = {\n  \"X-RapidAPI-Host\": \"data-imdb1.p.rapidapi.com\",\n  \"X-RapidAPI-Key\": \"b7a1750641mshd4e6ef3df5d8fe4p1cb598jsn335a11e3b912\",\n};\n\nexport const apiKeys = {\n  searchMovie: SEARCH_MOVIE,\n  searchActor: SEARCH_ACTOR,\n  moreInfo: MORE_INFO_HEADERS,\n  streamingInfo: STREAMING_INFO_HEADERS,\n};\n\nexport const apiUrls = {\n    searchMovie: 'https://movie-database-alternative.p.rapidapi.com/',\n    moreInfo: 'https://movie-database-alternative.p.rapidapi.com/',\n    searchActor: 'https://data-imdb1.p.rapidapi.com/',\n    streamingInfo: 'https://utelly-tv-shows-and-movies-availability-v1.p.rapidapi.com/',\n}\n\n","/**\n * File:        SearchRoute.tsx\n * Author:      Nick Donfris\n * Created:     01/24/22\n */\nimport React, {useState} from 'react';\nimport {Keyboard, View, StyleSheet} from 'react-native';\nimport SearchBar from '../components/SearchBar';\nimport MovieList from '../components/MovieList';\nimport axios, {AxiosRequestConfig} from 'axios';\nimport {createRequest, HitSearchKey, requestHelper, setFirstMovieResults, SimulateSearch} from '../helpers/Functions';\nimport {Movie, reqBody} from '../helpers/Interfaces';\nimport serverURL from '../helpers/URL';\nimport Movies from '../assets/Top250MoviesShort.json';\nimport colors from '../helpers/Colors';\nimport { apiKeys } from '../helpers/apiKeys';\nimport { apiUrls } from '../helpers/apiKeys';\n\n/*\n * Creates the SearchRoute page. Imports the static file Top250Movies.json, which \n * is just used for pre-query info.\n *\n * @returns {JSX.Element} Search Page rendered by clicking on the bottom bar.\n */\nexport default function SearchRoute() {\n    /* the text that is inputed to the SearchBar component */\n    const [query, setQuery] = useState('');\n\n    /* the list of movies currently rendered on screen as results */\n    const [movieResults, setMovieResults] = useState<Movie[]>(setFirstMovieResults(Movies));\n\n    const handleSearch = async (newQuery: string) : Promise<string> => {\n        Keyboard.dismiss();\n        let strippedQuery = newQuery.trim();\n        if (strippedQuery == \"\") {\n            return;\n        }\n        return strippedQuery;\n    }\n\n    /**\n     * @async searchQuery - uses the query, changed in the SearchBar component. \n     *\n     * @throws {Error} - Typically thrown if server is not connected/running\n     * @returns {Promise<void>} - Array of Movies, found from query\n     */\n    const searchQuery = async () : Promise<Movie[]> => {\n        Keyboard.dismiss();\n        if (query === \"\") {\n            return;\n        }\n        let reqData = requestHelper(query);\n        try {\n            const search_name = query.trim();\n            const firstPage = {\n                method: \"GET\",\n                url:  apiUrls.searchMovie,\n                params: { s: search_name, page: \"1\", r: \"json\" },\n                headers: apiKeys.searchMovie,\n            };\n            const secondPage = {\n                method: \"GET\",\n                url: apiUrls.searchMovie,\n                params: { s: search_name, page: \"2\", r: \"json\" },\n                headers: apiKeys.searchMovie,\n            };\n            const result = await axios.request(firstPage as AxiosRequestConfig);\n            if (result.data[\"totalResults\"] > 11) {\n                const more = await axios.request(secondPage as AxiosRequestConfig);\n                let moreArr: Movie[] = more.data[\"Search\"];\n                for (var i in moreArr) {\n                    let secondPageMovie: Movie = moreArr[i];\n                    result.data[\"Search\"].push(secondPageMovie);\n                }\n            }\n            setMovieResults(result.data['Search']);\n            console.log(result.data['Search']);\n        } catch (e) {\n            console.log(e);\n            throw new Error(e);\n        } finally {\n            console.log(reqData)\n        } \n    };\n\n    return (\n        <View style={styles.container}>\n            <SearchBar\n                placeholder=\"Search for a movie...\"\n                query={query}\n                updateQuery={text => setQuery(text)} \n                searchFunction={() => {\n                    searchQuery();\n                }}\n            />\n            <View style={styles.results}>\n                <MovieList movieArray={movieResults} />\n            </View>\n        </View>\n    )\n}\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: colors.black,\n    },\n    results: {\n        paddingTop: 0,\n        height: '82%',\n    }\n\n});\n\n","/**\n * File:        BrowseRoute.tsx\n * Author:      Nick Donfris\n * Created:     01/24/22\n */\nimport React, {useState} from 'react';\nimport {Keyboard, View, StyleSheet, SafeAreaView} from 'react-native';\nimport MovieList from '../components/MovieList';\nimport {requestHelper, setFirstMovieResults} from '../helpers/Functions';\nimport {Movie, reqBody} from '../helpers/Interfaces';\nimport serverURL from '../helpers/URL';\nimport Movies from '../assets/Top250MoviesShort.json';\nimport DropDownPicker from 'react-native-dropdown-picker';\nimport colors from '../helpers/Colors';\nimport axios, {AxiosRequestConfig} from 'axios';\n\n/*\n * Creates a SearchRoute page. Imports the static file Top250Moives.json, which\n * contains the necessary data to render MovieItem's of type Movie. \n *\n * @returns {JSX.Element} - Browse Page rendered by clicking on the bottom bar.\n */\nexport default function BrowseRoute() {\n\n    /* prop that determines if the catagory dropdown is opened  */\n    const [open, setOpen] = useState(false);\n\n    /* individual value of the selected in the items */\n    const [value, setValue] = useState(null);\n\n    /* the Movie genres that are searchable in the database */\n    const [items, setItems] = useState([\n        {label: 'Action', value: 'Action'},\n        {label: 'Adventure', value: 'Adventure'},\n        {label: 'Animation', value: 'Animation'},\n        {label: 'Comedy', value: 'Comedy'},\n        {label: 'Crime', value: 'Crime'},\n        {label: 'Drama', value: 'Drama'},\n        {label: 'Family', value: 'Family'},\n        {label: 'Fantasy', value: 'Fantasy'},\n        {label: 'History', value: 'History'},\n        {label: 'Horror', value: 'Horror'},\n        {label: 'Mystery', value: 'Mystery'},\n        {label: 'Romance', value: 'Romance'},\n        {label: 'Science Fiction', value: 'Science Fiction'},\n        {label: 'Thriller', value: 'Thriller'},\n        {label: 'War', value: 'War'},\n        {label: 'Western', value: 'Western'}\n    ]);\n    \n    /* the results found from the query function */\n    const [movieResults, setMovieResults] = useState<Movie[]>(setFirstMovieResults(Movies));\n\n    /**\n     * @async searchGenre - searches the database for any movie matching the genre\n     *                      passed in as a param. Called when the user selects a \n     *                      item from the dropdown menu.\n     *\n     * @param value - the selected value from the user\n     *\n     * @returns {Promise<Movie[]>} - Returns a promise that resolves an array of movies \n     *                               from the backend, which will then re-render the \n     *                               MovieList component. \n     */\n    const searchGenre = async (value:string) : Promise<Movie[]> => {\n        Keyboard.dismiss();\n        console.log(value);\n        if (value === \"IMDb top 250\") {\n            return;\n        }\n        let bodyData: reqBody<string> = {\n            \"Genre\": value\n        }\n        let config: AxiosRequestConfig = {\n            url: serverURL + '/browse/genre',\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            data: bodyData\n        };\n        try {\n            const response = await axios.request(config);\n            const body = await response.data;\n            console.log(body);\n            setMovieResults(body);\n            return body;\n        } catch (e) {\n            console.log(e);\n            throw new Error(e);\n        }\n    };\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.topContainer}>\n                <DropDownPicker\n                    open={open}\n                    value={value}\n                    items={items}\n                    setOpen={setOpen}\n                    setValue={setValue}\n                    setItems={setItems}\n                    onChangeValue={() => {searchGenre(value)}}\n                    placeholder=\"IMDb Top 250\"\n                    theme=\"DARK\"\n                    style={styles.topBar}\n                    containerStyle={styles.containerStyle}\n                    textStyle={styles.text}\n                    labelStyle={styles.labelStyle}\n                    labelProps={{\n                        numberOfLines: 1\n                    }}\n                    disabledStyle={{\n                        opacity: 0.5\n                    }}\n                />\n            </View>\n            <SafeAreaView style={styles.results}>\n                <MovieList movieArray={movieResults} />\n            </SafeAreaView>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: colors.black,\n    },\n    topContainer: {\n        marginTop: '15%',\n        alignItems: 'center',\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        position: 'relative',\n        zIndex: 100,\n        textAlignVertical: 'center',\n        paddingBottom: 15,\n    },\n    text: {\n        flexGrow: 1,\n        textAlignVertical: 'center',\n    },\n    containerStyle: {\n        width: 325,\n    },\n    labelStyle: {\n        width: 325,\n    },\n    topBar: {\n        paddingTop: 15,\n        paddingLeft: 20,\n        paddingRight: 20,\n        paddingBottom: 15,\n        width: 325,\n        height: 50,\n    },\n    results: {\n        height: '82%',\n        position: 'relative',\n    }\n});\n\n","/**\n * File:        RemoveTile.tsx\n * Author:      Nick Donfris\n * Created:     01/24/22\n */\nimport React, {useState} from 'react';\nimport {StyleSheet, Text, View, TouchableOpacity} from 'react-native';\nimport {Movie, MovieMoreInfo, reqBody} from '../helpers/Interfaces';\nimport {createRequest, failedMovieMoreInfo, requestHelper} from '../helpers/Functions';\nimport serverURL from '../helpers/URL';\nimport colors from '../helpers/Colors';\n\n\ninterface Props {\n    movie: Movie;\n}\n\n/**\n * A MovieTile, which is a clickable component, which can render more information about the MovieTile\n *\n * @param {Movie} movie - the Movie interface which contains strings that correlate to the necessary details for a movie\n * @returns {JSX.Element} - the tile shown for a Movie, and the set of states that are coupled to rendering more information about a tile. \n */\nconst RemoveTile = ({movie}: Props) => {\n    const [removedMovie, setRemovedMovie] = useState(false);\n    /**\n     * @async Function that is called when a movieTile is selected. \n     *        Returns a unresolved promise. Sets the moreInfo on successful\n     *        api call.\n     *        \n     * @returns {Promise<void>} - instead of returning the objects, it sets them\n     *                            and makes use of global variables.\n     */\n    const RemoveMovie = async () : Promise<void> => {\n        if (movie.imdbID === \"\" || movie.imdbID === undefined || movie.imdbID === null) {\n            return Promise.resolve();\n        }\n        let reqData = requestHelper(movie.imdbID);\n        try {\n            const response = await fetch(serverURL + '/watch_list/remove', reqData);\n            const obj = await response.json();\n            console.log(obj);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    return (\n        <View style={styles.outer}>\n            <TouchableOpacity\n                style={removedStyles(removedMovie).buttonContainer}\n                activeOpacity={0.2}\n                onPress={() => {\n                    RemoveMovie();\n                    setRemovedMovie(true);\n                }}>\n                <View style={removedStyles(removedMovie).buttonContainer}>\n                    <View style={styles.topText}>\n                        {removedMovie\n                            ?<Text style={removedStyles(removedMovie).removedText}>REMOVED</Text>\n                            :<Text style={removedStyles(removedMovie).removedText}>Press to Remove</Text>\n                        }\n                    </View> \n                    <View style={styles.middleText}>\n                        <Text style={removedStyles(removedMovie).text}>{movie.Title}</Text>\n                    </View>\n                </View>\n            </TouchableOpacity> \n        </View>\n    );\n}\n\nconst removedStyles = (removedMovie : boolean) => StyleSheet.create({\n    buttonContainer: {\n        backgroundColor: removedMovie ? colors.barDarker : colors.barLighter,\n        color: removedMovie ? \"black\" : \"white\",\n        borderRadius: 10,\n        width: 120,\n        height: 120,\n        alignItems: 'center',\n        textAlign: 'center',\n    },\n    text: {\n        alignItems: 'center',\n        textAlign: 'center',\n        color: removedMovie ? \"red\" : colors.dullWhite,\n    },\n    removedText: {\n        alignItems: 'center',\n        textAlign: 'center',\n        color: removedMovie ? \"red\" : colors.dullWhite,\n        fontWeight: 'bold'\n    }\n});\n\n\nconst styles = StyleSheet.create({\n    outer: {\n        flex: 1,\n        alignItems: 'center',\n        padding: 10,\n    },\n    container: {\n        backgroundColor: 'red',\n        borderRadius: 10,\n        width: 120,\n        height: 120,\n        alignItems: 'center',\n        textAlign: 'center',\n        color: '#fff'\n    },\n    topText: {\n        paddingTop: 5,\n        paddingBottom: 5,\n        justifyContent: 'space-around'\n    },\n    middleText: {\n        alignItems: 'center',\n        textAlign: 'center',\n        textAlignVertical: 'center',\n        alignSelf: 'center',\n        justifyContent: 'space-around',\n        paddingTop: 5\n    },\n    buttonContainer: {\n        alignItems: 'center',\n    }\n});\n\nexport default RemoveTile;\n","import React, {useEffect, useState} from 'react';\nimport {StyleSheet, View, Text, FlatList, ListRenderItem, TouchableOpacity} from 'react-native';\nimport MovieTile from './MovieTile';\nimport {Movie} from '../helpers/Interfaces';\nimport RemoveTile from './RemoveTile';\n\ninterface Props {\n    movieArray?: Movie[];\n    removing?: boolean;\n    refreshing: boolean;\n    setRefreshing: (refreshing:boolean) => void;\n    loadIcon: boolean | false;\n}\n\nconst SavedMovieList = ({movieArray, removing, refreshing, setRefreshing, loadIcon}: Props) => {\n\n    const renderItem: ListRenderItem<Movie> = ({item}) => {\n        return (\n            !removing\n            ? <MovieTile movie={item} shouldShowLoading={loadIcon} /> \n            : <RemoveTile movie={item} />\n        );\n    }\n\n    return (\n        <View style={styles.container}>\n            <FlatList\n                style={styles.items}\n                data={movieArray}\n                renderItem={renderItem}\n                keyExtractor={(item) => item.imdbID}\n                numColumns={2}\n                onRefresh={() => setRefreshing(!refreshing)}\n                refreshing={removing}\n                extraData={refreshing}\n            />\n        </View>\n    );\n\n};\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n    },\n    removeTile: {\n        backgroundColor: \"lightpink\",\n        width: 120,\n        height: 120,\n        padding: 20,\n    },\n    items: {}\n\n});\n\nexport default SavedMovieList;\n","/**\n * File:        SavedRoute.tsx\n * Author:      Nick Donfris\n * Created:     01/24/22\n */\nimport React, { useEffect, useState } from \"react\";\nimport {Movie} from '../helpers/Interfaces';\nimport {StyleSheet, View, Text, TouchableOpacity} from \"react-native\";\nimport serverURL from \"../helpers/URL\";\nimport SavedMovieList from \"../components/SavedMovieList\";\nimport colors from \"../helpers/Colors\";\n\n/*\n * Creates the SavedRoute page. Calls mongoDB. The useEffect hook is called any time the refreshing\n * state is changed. This hook then asynchronously retrieves the movies from the backend\n *\n * @returns {JSX.Element} Saved Movies Page rendered by clicking the bottom navigation bar\n */\nconst SavedRoute = () => {\n    const [movies, setMovies] = useState<Movie[]>();\n\n    const [refreshing, setRefreshing] = useState(false);\n    const [removing, setRemoving] = useState(false);\n    const [loadIcon, setLoadIcon] = useState(true);\n    const [count, setCount] = useState(0);\n\n    useEffect(() => {\n        async function retrieveMovies(){ \n            const res = await fetch(serverURL + \"/watch_list/get/less\");\n            await res.json().then(res => setMovies(res)).catch(err => console.warn(err));\n        }\n        if (count == 0) {\n            setLoadIcon(true);\n            setCount(1);\n        } else {\n            setCount(count+1);\n            setLoadIcon(false);\n        }\n        console.log(\"hit:\" +count);\n        retrieveMovies();\n    }, [removing, refreshing]);\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.header}>\n                <Text style={styles.headerText}>Watch List</Text>\n            </View>\n            <View style={styles.results}>\n                <SavedMovieList movieArray={movies} removing={removing} refreshing={refreshing} setRefreshing={() => setRefreshing(!refreshing)} loadIcon={loadIcon} />\n            </View> \n            <TouchableOpacity \n                style={styles.removeButton}\n                onPress={() => {\n                    setRemoving(!removing);\n                    setRefreshing(!refreshing);\n            }}>\n                {removing\n                    ? <Text style={styles.buttonText}>Finished Removing</Text>\n                    : <Text style={styles.buttonText}>Remove  Movie(s)?</Text>\n                }\n            </TouchableOpacity>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: \"center\",\n        backgroundColor: colors.black\n    },\n    header: {\n        paddingTop: \"15%\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        backgroundColor: colors.black\n    },\n    headerText: {\n        color: colors.dullWhite,\n        fontSize: 20,\n        fontWeight: \"bold\",\n    },\n    results: {\n        height: \"80%\",\n        width: \"100%\",\n        backgroundColor: colors.black,\n        paddingTop: \"5%\",\n        paddingBottom: \"5%\",\n    },\n    removeButton: {\n        alignSelf: \"center\",\n        width: \"60%\",\n        height: \"5%\",\n        borderRadius: 20,\n        backgroundColor: colors.barLighter,\n        textAlign: \"center\",\n        justifyContent: \"center\",\n    },\n    buttonText: {\n        textAlign: \"center\",\n        justifyContent: \"center\",\n        color: colors.dullWhite,\n    }\n});\n\nexport default SavedRoute;\n","/**\n * File:        App.tsx\n * Author:      Nick Donfris\n * Created:     01/23/22\n */\nimport * as React from 'react';\nimport { LogBox } from 'react-native';\nimport { BottomNavigation } from 'react-native-paper';\nimport SearchRoute from './routes/SearchRoute';\nimport BrowseRoute from './routes/BrowseRoute';\nimport SavedRoute from './routes/SavedRoute';\nimport colors from './helpers/Colors';\n\n/*\n * heroku causes expo to throw warnings when I console.log() wrong\n * input from the api. The expo log pop-up can make you have to reinstall\n * the entire application, so I have disabled them. The Syntax Error is\n * also thrown when bad JSON is seen. If their is actually any syntax errors\n * the entire application would crash and red warnings pop-up.\n */\nLogBox.ignoreLogs([\"Syntax Error\", \"JSON Parse error: Unrecognized token\"]);\n\n/* \n * This is where we define our application. This file specifically only handles, the\n * bottom tab bar. It allows the icons on the bottom to be pressed, and once they are\n * pressed on, the UI navigates to the corresponding page.\n */\nconst App = () => {\n    const [index, setIndex] = React.useState(0);\n\n    /* useState hook, defines values for it's inner items */\n    const [routes] = React.useState([\n        {key: 'search', title: 'Search', icon: 'movie-search', color: colors.barDarker },\n        {key: 'saved', title: 'Saved', icon: 'content-save-edit-outline', color: colors.barLighter},\n        {key: 'browse', title: 'Browse', icon: 'format-list-numbered', color: colors.barDarker},\n    ]);\n\n    /* maps the state to the actual page route */\n    const renderScene = BottomNavigation.SceneMap({\n        search: SearchRoute,\n        saved: SavedRoute,\n        browse: BrowseRoute,\n    });\n\n    /* return the bottom tabbar component and render the active page (initializes to Search)  */\n    return (\n        <BottomNavigation\n            navigationState={{ index, routes }}\n            onIndexChange={setIndex}\n            renderScene={renderScene}\n            shifting={true}\n            barStyle={{\n                backgroundColor: colors.black,\n                height: 70,\n            }}\n            inactiveColor={colors.slate}\n            activeColor={colors.dullWhite}\n        />\n    );\n};\n\n\nexport default App;\n"],"sourceRoot":""}