{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SearchBar from \"../components/SearchBar\";\nimport MovieList from \"../components/MovieList\";\nimport { createRequest } from \"../helpers/Functions\";\nimport serverURL from \"../helpers/URL\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Movies = [{\n  \"Poster\": \"https://m.media-amazon.com/images/M/MV5BZDE2ZDFhMDAtMDAzZC00ZmY3LThlMTItMGFjMzRlYzExOGE1XkEyXkFqcGdeQXVyNTAyODkwOQ@@._V1_SX300.jpg\",\n  \"Title\": \"Batman: Arkham City\",\n  \"Type\": \"game\",\n  \"Year\": \"2011\",\n  \"imdbID\": \"tt1568322\"\n}, {\n  \"Poster\": \"https://m.media-amazon.com/images/M/MV5BYTBiZjFlZDQtZjc1MS00YzllLWE5ZTQtMmM5OTkyNjZjMWI3XkEyXkFqcGdeQXVyMTA1OTEwNjE@._V1_SX300.jpg\",\n  \"Title\": \"Batman Beyond\",\n  \"Type\": \"series\",\n  \"Year\": \"1999–2001\",\n  \"imdbID\": \"tt0147746\"\n}, {\n  \"Poster\": \"https://m.media-amazon.com/images/M/MV5BYjdkZWFhNzctYmNhNy00NGM5LTg0Y2YtZWM4NmU2MWQ3ODVkXkEyXkFqcGdeQXVyNTA0OTU0OTQ@._V1_SX300.jpg\",\n  \"Title\": \"Son of Batman\",\n  \"Type\": \"movie\",\n  \"Year\": \"2014\",\n  \"imdbID\": \"tt3139072\"\n}];\nexport default function SearchRoute() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      query = _useState2[0],\n      setQuery = _useState2[1];\n\n  var _useState3 = useState(Movies),\n      _useState4 = _slicedToArray(_useState3, 2),\n      movieResults = _useState4[0],\n      setMovieResults = _useState4[1];\n\n  var searchQuery = function searchQuery() {\n    var reqData, response, body;\n    return _regeneratorRuntime.async(function searchQuery$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Keyboard.dismiss();\n            reqData = createRequest({\n              method: 'POST',\n              mode: 'no-cors',\n              headers: {\n                accept: 'application/json',\n                contentType: 'application/json'\n              },\n              body: query\n            });\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(fetch(serverURL + \"/search\", reqData));\n\n          case 5:\n            response = _context.sent;\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 8:\n            body = _context.sent;\n            console.log(body.Search);\n            setMovieResults(body.Search);\n            return _context.abrupt(\"return\", body);\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](2);\n            console.log(_context.t0);\n            throw new Error(_context.t0);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 14]], Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(SearchBar, {\n      placeholder: \"Search for a movie...\",\n      query: query,\n      updateQuery: function updateQuery(text) {\n        return setQuery(text);\n      },\n      searchFunction: searchQuery\n    }), _jsx(View, {\n      style: styles.results,\n      children: _jsx(MovieList, {\n        movieArray: movieResults\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  results: {\n    paddingTop: 0,\n    height: '82%'\n  }\n});","map":{"version":3,"sources":["/home/ndonfris/Projects/frontends/react-projects/typescript/ios/ts-movie-list/routes/SearchRoute.tsx"],"names":["React","useState","SearchBar","MovieList","createRequest","serverURL","Movies","SearchRoute","query","setQuery","movieResults","setMovieResults","searchQuery","Keyboard","dismiss","reqData","method","mode","headers","accept","contentType","body","fetch","response","json","console","log","Search","Error","styles","container","text","results","StyleSheet","create","flex","paddingTop","height"],"mappings":";;AAAA,OAAOA,KAAP,IAA0BC,QAA1B,QAA6C,OAA7C;;;;AAEA,OAAOC,SAAP;AACA,OAAOC,SAAP;AACA,SAAQC,aAAR;AAEA,OAAOC,SAAP;;;AAEA,IAAMC,MAAM,GAAG,CACX;AACI,YAAU,oIADd;AAEI,WAAS,qBAFb;AAGI,UAAQ,MAHZ;AAII,UAAQ,MAJZ;AAKI,YAAU;AALd,CADW,EAQX;AACI,YAAU,oIADd;AAEI,WAAS,eAFb;AAGI,UAAQ,QAHZ;AAII,UAAQ,WAJZ;AAKI,YAAU;AALd,CARW,EAeX;AACI,YAAU,oIADd;AAEI,WAAS,eAFb;AAGI,UAAQ,OAHZ;AAII,UAAQ,MAJZ;AAKI,YAAU;AALd,CAfW,CAAf;AAyBA,eAAe,SAASC,WAAT,GAAuB;AAClC,kBAA0BN,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOO,KAAP;AAAA,MAAcC,QAAd;;AAEA,mBAAwCR,QAAQ,CAAUK,MAAV,CAAhD;AAAA;AAAA,MAAOI,YAAP;AAAA,MAAqBC,eAArB;;AAGA,MAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,YAAAA,QAAQ,CAACC,OAAT;AACIC,YAAAA,OAFY,GAEFX,aAAa,CAAC;AACxBY,cAAAA,MAAM,EAAE,MADgB;AAExBC,cAAAA,IAAI,EAAE,SAFkB;AAGxBC,cAAAA,OAAO,EAAE;AACLC,gBAAAA,MAAM,EAAE,kBADH;AAELC,gBAAAA,WAAW,EAAE;AAFR,eAHe;AAOxBC,cAAAA,IAAI,EAAEb;AAPkB,aAAD,CAFX;AAAA;AAAA;AAAA,6CAYWc,KAAK,CAACjB,SAAS,GAAC,SAAX,EAAsBU,OAAtB,CAZhB;;AAAA;AAYNQ,YAAAA,QAZM;AAAA;AAAA,6CAaOA,QAAQ,CAACC,IAAT,EAbP;;AAAA;AAaNH,YAAAA,IAbM;AAcZI,YAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACM,MAAjB;AACAhB,YAAAA,eAAe,CAACU,IAAI,CAACM,MAAN,CAAf;AAfY,6CAgBLN,IAhBK;;AAAA;AAAA;AAAA;AAkBZI,YAAAA,OAAO,CAACC,GAAR;AAlBY,kBAmBN,IAAIE,KAAJ,aAnBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAwBA,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA,eACI,KAAC,SAAD;AACI,MAAA,WAAW,EAAC,uBADhB;AAEI,MAAA,KAAK,EAAEtB,KAFX;AAGI,MAAA,WAAW,EAAE,qBAAAuB,IAAI;AAAA,eAAItB,QAAQ,CAACsB,IAAD,CAAZ;AAAA,OAHrB;AAII,MAAA,cAAc,EAAEnB;AAJpB,MADJ,EAOI,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEiB,MAAM,CAACG,OAApB;AAAA,gBACI,KAAC,SAAD;AAAW,QAAA,UAAU,EAAEtB;AAAvB;AADJ,MAPJ;AAAA,IADJ;AAaH;AAID,IAAMmB,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC7BJ,EAAAA,SAAS,EAAE;AACPK,IAAAA,IAAI,EAAE;AADC,GADkB;AAI7BH,EAAAA,OAAO,EAAE;AACLI,IAAAA,UAAU,EAAE,CADP;AAELC,IAAAA,MAAM,EAAE;AAFH;AAJoB,CAAlB,CAAf","sourcesContent":["import React, {useEffect, useState, FC} from 'react';\nimport {Keyboard, View, StyleSheet, TextInput, FlatList, ListRenderItem, ListRenderItemInfo} from 'react-native';\nimport SearchBar from '../components/SearchBar';\nimport MovieList from '../components/MovieList';\nimport {createRequest} from '../helpers/Functions';\nimport {MovieArray, Movie} from '../helpers/Interfaces';\nimport serverURL from '../helpers/URL';\n\nconst Movies = [\n    {\n        \"Poster\": \"https://m.media-amazon.com/images/M/MV5BZDE2ZDFhMDAtMDAzZC00ZmY3LThlMTItMGFjMzRlYzExOGE1XkEyXkFqcGdeQXVyNTAyODkwOQ@@._V1_SX300.jpg\",\n        \"Title\": \"Batman: Arkham City\",\n        \"Type\": \"game\",\n        \"Year\": \"2011\",\n        \"imdbID\": \"tt1568322\",\n    },\n    {\n        \"Poster\": \"https://m.media-amazon.com/images/M/MV5BYTBiZjFlZDQtZjc1MS00YzllLWE5ZTQtMmM5OTkyNjZjMWI3XkEyXkFqcGdeQXVyMTA1OTEwNjE@._V1_SX300.jpg\",\n        \"Title\": \"Batman Beyond\",\n        \"Type\": \"series\",\n        \"Year\": \"1999–2001\",\n        \"imdbID\": \"tt0147746\",\n    },\n    {\n        \"Poster\": \"https://m.media-amazon.com/images/M/MV5BYjdkZWFhNzctYmNhNy00NGM5LTg0Y2YtZWM4NmU2MWQ3ODVkXkEyXkFqcGdeQXVyNTA0OTU0OTQ@._V1_SX300.jpg\",\n        \"Title\": \"Son of Batman\",\n        \"Type\": \"movie\",\n        \"Year\": \"2014\",\n        \"imdbID\": \"tt3139072\",\n    },\n];\n\n\nexport default function SearchRoute() {\n    const [query, setQuery] = useState('');\n    \n    const [movieResults, setMovieResults] = useState<Movie[]>(Movies);\n\n\n    const searchQuery = async () : Promise<Movie[]> => {\n        Keyboard.dismiss();\n        let reqData = createRequest({\n            method: 'POST',\n            mode: 'no-cors',\n            headers: {\n                accept: 'application/json',\n                contentType: 'application/json'\n            },\n            body: query,\n        });\n        try {\n            const response = await fetch(serverURL+\"/search\", reqData);\n            const body = await response.json();\n            console.log(body.Search);\n            setMovieResults(body.Search);\n            return body;\n        } catch (e) {\n            console.log(e);\n            throw new Error(e);\n        }\n    };\n\n\n    return (\n        <View style={styles.container}>\n            <SearchBar\n                placeholder=\"Search for a movie...\"\n                query={query}\n                updateQuery={text => setQuery(text)} \n                searchFunction={searchQuery}\n            />\n            <View style={styles.results}>\n                <MovieList movieArray={movieResults}/>\n            </View>\n        </View>\n    )\n}\n\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n    },\n    results: {\n        paddingTop: 0,\n        height: '82%',\n    }\n\n});\n\n\n// .then(res => res.json())\n// .then(resData => {\n//     console.log(resData);\n//     setMovieResults(resData);\n// })\n"]},"metadata":{},"sourceType":"module"}