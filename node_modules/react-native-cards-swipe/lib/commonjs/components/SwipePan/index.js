"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SWIPE_DIRECTION = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeGestureHandler = require("react-native-gesture-handler");

var _reactNativeReanimated = require("react-native-reanimated");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let SWIPE_DIRECTION;
exports.SWIPE_DIRECTION = SWIPE_DIRECTION;

(function (SWIPE_DIRECTION) {
  SWIPE_DIRECTION["LEFT"] = "left";
  SWIPE_DIRECTION["RIGHT"] = "right";
  SWIPE_DIRECTION["DEFAULT"] = "default";
})(SWIPE_DIRECTION || (exports.SWIPE_DIRECTION = SWIPE_DIRECTION = {}));

const {
  width
} = _reactNative.Dimensions.get('window');

const SwipePan = ({
  x,
  y,
  onSnap,
  onStart,
  onChangeDirection,
  onEnd,
  originY,
  children
}) => {
  const directionX = (0, _reactNativeReanimated.useSharedValue)(SWIPE_DIRECTION.DEFAULT);
  const gestureHandler = (0, _reactNativeReanimated.useAnimatedGestureHandler)({
    onStart: (event, ctx) => {
      ctx.startX = x.value;
      ctx.startY = y.value;
      originY.value = event.y;
      (0, _reactNativeReanimated.runOnJS)(onStart)();
    },
    onActive: (event, ctx) => {
      x.value = ctx.startX + event.translationX;
      y.value = ctx.startY + event.translationY;
      const direction = Math.round(x.value) > 0 ? SWIPE_DIRECTION.RIGHT : SWIPE_DIRECTION.LEFT;

      if (direction !== directionX.value) {
        directionX.value = direction;
        (0, _reactNativeReanimated.runOnJS)(onChangeDirection)(direction);
      }
    },
    onEnd: (event, ctx) => {
      (0, _reactNativeReanimated.runOnJS)(onEnd)();
      const thresh = width * 0.4;
      const diff = ctx.startX + event.translationX;
      directionX.value = SWIPE_DIRECTION.DEFAULT;
      (0, _reactNativeReanimated.runOnJS)(onChangeDirection)(directionX.value);

      if (diff > thresh) {
        (0, _reactNativeReanimated.runOnJS)(onSnap)(true);
      } else if (diff < -1 * thresh) {
        (0, _reactNativeReanimated.runOnJS)(onSnap)(false);
      } else {
        x.value = (0, _reactNativeReanimated.withSpring)(0);
        y.value = (0, _reactNativeReanimated.withSpring)(0);
      }
    }
  });
  return /*#__PURE__*/React.createElement(_reactNativeGestureHandler.PanGestureHandler, {
    onGestureEvent: gestureHandler
  }, children);
};

var _default = SwipePan;
exports.default = _default;
//# sourceMappingURL=index.js.map