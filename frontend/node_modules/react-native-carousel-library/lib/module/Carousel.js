import Pagination from './components/Pagination';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { View, Dimensions, Animated, StyleSheet, Text } from 'react-native';
import isURL from 'validator/lib/isURL';
const {
  width
} = Dimensions.get('screen');
const ITEM_WIDTH = width * 0.76;
const ITEM_HEIGHT = ITEM_WIDTH * 1.47;

const Carousel = _ref => {
  let {
    data,
    landscapeImage,
    pagination = true,
    autoScroll,
    backgroundStyles,
    title,
    imageWrapperStyles,
    titleWrapperStyles,
    titleStyles,
    paginationStyles,
    autoScrollInterval = 5000
  } = _ref;
  const scrollRef = useRef(new Animated.Value(0)).current;
  const [active, setActive] = useState(0);
  const viewabilityConfig = {
    itemVisiblePercentThreshold: 50
  };
  const myRef = useRef(null);
  const onViewableItemsChanged = useCallback(_ref2 => {
    let {
      viewableItems
    } = _ref2;

    if (viewableItems.length > 0) {
      const {
        index
      } = viewableItems[0];
      setActive(index);
    }
  }, []);
  const viewabilityConfigCallbackPairs = useRef([{
    viewabilityConfig,
    onViewableItemsChanged
  }]);
  useEffect(() => {
    let timer;

    if (autoScroll) {
      timer = setInterval(() => {
        var _myRef$current;

        (_myRef$current = myRef.current) === null || _myRef$current === void 0 ? void 0 : _myRef$current.scrollToIndex({
          animated: active === data.length - 1 ? false : true,
          index: active === data.length - 1 ? 0 : active + 1
        });
      }, autoScrollInterval);
    }

    return () => clearInterval(timer);
  }, [active, autoScroll, data.length, autoScrollInterval]);
  return /*#__PURE__*/React.createElement(View, {
    style: [styles.wrapper, backgroundStyles]
  }, /*#__PURE__*/React.createElement(Animated.FlatList, {
    data: data,
    ref: myRef,
    keyExtractor: (_, index) => index.toString(),
    horizontal: true,
    viewabilityConfigCallbackPairs: viewabilityConfigCallbackPairs.current,
    showsHorizontalScrollIndicator: false,
    pagingEnabled: true,
    decelerationRate: "fast",
    initialNumToRender: 2,
    snapToInterval: width,
    onScroll: Animated.event([{
      nativeEvent: {
        contentOffset: {
          x: scrollRef
        }
      }
    }], {
      useNativeDriver: true
    }),
    renderItem: _ref3 => {
      let {
        item,
        index
      } = _ref3;
      const inputRange = [(index - 1) * width, index * width, (index + 1) * width];
      const translateX = scrollRef.interpolate({
        inputRange,
        outputRange: [-width * 0.7, 0, width * 0.7]
      });
      const isUrl = isURL(item.url + '');
      const imageSource = isUrl ? {
        uri: item.url
      } : item.url;
      return /*#__PURE__*/React.createElement(View, {
        style: [styles.singleItem, imageWrapperStyles]
      }, title && /*#__PURE__*/React.createElement(View, {
        style: [styles.titleContainer, titleWrapperStyles]
      }, /*#__PURE__*/React.createElement(Text, {
        key: index,
        style: [styles.title, titleStyles]
      }, item.title)), /*#__PURE__*/React.createElement(View, {
        style: [landscapeImage ? styles.horizontalImageContainer : styles.imageContainer]
      }, /*#__PURE__*/React.createElement(Animated.Image, {
        source: imageSource,
        style: [landscapeImage ? styles.horizontalImage : styles.image, {
          transform: [{
            translateX
          }]
        }]
      })));
    }
  }), pagination && /*#__PURE__*/React.createElement(Pagination, {
    scrollRef: scrollRef,
    data: data,
    paginationStyles: paginationStyles
  }));
};

export default Carousel;
const styles = StyleSheet.create({
  wrapper: {
    width: '100%',
    minHeight: ITEM_WIDTH,
    position: 'relative'
  },
  singleItem: {
    width: width,
    height: ITEM_HEIGHT,
    justifyContent: 'space-around',
    alignItems: 'center'
  },
  imageContainer: {
    width: ITEM_WIDTH,
    height: ITEM_HEIGHT,
    overflow: 'hidden',
    alignItems: 'center',
    borderRadius: 14
  },
  horizontalImageContainer: {
    width: ITEM_HEIGHT - 50,
    height: ITEM_WIDTH,
    overflow: 'hidden',
    alignItems: 'center',
    borderRadius: 14
  },
  image: {
    width: ITEM_WIDTH * 1.2,
    height: ITEM_HEIGHT,
    resizeMode: 'cover'
  },
  horizontalImage: {
    width: ITEM_HEIGHT * 1.2,
    height: ITEM_WIDTH,
    resizeMode: 'cover'
  },
  titleContainer: {
    zIndex: 3,
    position: 'absolute',
    right: 15,
    bottom: -7,
    justifyContent: 'center',
    alignItems: 'center'
  },
  title: {
    color: 'black',
    fontSize: 21,
    paddingBottom: 10,
    letterSpacing: 2
  }
});
//# sourceMappingURL=Carousel.js.map