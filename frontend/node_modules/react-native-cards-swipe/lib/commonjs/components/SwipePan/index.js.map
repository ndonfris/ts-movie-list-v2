{"version":3,"sources":["index.tsx"],"names":["SWIPE_DIRECTION","width","Dimensions","get","SwipePan","x","y","onSnap","onStart","onChangeDirection","onEnd","originY","children","directionX","DEFAULT","gestureHandler","event","ctx","startX","value","startY","onActive","translationX","translationY","direction","Math","round","RIGHT","LEFT","thresh","diff"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;IAOYA,e;;;WAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;GAAAA,e,+BAAAA,e;;AA0BZ,MAAM;AAAEC,EAAAA;AAAF,IAAYC,wBAAWC,GAAX,CAAe,QAAf,CAAlB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAChBC,EAAAA,CADgB;AAEhBC,EAAAA,CAFgB;AAGhBC,EAAAA,MAHgB;AAIhBC,EAAAA,OAJgB;AAKhBC,EAAAA,iBALgB;AAMhBC,EAAAA,KANgB;AAOhBC,EAAAA,OAPgB;AAQhBC,EAAAA;AARgB,CAAD,KASJ;AACX,QAAMC,UAAU,GAAG,2CAAeb,eAAe,CAACc,OAA/B,CAAnB;AACA,QAAMC,cAAc,GAAG,sDAA0B;AAC/CP,IAAAA,OAAO,EAAE,CAACQ,KAAD,EAAQC,GAAR,KAAmC;AAC1CA,MAAAA,GAAG,CAACC,MAAJ,GAAab,CAAC,CAACc,KAAf;AACAF,MAAAA,GAAG,CAACG,MAAJ,GAAad,CAAC,CAACa,KAAf;AAEAR,MAAAA,OAAO,CAACQ,KAAR,GAAgBH,KAAK,CAACV,CAAtB;AACA,0CAAQE,OAAR;AACD,KAP8C;AAQ/Ca,IAAAA,QAAQ,EAAE,CAACL,KAAD,EAAQC,GAAR,KAAgB;AACxBZ,MAAAA,CAAC,CAACc,KAAF,GAAUF,GAAG,CAACC,MAAJ,GAAaF,KAAK,CAACM,YAA7B;AACAhB,MAAAA,CAAC,CAACa,KAAF,GAAUF,GAAG,CAACG,MAAJ,GAAaJ,KAAK,CAACO,YAA7B;AACA,YAAMC,SAAS,GACbC,IAAI,CAACC,KAAL,CAAWrB,CAAC,CAACc,KAAb,IAAsB,CAAtB,GAA0BnB,eAAe,CAAC2B,KAA1C,GAAkD3B,eAAe,CAAC4B,IADpE;;AAEA,UAAIJ,SAAS,KAAKX,UAAU,CAACM,KAA7B,EAAoC;AAClCN,QAAAA,UAAU,CAACM,KAAX,GAAmBK,SAAnB;AACA,4CAAQf,iBAAR,EAA2Be,SAA3B;AACD;AACF,KAjB8C;AAkB/Cd,IAAAA,KAAK,EAAE,CAACM,KAAD,EAAQC,GAAR,KAAgB;AACrB,0CAAQP,KAAR;AAEA,YAAMmB,MAAM,GAAG5B,KAAK,GAAG,GAAvB;AACA,YAAM6B,IAAI,GAAGb,GAAG,CAACC,MAAJ,GAAaF,KAAK,CAACM,YAAhC;AACAT,MAAAA,UAAU,CAACM,KAAX,GAAmBnB,eAAe,CAACc,OAAnC;AACA,0CAAQL,iBAAR,EAA2BI,UAAU,CAACM,KAAtC;;AAEA,UAAIW,IAAI,GAAGD,MAAX,EAAmB;AACjB,4CAAQtB,MAAR,EAAgB,IAAhB;AACD,OAFD,MAEO,IAAIuB,IAAI,GAAG,CAAC,CAAD,GAAKD,MAAhB,EAAwB;AAC7B,4CAAQtB,MAAR,EAAgB,KAAhB;AACD,OAFM,MAEA;AACLF,QAAAA,CAAC,CAACc,KAAF,GAAU,uCAAW,CAAX,CAAV;AACAb,QAAAA,CAAC,CAACa,KAAF,GAAU,uCAAW,CAAX,CAAV;AACD;AACF;AAlC8C,GAA1B,CAAvB;AAqCA,sBACE,oBAAC,4CAAD;AAAmB,IAAA,cAAc,EAAEJ;AAAnC,KACGH,QADH,CADF;AAKD,CArDD;;eAuDeR,Q","sourcesContent":["import * as React from 'react';\nimport { Dimensions } from 'react-native';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport {\n  useAnimatedGestureHandler,\n  withSpring,\n  runOnJS,\n  useSharedValue,\n} from 'react-native-reanimated';\n\nexport enum SWIPE_DIRECTION {\n  LEFT = 'left',\n  RIGHT = 'right',\n  DEFAULT = 'default',\n}\n\ninterface Value {\n  value: number;\n}\n\ninterface Props {\n  x: Value;\n  y: Value;\n  originY: Value;\n  onSnap: (swipedRight: boolean) => void;\n  onStart: () => void;\n  onEnd: () => void;\n  onChangeDirection: (direction: SWIPE_DIRECTION) => void;\n  children: React.ReactNode;\n}\n\ntype AnimatedGHContext = {\n  startX: number;\n  startY: number;\n};\n\nconst { width } = Dimensions.get('window');\n\nconst SwipePan = ({\n  x,\n  y,\n  onSnap,\n  onStart,\n  onChangeDirection,\n  onEnd,\n  originY,\n  children,\n}: Props) => {\n  const directionX = useSharedValue(SWIPE_DIRECTION.DEFAULT);\n  const gestureHandler = useAnimatedGestureHandler({\n    onStart: (event, ctx: AnimatedGHContext) => {\n      ctx.startX = x.value;\n      ctx.startY = y.value;\n\n      originY.value = event.y;\n      runOnJS(onStart)();\n    },\n    onActive: (event, ctx) => {\n      x.value = ctx.startX + event.translationX;\n      y.value = ctx.startY + event.translationY;\n      const direction =\n        Math.round(x.value) > 0 ? SWIPE_DIRECTION.RIGHT : SWIPE_DIRECTION.LEFT;\n      if (direction !== directionX.value) {\n        directionX.value = direction;\n        runOnJS(onChangeDirection)(direction);\n      }\n    },\n    onEnd: (event, ctx) => {\n      runOnJS(onEnd)();\n\n      const thresh = width * 0.4;\n      const diff = ctx.startX + event.translationX;\n      directionX.value = SWIPE_DIRECTION.DEFAULT;\n      runOnJS(onChangeDirection)(directionX.value);\n\n      if (diff > thresh) {\n        runOnJS(onSnap)(true);\n      } else if (diff < -1 * thresh) {\n        runOnJS(onSnap)(false);\n      } else {\n        x.value = withSpring(0);\n        y.value = withSpring(0);\n      }\n    },\n  });\n\n  return (\n    <PanGestureHandler onGestureEvent={gestureHandler}>\n      {children}\n    </PanGestureHandler>\n  );\n};\n\nexport default SwipePan;\n"]}