"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));

var _SwipePan = _interopRequireDefault(require("../SwipePan"));

var _CardWrap = _interopRequireDefault(require("../CardWrap"));

var _styles = _interopRequireDefault(require("./styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const {
  width
} = _reactNative.Dimensions.get('window');

const CardsSwipe = /*#__PURE__*/(0, _react.forwardRef)(({
  cards,
  renderCard,
  loop = true,
  renderNoMoreCard = () => null,
  renderYep = () => null,
  renderNope = () => null,
  initialIndex = 0,
  containerStyle = {},
  cardContainerStyle = {},
  lowerCardZoom = 0.95,
  animDuration = 150,
  horizontalThreshold = width * 0.65,
  rotationAngle = 10,
  onSwipeStart = () => {},
  onSwipeChangeDirection = () => {},
  onSwipeEnd = () => {},
  onSwiped = () => {},
  onSwipedLeft = () => {},
  onSwipedRight = () => {},
  onNoMoreCards = () => {}
}, ref) => {
  const [index, setIndex] = (0, _react.useState)(initialIndex);
  const [lock, setLock] = (0, _react.useState)(false);
  const [noMoreCards, setNoMoreCards] = (0, _react.useState)(false);
  const scale = (0, _reactNativeReanimated.useSharedValue)(1);
  const overrideNopeOpacity = (0, _reactNativeReanimated.useSharedValue)(0);
  const overrideLikeOpacity = (0, _reactNativeReanimated.useSharedValue)(0);
  const [secondIndex, setSecondIndex] = (0, _react.useState)(index + 1);
  (0, _react.useImperativeHandle)(ref, () => ({
    swipeLeft,
    swipeRight
  }));
  const x = (0, _reactNativeReanimated.useSharedValue)(0);
  const y = (0, _reactNativeReanimated.useSharedValue)(0);
  const originY = (0, _reactNativeReanimated.useSharedValue)(0);
  const prevCards = (0, _react.useRef)(cards);
  (0, _react.useEffect)(() => {
    if (prevCards.current !== cards) {
      prevCards.current = cards;

      if (noMoreCards) {
        setIndex(0);
        setSecondIndex(1);
        setNoMoreCards(false);
        x.value = 0;
        y.value = 0;
      }
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [cards]);
  (0, _react.useEffect)(() => {
    if (noMoreCards) {
      onNoMoreCards();
    }
  }, [noMoreCards, onNoMoreCards]);

  const swipeLeft = () => {
    if (index >= 0) {
      overrideNopeOpacity.value = (0, _reactNativeReanimated.withSpring)(1);
      setTimeout(() => onCardSwiped(false), 300);
    }
  };

  const swipeRight = () => {
    if (index >= 0) {
      overrideLikeOpacity.value = (0, _reactNativeReanimated.withSpring)(1);
      setTimeout(() => onCardSwiped(true), 300);
    }
  };

  const onStartSwipe = (0, _react.useCallback)(() => {
    onSwipeStart(index);
  }, [index, onSwipeStart]);
  const onChangeSwipeDirection = (0, _react.useCallback)(direction => {
    onSwipeChangeDirection(direction);
  }, [onSwipeChangeDirection]);
  const onEndSwipe = (0, _react.useCallback)(() => {
    onSwipeEnd(index);
  }, [index, onSwipeEnd]);
  const onCardSwiped = (0, _react.useCallback)(right => {
    setLock(true);
    onSwiped(index);

    const onEndCardAnimation = () => {
      const resetPosition = secondCardIndex => {
        x.value = (0, _reactNativeReanimated.withDelay)(100, (0, _reactNativeReanimated.withTiming)(0, {
          duration: 0
        }, () => {
          (0, _reactNativeReanimated.runOnJS)(setSecondIndex)(secondCardIndex);
        }));
        y.value = (0, _reactNativeReanimated.withDelay)(100, (0, _reactNativeReanimated.withTiming)(0, {
          duration: 0
        }));
      };

      if (loop || index + 2 < cards.length) {
        const incSafe = i => (i + 1) % cards.length;

        setIndex(incSafe(index));
        resetPosition(incSafe(secondIndex));
      } else if (index + 1 < cards.length) {
        setIndex(index + 1);
        resetPosition(-1);
      } else {
        setIndex(-1);
        setNoMoreCards(true);
      }

      overrideNopeOpacity.value = 0;
      overrideLikeOpacity.value = 0;
      setLock(false);
    };

    if (right) {
      onSwipedRight(index);
      x.value = (0, _reactNativeReanimated.withTiming)(width * 1.5, {
        duration: animDuration
      }, () => {
        (0, _reactNativeReanimated.runOnJS)(onEndCardAnimation)();
      });
      y.value = (0, _reactNativeReanimated.withSpring)(0);
    } else {
      onSwipedLeft(index);
      x.value = (0, _reactNativeReanimated.withTiming)(-width * 1.5, {
        duration: animDuration
      }, () => {
        (0, _reactNativeReanimated.runOnJS)(onEndCardAnimation)();
      });
      y.value = (0, _reactNativeReanimated.withSpring)(0);
    }
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [index, secondIndex, cards, onSwiped, onSwipedRight, onSwipedLeft]);

  const renderNoMoreCardsContainer = () => {
    if (noMoreCards) {
      return /*#__PURE__*/_react.default.createElement(_reactNative.View, null, renderNoMoreCard());
    }

    return null;
  };

  const nopeOpacityStyle = (0, _reactNativeReanimated.useAnimatedStyle)(() => {
    const opacity = (0, _reactNativeReanimated.interpolate)(x.value, [0, -horizontalThreshold], [0, 1]);
    return {
      opacity: overrideNopeOpacity.value || opacity
    };
  });
  const likeOpacityStyle = (0, _reactNativeReanimated.useAnimatedStyle)(() => {
    const opacity = (0, _reactNativeReanimated.interpolate)(x.value, [0, horizontalThreshold], [0, 1]);
    return {
      opacity: overrideLikeOpacity.value || opacity
    };
  });
  const style = (0, _reactNativeReanimated.useAnimatedStyle)(() => {
    const factor = 1;
    const rotateZ = (0, _reactNativeReanimated.interpolate)(x.value, [0, factor * horizontalThreshold], [0, rotationAngle]);
    return {
      elevation: 2,
      width: '100%',
      height: '100%',
      position: 'absolute',
      alignItems: 'center',
      justifyContent: 'center',
      transform: [{
        scale: scale.value
      }, {
        translateX: x.value
      }, {
        translateY: y.value
      }, {
        rotateZ: `${rotateZ}deg`
      }]
    };
  });
  const lowerStyle = (0, _reactNativeReanimated.useAnimatedStyle)(() => {
    const lowerCardScale = (0, _reactNativeReanimated.interpolate)(x.value, [-horizontalThreshold, -0.01, 0, 0.01, horizontalThreshold], [1, lowerCardZoom, lowerCardZoom, lowerCardZoom, 1], _reactNativeReanimated.default.Extrapolate.CLAMP);
    return {
      zIndex: -1,
      width: '100%',
      height: '100%',
      position: 'absolute',
      alignItems: 'center',
      justifyContent: 'center',
      transform: [{
        translateX: 0
      }, {
        translateY: 0
      }, {
        scale: secondIndex >= 0 ? lowerCardScale : 1
      }]
    };
  });
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    pointerEvents: lock ? 'none' : 'auto',
    style: [_styles.default.container, containerStyle]
  }, secondIndex >= 0 ? /*#__PURE__*/_react.default.createElement(_CardWrap.default, {
    key: secondIndex,
    pointerEvents: 'none',
    style: lowerStyle,
    cardContainerStyle
  }, renderCard(cards[secondIndex])) : null, index >= 0 ? /*#__PURE__*/_react.default.createElement(_SwipePan.default, {
    onSnap: onCardSwiped,
    onStart: onStartSwipe,
    onChangeDirection: onChangeSwipeDirection,
    onEnd: onEndSwipe,
    x,
    y,
    originY
  }, /*#__PURE__*/_react.default.createElement(_CardWrap.default, {
    style,
    cardContainerStyle
  }, renderCard(cards[index]), /*#__PURE__*/_react.default.createElement(_reactNativeReanimated.default.View, {
    style: _styles.default.overlay,
    pointerEvents: 'none'
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: _styles.default.row
  }, /*#__PURE__*/_react.default.createElement(_reactNativeReanimated.default.View, {
    style: likeOpacityStyle
  }, renderYep()), /*#__PURE__*/_react.default.createElement(_reactNativeReanimated.default.View, {
    style: nopeOpacityStyle
  }, renderNope()))))) : null, renderNoMoreCardsContainer());
});
var _default = CardsSwipe;
exports.default = _default;
//# sourceMappingURL=index.js.map