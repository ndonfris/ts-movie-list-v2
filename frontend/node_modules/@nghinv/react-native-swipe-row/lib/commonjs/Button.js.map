{"version":3,"sources":["Button.tsx"],"names":["space","Button","props","content","width","index","translateX","maxTranslate","type","onPress","length","backgroundColor","titleColor","contentStyle","delta","Math","abs","value","position","flex","top","bottom","right","transform","Extrapolate","EXTEND","alignItems","left","testID","accessibilityLabel","styles","container","icon","title","color","marginTop","titleStyle","StyleSheet","create","justifyContent","fontSize","React","memo","equals"],"mappings":"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","sourcesContent":["/**\n * Created by nghinv on Sun Jun 20 2021\n * Copyright (c) 2021 nghinv@lumi.biz\n */\n\nimport React from 'react';\nimport { Text, StyleSheet, TouchableOpacity, TextStyle } from 'react-native';\nimport Animated, {\n  useAnimatedStyle,\n  interpolate,\n  Extrapolate,\n} from 'react-native-reanimated';\nimport { Icon, IconPropsType } from '@nghinv/react-native-icons';\nimport equals from 'react-fast-compare';\n\nexport type ActionType = {\n  icon?: IconPropsType;\n  title?: string;\n  titleColor?: string;\n  titleStyle?: TextStyle;\n  onPress?: () => void;\n  backgroundColor?: string;\n  testID?: string;\n  accessibilityLabel?: string;\n};\n\ninterface ButtonProps {\n  content: ActionType;\n  width: number;\n  index: number;\n  translateX: Animated.SharedValue<number>;\n  maxTranslate: number;\n  type: 'left' | 'right';\n  onPress: () => void;\n  length: number;\n}\n\nconst space = 5;\n\nfunction Button(props: ButtonProps) {\n  const {\n    content,\n    width,\n    index,\n    translateX,\n    maxTranslate,\n    type,\n    onPress,\n    length,\n  } = props;\n  const backgroundColor = content.backgroundColor || '#b388ff';\n  const titleColor = content.titleColor || 'white';\n\n  const contentStyle = useAnimatedStyle(() => {\n    const delta = Math.abs(translateX.value) - maxTranslate;\n\n    if (type === 'right') {\n      return {\n        position: 'absolute',\n        flex: 0,\n        top: 0,\n        bottom: 0,\n        right: delta > 0 ? -(width + delta / length + space) : -width,\n        width: delta > 0 ? width + delta / length + space : width,\n        transform: [\n          {\n            translateX: interpolate(\n              translateX.value,\n              [-maxTranslate, 0],\n              [-width * index, 0],\n              Extrapolate.EXTEND\n            ),\n          },\n        ],\n      };\n    }\n\n    return {\n      position: 'absolute',\n      flex: 0,\n      alignItems: 'flex-end',\n      top: 0,\n      bottom: 0,\n      left: delta > 0 ? -(width + delta / length + space) : -width,\n      width: delta > 0 ? width + delta / length + space : width,\n      transform: [\n        {\n          translateX: interpolate(\n            translateX.value,\n            [0, maxTranslate],\n            [0, width * index],\n            Extrapolate.EXTEND\n          ),\n        },\n      ],\n    };\n  });\n\n  return (\n    <Animated.View style={[{ backgroundColor }, contentStyle]}>\n      <TouchableOpacity\n        onPress={onPress}\n        testID={content.testID}\n        accessibilityLabel={content.accessibilityLabel}\n        style={[styles.container, { width }]}\n      >\n        {content.icon && <Icon color=\"white\" size={24} {...content.icon} />}\n        {!!content.title && (\n          <Text\n            style={[\n              styles.title,\n              // eslint-disable-next-line react-native/no-inline-styles\n              { color: titleColor, marginTop: content.icon ? 2 : 0 },\n              content.titleStyle,\n            ]}\n          >\n            {content.title}\n          </Text>\n        )}\n      </TouchableOpacity>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1,\n  },\n  title: {\n    fontSize: 14,\n  },\n});\n\nexport default React.memo(Button, equals);\n"]}