"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));

var _reactNativeIcons = require("@nghinv/react-native-icons");

var _reactFastCompare = _interopRequireDefault(require("react-fast-compare"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const space = 5;

function Button(props) {
  const {
    content,
    width,
    index,
    translateX,
    maxTranslate,
    type,
    onPress,
    length
  } = props;
  const backgroundColor = content.backgroundColor || '#b388ff';
  const titleColor = content.titleColor || 'white';
  const contentStyle = (0, _reactNativeReanimated.useAnimatedStyle)(() => {
    const delta = Math.abs(translateX.value) - maxTranslate;

    if (type === 'right') {
      return {
        position: 'absolute',
        flex: 0,
        top: 0,
        bottom: 0,
        right: delta > 0 ? -(width + delta / length + space) : -width,
        width: delta > 0 ? width + delta / length + space : width,
        transform: [{
          translateX: (0, _reactNativeReanimated.interpolate)(translateX.value, [-maxTranslate, 0], [-width * index, 0], _reactNativeReanimated.Extrapolate.EXTEND)
        }]
      };
    }

    return {
      position: 'absolute',
      flex: 0,
      alignItems: 'flex-end',
      top: 0,
      bottom: 0,
      left: delta > 0 ? -(width + delta / length + space) : -width,
      width: delta > 0 ? width + delta / length + space : width,
      transform: [{
        translateX: (0, _reactNativeReanimated.interpolate)(translateX.value, [0, maxTranslate], [0, width * index], _reactNativeReanimated.Extrapolate.EXTEND)
      }]
    };
  });
  return /*#__PURE__*/_react.default.createElement(_reactNativeReanimated.default.View, {
    style: [{
      backgroundColor
    }, contentStyle]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    onPress: onPress,
    testID: content.testID,
    accessibilityLabel: content.accessibilityLabel,
    style: [styles.container, {
      width
    }]
  }, content.icon && /*#__PURE__*/_react.default.createElement(_reactNativeIcons.Icon, _extends({
    color: "white",
    size: 24
  }, content.icon)), !!content.title && /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [styles.title, // eslint-disable-next-line react-native/no-inline-styles
    {
      color: titleColor,
      marginTop: content.icon ? 2 : 0
    }, content.titleStyle]
  }, content.title)));
}

const styles = _reactNative.StyleSheet.create({
  container: {
    justifyContent: 'center',
    alignItems: 'center',
    flex: 1
  },
  title: {
    fontSize: 14
  }
});

var _default = /*#__PURE__*/_react.default.memo(Button, _reactFastCompare.default);

exports.default = _default;
//# sourceMappingURL=Button.js.map