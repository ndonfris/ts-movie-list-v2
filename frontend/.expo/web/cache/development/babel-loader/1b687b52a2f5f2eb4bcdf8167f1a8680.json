{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SearchBar from \"../components/SearchBar\";\nimport MovieList from \"../components/MovieList\";\nimport { requestHelper, setFirstMovieResults } from \"../helpers/Functions\";\nimport Movies from \"../assets/Top250MoviesShort.json\";\nimport colors from \"../helpers/Colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function SearchRoute() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      query = _useState2[0],\n      setQuery = _useState2[1];\n\n  var _useState3 = useState(setFirstMovieResults(Movies)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      movieResults = _useState4[0],\n      setMovieResults = _useState4[1];\n\n  var handleSearch = function handleSearch(newQuery) {\n    var strippedQuery;\n    return _regeneratorRuntime.async(function handleSearch$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Keyboard.dismiss();\n            strippedQuery = newQuery.trim();\n\n            if (!(strippedQuery == \"\")) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 4:\n            return _context.abrupt(\"return\", strippedQuery);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var searchQuery = function searchQuery() {\n    var reqData, response, body;\n    return _regeneratorRuntime.async(function searchQuery$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            reqData = requestHelper(strippedQuery);\n            _context2.prev = 1;\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(fetch(\"https://ts-movie-server-mini.herokuapp.com/search/title\", reqData));\n\n          case 4:\n            response = _context2.sent;\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 7:\n            body = _context2.sent;\n            console.log(body.Search);\n            setMovieResults(body.Search);\n            _context2.next = 16;\n            break;\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](1);\n            console.log(_context2.t0);\n            throw new Error(_context2.t0);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[1, 12]], Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(SearchBar, {\n      placeholder: \"Search for a movie...\",\n      query: query,\n      updateQuery: function updateQuery(text) {\n        return setQuery(text);\n      },\n      searchFunction: function searchFunction() {\n        SearchQuery();\n      }\n    }), _jsx(View, {\n      style: styles.results,\n      children: _jsx(MovieList, {\n        movieArray: movieResults\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.black\n  },\n  results: {\n    paddingTop: 0,\n    height: '82%'\n  }\n});","map":{"version":3,"sources":["/home/ndonfris/Projects/ts-movie-list-frontend/frontend/routes/SearchRoute.tsx"],"names":["React","useState","SearchBar","MovieList","requestHelper","setFirstMovieResults","Movies","colors","SearchRoute","query","setQuery","movieResults","setMovieResults","handleSearch","newQuery","Keyboard","dismiss","strippedQuery","trim","searchQuery","reqData","fetch","response","json","body","console","log","Search","Error","styles","container","text","SearchQuery","results","StyleSheet","create","flex","backgroundColor","black","paddingTop","height"],"mappings":";;AAKA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;;AAEA,OAAOC,SAAP;AACA,OAAOC,SAAP;AACA,SAAqCC,aAArC,EAAoDC,oBAApD;AAGA,OAAOC,MAAP;AACA,OAAOC,MAAP;;;AAQA,eAAe,SAASC,WAAT,GAAuB;AAElC,kBAA0BP,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOQ,KAAP;AAAA,MAAcC,QAAd;;AAGA,mBAAwCT,QAAQ,CAAUI,oBAAoB,CAACC,MAAD,CAA9B,CAAhD;AAAA;AAAA,MAAOK,YAAP;AAAA,MAAqBC,eAArB;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,QAAQ,CAACC,OAAT;AACIC,YAAAA,aAFa,GAEGH,QAAQ,CAACI,IAAT,EAFH;;AAAA,kBAGbD,aAAa,IAAI,EAHJ;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,6CAMVA,aANU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAeA,MAAME,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,OADY,GACFhB,aAAa,CAACa,aAAD,CADX;AAAA;AAAA;AAAA,6CAGWI,KAAK,CAAC,yDAAD,EAA4DD,OAA5D,CAHhB;;AAAA;AAGNE,YAAAA,QAHM;AAAA;AAAA,6CAIOA,QAAQ,CAACC,IAAT,EAJP;;AAAA;AAINC,YAAAA,IAJM;AAKZC,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,MAAjB;AACAf,YAAAA,eAAe,CAACY,IAAI,CAACG,MAAN,CAAf;AANY;AAAA;;AAAA;AAAA;AAAA;AAQZF,YAAAA,OAAO,CAACC,GAAR;AARY,kBASN,IAAIE,KAAJ,cATM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAaA,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA,eACI,KAAC,SAAD;AACI,MAAA,WAAW,EAAC,uBADhB;AAEI,MAAA,KAAK,EAAErB,KAFX;AAGI,MAAA,WAAW,EAAE,qBAAAsB,IAAI;AAAA,eAAIrB,QAAQ,CAACqB,IAAD,CAAZ;AAAA,OAHrB;AAII,MAAA,cAAc,EAAE,0BAAM;AAClBC,QAAAA,WAAW;AACd;AANL,MADJ,EASI,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEH,MAAM,CAACI,OAApB;AAAA,gBACI,KAAC,SAAD;AAAW,QAAA,UAAU,EAAEtB;AAAvB;AADJ,MATJ;AAAA,IADJ;AAeH;AAGD,IAAMkB,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC7BL,EAAAA,SAAS,EAAE;AACPM,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,eAAe,EAAE9B,MAAM,CAAC+B;AAFjB,GADkB;AAK7BL,EAAAA,OAAO,EAAE;AACLM,IAAAA,UAAU,EAAE,CADP;AAELC,IAAAA,MAAM,EAAE;AAFH;AALoB,CAAlB,CAAf","sourcesContent":["/**\n * File:        SearchRoute.tsx\n * Author:      Nick Donfris\n * Created:     01/24/22\n */\nimport React, {useState} from 'react';\nimport {Keyboard, View, StyleSheet} from 'react-native';\nimport SearchBar from '../components/SearchBar';\nimport MovieList from '../components/MovieList';\nimport {createRequest, HitSearchKey, requestHelper, setFirstMovieResults, SimulateSearch} from '../helpers/Functions';\nimport {Movie, reqBody} from '../helpers/Interfaces';\nimport serverURL from '../helpers/URL';\nimport Movies from '../assets/Top250MoviesShort.json';\nimport colors from '../helpers/Colors';\n\n/*\n * Creates the SearchRoute page. Imports the static file Top250Movies.json, which \n * is just used for pre-query info.\n *\n * @returns {JSX.Element} Search Page rendered by clicking on the bottom bar.\n */\nexport default function SearchRoute() {\n    /* the text that is inputed to the SearchBar component */\n    const [query, setQuery] = useState('');\n\n    /* the list of movies currently rendered on screen as results */\n    const [movieResults, setMovieResults] = useState<Movie[]>(setFirstMovieResults(Movies));\n\n    const handleSearch = async (newQuery: string) : Promise<Movie[]> => {\n        Keyboard.dismiss();\n        let strippedQuery = newQuery.trim();\n        if (strippedQuery == \"\") {\n            return;\n        }\n        return strippedQuery;\n    }\n\n    /**\n     * @async searchQuery - uses the query, changed in the SearchBar component. \n     *\n     * @throws {Error} - Typically thrown if server is not connected/running\n     * @returns {Promise<void>} - Array of Movies, found from query\n     */\n    const searchQuery = async () => {\n        let reqData = requestHelper(strippedQuery);\n        try {\n            const response = await fetch(\"https://ts-movie-server-mini.herokuapp.com/search/title\", reqData);\n            const body = await response.json();\n            console.log(body.Search);\n            setMovieResults(body.Search);\n        } catch (e) {\n            console.log(e);\n            throw new Error(e);\n        }\n    };\n\n    return (\n        <View style={styles.container}>\n            <SearchBar\n                placeholder=\"Search for a movie...\"\n                query={query}\n                updateQuery={text => setQuery(text)} \n                searchFunction={() => {\n                    SearchQuery();\n                }}\n            />\n            <View style={styles.results}>\n                <MovieList movieArray={movieResults} />\n            </View>\n        </View>\n    )\n}\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: colors.black,\n    },\n    results: {\n        paddingTop: 0,\n        height: '82%',\n    }\n\n});\n\n"]},"metadata":{},"sourceType":"module"}