{"ast":null,"code":"import React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport { SvgXml } from \"react-native-svg\";\nimport RottenTomatoesIcon from \"../assets/RT_new.svg\";\nimport MetacriticLogo from \"../assets/META_new.svg\";\nimport ImdbIcon from \"../assets/IMDB_new.svg\";\nimport { MaterialIcons } from '@expo/vector-icons';\nimport colors from \"../helpers/Colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n;\n\nfunction IMDB(_ref) {\n  var _Ratings$find;\n\n  var Ratings = _ref.Ratings,\n      Title = _ref.Title;\n  var review = (_Ratings$find = Ratings.find(function (rating) {\n    return rating.Source === \"Internet Movie Database\";\n  })) == null ? void 0 : _Ratings$find.Value;\n\n  if (review == null) {\n    return _jsx(View, {});\n  } else {\n    var searchURL = \"https://www.imdb.com/find?q=\" + Title;\n    return _jsxs(Pressable, {\n      style: styles.rating,\n      onPress: function onPress() {\n        Linking.openURL(searchURL);\n      },\n      children: [_jsx(SvgXml, {\n        width: \"80\",\n        height: \"100\",\n        xml: ImdbIcon\n      }), _jsx(Text, {\n        style: styles.text,\n        children: review\n      })]\n    });\n  }\n}\n\n;\n\nfunction RottenTomatoes(_ref2) {\n  var _Ratings$find2;\n\n  var Ratings = _ref2.Ratings,\n      Title = _ref2.Title;\n  var searchURL = \"https://www.rottentomatoes.com/search?search=\" + Title;\n  var review = (_Ratings$find2 = Ratings.find(function (rating) {\n    return rating.Source == \"Rotten Tomatoes\";\n  })) == null ? void 0 : _Ratings$find2.Value;\n\n  if (review == null) {\n    return _jsx(View, {});\n  } else {\n    return _jsxs(Pressable, {\n      style: styles.rating,\n      onPress: function onPress() {\n        Linking.openURL(searchURL);\n      },\n      children: [_jsx(SvgXml, {\n        width: \"80\",\n        height: \"100\",\n        xml: RottenTomatoesIcon\n      }), _jsx(Text, {\n        style: styles.text,\n        children: review\n      })]\n    });\n  }\n}\n\n;\n\nfunction MetaCritic(_ref3) {\n  var _Ratings$find3;\n\n  var Ratings = _ref3.Ratings,\n      Title = _ref3.Title;\n  var searchURL = \"https://www.metacritic.com/search/all/\" + Title + \"/results\";\n  var review = (_Ratings$find3 = Ratings.find(function (rating) {\n    return rating.Source == \"Metacritic\";\n  })) == null ? void 0 : _Ratings$find3.Value;\n\n  if (review == null) {\n    return _jsx(View, {});\n  } else {\n    return _jsxs(Pressable, {\n      style: styles.rating,\n      onPress: function onPress() {\n        Linking.openURL(searchURL);\n      },\n      children: [_jsx(SvgXml, {\n        width: \"80\",\n        height: \"100\",\n        xml: MetacriticLogo\n      }), _jsx(Text, {\n        style: styles.text,\n        children: review\n      })]\n    });\n  }\n}\n\nfunction NoneFound(_ref4) {\n  var Ratings = _ref4.Ratings;\n  var review = Ratings.filter(function (_ref5) {\n    var Source = _ref5.Source;\n    return Source === \"N/a\";\n  });\n\n  if (review.length == 0) {\n    return _jsx(View, {});\n  } else {\n    return _jsxs(View, {\n      style: styles.rating,\n      children: [_jsx(MaterialIcons, {\n        name: \"error-outline\",\n        size: 40,\n        color: colors.dullWhite,\n        style: styles.error\n      }), _jsx(Text, {\n        style: styles.text,\n        children: \"Reviews not found\"\n      })]\n    });\n  }\n}\n\nvar ReviewList = function ReviewList(_ref6) {\n  var Ratings = _ref6.Ratings,\n      Title = _ref6.Title;\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(IMDB, {\n      Ratings: Ratings,\n      Title: Title\n    }), _jsx(RottenTomatoes, {\n      Ratings: Ratings,\n      Title: Title\n    }), _jsx(MetaCritic, {\n      Ratings: Ratings,\n      Title: Title\n    }), _jsx(NoneFound, {\n      Ratings: Ratings\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    top: -10,\n    flexDirection: \"row\",\n    alignSelf: \"center\",\n    alignContent: \"space-between\",\n    minHeight: 100\n  },\n  rating: {\n    color: colors.dullWhite,\n    margin: 10\n  },\n  text: {\n    color: colors.dullWhite,\n    top: -20,\n    fontSize: 20,\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  error: {\n    textAlign: \"center\",\n    top: -10,\n    paddingBottom: 10\n  }\n});\nexport default ReviewList;","map":{"version":3,"sources":["/home/ndonfris/Projects/ts-movie-list-frontend/frontend/components/ReviewList.tsx"],"names":["React","SvgXml","RottenTomatoesIcon","MetacriticLogo","ImdbIcon","MaterialIcons","colors","IMDB","Ratings","Title","review","find","rating","Source","Value","searchURL","styles","Linking","openURL","text","RottenTomatoes","MetaCritic","NoneFound","filter","length","dullWhite","error","ReviewList","container","StyleSheet","create","top","flexDirection","alignSelf","alignContent","minHeight","color","margin","fontSize","fontWeight","textAlign","paddingBottom"],"mappings":"AAKA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;AAGA,SAAQC,MAAR,QAAqB,kBAArB;AACA,OAAOC,kBAAP;AACA,OAAOC,cAAP;AACA,OAAOC,QAAP;AACA,SAAQC,aAAR,QAA4B,oBAA5B;AACA,OAAOC,MAAP;;;AAOC;;AAWD,SAASC,IAAT,OAA6C;AAAA;;AAAA,MAA9BC,OAA8B,QAA9BA,OAA8B;AAAA,MAArBC,KAAqB,QAArBA,KAAqB;AACzC,MAAMC,MAAM,oBAAGF,OAAO,CAACG,IAAR,CAAa,UAAAC,MAAM;AAAA,WAAIA,MAAM,CAACC,MAAP,KAA4B,yBAAhC;AAAA,GAAnB,CAAH,qBAAG,cAA+EC,KAA9F;;AACA,MAAIJ,MAAM,IAAI,IAAd,EAAoB;AAChB,WAAQ,KAAC,IAAD,KAAR;AACH,GAFD,MAEO;AACH,QAAMK,SAAS,GAAG,iCAAgCN,KAAlD;AACA,WACI,MAAC,SAAD;AAAW,MAAA,KAAK,EAAEO,MAAM,CAACJ,MAAzB;AAAiC,MAAA,OAAO,EAAE,mBAAM;AAAEK,QAAAA,OAAO,CAACC,OAAR,CAAgBH,SAAhB;AAA4B,OAA9E;AAAA,iBACI,KAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,IAAd;AAAmB,QAAA,MAAM,EAAC,KAA1B;AAAgC,QAAA,GAAG,EAAEX;AAArC,QADJ,EAEI,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEY,MAAM,CAACG,IAApB;AAAA,kBAA2BT;AAA3B,QAFJ;AAAA,MADJ;AAMH;AACJ;;AAAA;;AAaD,SAASU,cAAT,QAAuD;AAAA;;AAAA,MAA9BZ,OAA8B,SAA9BA,OAA8B;AAAA,MAArBC,KAAqB,SAArBA,KAAqB;AACnD,MAAIM,SAAS,GAAG,kDAAgDN,KAAhE;AACA,MAAIC,MAAM,qBAAGF,OAAO,CAACG,IAAR,CAAa,UAAAC,MAAM;AAAA,WAAIA,MAAM,CAACC,MAAP,IAA0B,iBAA9B;AAAA,GAAnB,CAAH,qBAAG,eAAqEC,KAAlF;;AACA,MAAIJ,MAAM,IAAI,IAAd,EAAoB;AAChB,WAAQ,KAAC,IAAD,KAAR;AACH,GAFD,MAEO;AACH,WACI,MAAC,SAAD;AAAW,MAAA,KAAK,EAAEM,MAAM,CAACJ,MAAzB;AAAiC,MAAA,OAAO,EAAE,mBAAM;AAAEK,QAAAA,OAAO,CAACC,OAAR,CAAgBH,SAAhB;AAA4B,OAA9E;AAAA,iBACI,KAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,IAAd;AAAmB,QAAA,MAAM,EAAC,KAA1B;AAAgC,QAAA,GAAG,EAAEb;AAArC,QADJ,EAEI,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEc,MAAM,CAACG,IAApB;AAAA,kBAA2BT;AAA3B,QAFJ;AAAA,MADJ;AAMH;AACJ;;AAAA;;AAaD,SAASW,UAAT,QAAmD;AAAA;;AAAA,MAA9Bb,OAA8B,SAA9BA,OAA8B;AAAA,MAArBC,KAAqB,SAArBA,KAAqB;AAC/C,MAAIM,SAAS,GAAG,2CAAyCN,KAAzC,GAA+C,UAA/D;AACA,MAAIC,MAAM,qBAAGF,OAAO,CAACG,IAAR,CAAa,UAAAC,MAAM;AAAA,WAAIA,MAAM,CAACC,MAAP,IAA2B,YAA/B;AAAA,GAAnB,CAAH,qBAAG,eAAiEC,KAA9E;;AACA,MAAIJ,MAAM,IAAI,IAAd,EAAoB;AAChB,WAAQ,KAAC,IAAD,KAAR;AACH,GAFD,MAEO;AACH,WACI,MAAC,SAAD;AAAW,MAAA,KAAK,EAAEM,MAAM,CAACJ,MAAzB;AAAiC,MAAA,OAAO,EAAE,mBAAM;AAAEK,QAAAA,OAAO,CAACC,OAAR,CAAgBH,SAAhB;AAA4B,OAA9E;AAAA,iBACI,KAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,IAAd;AAAmB,QAAA,MAAM,EAAC,KAA1B;AAAgC,QAAA,GAAG,EAAEZ;AAArC,QADJ,EAEI,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEa,MAAM,CAACG,IAApB;AAAA,kBAA2BT;AAA3B,QAFJ;AAAA,MADJ;AAMH;AACJ;;AAkBD,SAASY,SAAT,QAA8C;AAAA,MAA1Bd,OAA0B,SAA1BA,OAA0B;AAC1C,MAAME,MAAM,GAAGF,OAAO,CAACe,MAAR,CAAe;AAAA,QAAGV,MAAH,SAAGA,MAAH;AAAA,WAAgBA,MAAM,KAAK,KAA3B;AAAA,GAAf,CAAf;;AACA,MAAIH,MAAM,CAACc,MAAP,IAAiB,CAArB,EAAwB;AACpB,WAAQ,KAAC,IAAD,KAAR;AACH,GAFD,MAEO;AACH,WACI,MAAC,IAAD;AAAM,MAAA,KAAK,EAAER,MAAM,CAACJ,MAApB;AAAA,iBACI,KAAC,aAAD;AAAe,QAAA,IAAI,EAAC,eAApB;AAAoC,QAAA,IAAI,EAAE,EAA1C;AAA8C,QAAA,KAAK,EAAEN,MAAM,CAACmB,SAA5D;AAAuE,QAAA,KAAK,EAAET,MAAM,CAACU;AAArF,QADJ,EAEI,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEV,MAAM,CAACG,IAApB;AAAA;AAAA,QAFJ;AAAA,MADJ;AAMH;AACJ;;AAcD,IAAMQ,UAAU,GAAG,SAAbA,UAAa,QAAmC;AAAA,MAAjCnB,OAAiC,SAAjCA,OAAiC;AAAA,MAAxBC,KAAwB,SAAxBA,KAAwB;AAClD,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEO,MAAM,CAACY,SAApB;AAAA,eACI,KAAC,IAAD;AAAM,MAAA,OAAO,EAAEpB,OAAf;AAAwB,MAAA,KAAK,EAAEC;AAA/B,MADJ,EAEI,KAAC,cAAD;AAAgB,MAAA,OAAO,EAAED,OAAzB;AAAkC,MAAA,KAAK,EAAEC;AAAzC,MAFJ,EAGI,KAAC,UAAD;AAAY,MAAA,OAAO,EAAED,OAArB;AAA8B,MAAA,KAAK,EAAEC;AAArC,MAHJ,EAII,KAAC,SAAD;AAAW,MAAA,OAAO,EAAED;AAApB,MAJJ;AAAA,IADJ;AAQH,CATD;;AAWA,IAAMQ,MAAM,GAAGa,UAAU,CAACC,MAAX,CAAkB;AAC7BF,EAAAA,SAAS,EAAE;AACPG,IAAAA,GAAG,EAAE,CAAC,EADC;AAEPC,IAAAA,aAAa,EAAE,KAFR;AAGPC,IAAAA,SAAS,EAAE,QAHJ;AAIPC,IAAAA,YAAY,EAAE,eAJP;AAKPC,IAAAA,SAAS,EAAE;AALJ,GADkB;AAQ7BvB,EAAAA,MAAM,EAAE;AACJwB,IAAAA,KAAK,EAAE9B,MAAM,CAACmB,SADV;AAEJY,IAAAA,MAAM,EAAE;AAFJ,GARqB;AAY7BlB,EAAAA,IAAI,EAAE;AACFiB,IAAAA,KAAK,EAAE9B,MAAM,CAACmB,SADZ;AAEFM,IAAAA,GAAG,EAAE,CAAC,EAFJ;AAGFO,IAAAA,QAAQ,EAAE,EAHR;AAIFC,IAAAA,UAAU,EAAE,MAJV;AAKFC,IAAAA,SAAS,EAAE;AALT,GAZuB;AAmB7Bd,EAAAA,KAAK,EAAE;AACHc,IAAAA,SAAS,EAAE,QADR;AAEHT,IAAAA,GAAG,EAAE,CAAC,EAFH;AAGHU,IAAAA,aAAa,EAAE;AAHZ;AAnBsB,CAAlB,CAAf;AA0BA,eAAed,UAAf","sourcesContent":["/**\n * File:        ReviewList.tsx\n * Author:      Nick Donfris\n * Created:     01/29/22\n */\nimport React from 'react';\nimport {StyleSheet, Text, View, Pressable, Linking} from \"react-native\";\nimport { Rating} from \"../helpers/Interfaces\";\nimport {SvgXml} from \"react-native-svg\";\nimport RottenTomatoesIcon from '../assets/RT_new.svg';\nimport MetacriticLogo from '../assets/META_new.svg';\nimport ImdbIcon from '../assets/IMDB_new.svg';\nimport {MaterialIcons} from '@expo/vector-icons';\nimport colors from '../helpers/Colors';\n\n\n/* Props used in each of the following functional components */\ninterface ReviewProps {\n    Ratings?: Rating[];\n    Title?: string;\n};\n\n/**\n * Functional component that renders if a review score is found.\n * This component is a pressable icon, that opens imdb in Default Browser\n *\n * @param {Rating[]} Ratings - the array of all found ratings found on for a MovieItem\n * @param {Title} Title - the title ot search for in the IMDB URL\n *\n * @returns {JSX.Element} - IMDB icon that is pressable \n */\nfunction IMDB({Ratings, Title}: ReviewProps) {\n    const review = Ratings.find(rating => rating.Source as Rating === \"Internet Movie Database\")?.Value;\n    if (review == null) {\n        return (<View></View>);\n    } else {\n        const searchURL = \"https://www.imdb.com/find?q=\"+ Title;\n        return (\n            <Pressable style={styles.rating} onPress={() => { Linking.openURL(searchURL) }}>\n                <SvgXml width=\"80\" height=\"100\" xml={ImdbIcon} />\n                <Text style={styles.text}>{review}</Text>\n            </Pressable>\n        );\n    }\n};\n\n/**\n * Functional component that renders if a review score is found that has the\n * Rating.Source field matching Rotten Tomatoes. This component is a pressable\n * icon.\n *\n * @param {Rating[]} Ratings - the array of all ratings found in a MovieItem\n * @param {string} Title - the string of the title, to search for on rotten tomatoes\n *                          URL\n *\n * @returns {JSX.Element} - RottenTomatoes icon that is pressable\n */\nfunction RottenTomatoes({Ratings, Title}: ReviewProps ){\n    let searchURL = \"https://www.rottentomatoes.com/search?search=\"+Title;\n    let review = Ratings.find(rating => rating.Source as Rating== \"Rotten Tomatoes\")?.Value;\n    if (review == null) {\n        return (<View></View>);\n    } else {\n        return (\n            <Pressable style={styles.rating} onPress={() => { Linking.openURL(searchURL) }}>\n                <SvgXml width=\"80\" height=\"100\" xml={RottenTomatoesIcon} />\n                <Text style={styles.text}>{review}</Text>\n            </Pressable>\n        );\n    } \n};\n\n/**\n * Functional component that renders if a review score is found that has the\n * Rating.Source field matching Metacritic. This component is a pressable\n * icon.\n *\n * @param {Rating[]} .Ratings - the array of all ratings found in a MovieItem\n * @param {string} .Title - the string of the title, to search for on Metacritic\n *                          website.\n *\n * @returns {JSX.Element} - MetaCritic icon that is pressable\n */\nfunction MetaCritic({Ratings, Title}: ReviewProps) {\n    let searchURL = \"https://www.metacritic.com/search/all/\"+Title+\"/results\";\n    let review = Ratings.find(rating => rating.Source as Rating == \"Metacritic\")?.Value;\n    if (review == null) {\n        return (<View></View>);\n    } else {\n        return (\n            <Pressable style={styles.rating} onPress={() => { Linking.openURL(searchURL) }}>\n                <SvgXml width=\"80\" height=\"100\" xml={MetacriticLogo} />\n                <Text style={styles.text}>{review}</Text>\n            </Pressable>\n        );\n    }\n}\n\n\ninterface NoneFoundProps {\n    Ratings?: Rating[];\n}\n\n/**\n * Functional component that renders the default Review not found icon. Like all of the\n * functional components called from RevewList, this may return an empty view (nothing).\n *\n * @param {Rating[]} Ratings - the array results found in the backend. The backend\n *                                checks the reviews it finds and if this JSON array is\n *                                empty, it will insert a default Rating interface with the\n *                                the Rating.Source field equal to \"N/A\".\n *\n * @returns {JSX.Element} - NoneFound icon that is not pressable\n */\nfunction NoneFound({Ratings}: NoneFoundProps) {\n    const review = Ratings.filter(({ Source }) => Source === \"N/a\");\n    if (review.length == 0) {\n        return (<View></View>);\n    } else {\n        return (\n            <View style={styles.rating} >\n                <MaterialIcons name=\"error-outline\" size={40} color={colors.dullWhite} style={styles.error}/>\n                <Text style={styles.text}>Reviews not found</Text>\n            </View>\n        );\n    }\n}\n\n\n\n/**\n * ReviewList of pressable icons, and the score the rated a movie. The list of ratings\n * might contain 0-3 reviews (while it can't actually contain zero ratings, backend inserts\n * a value to catch no reviews found), so each functional component called above must handle\n * not finding it's correlating rating.\n *\n * @param {MovieMoreInfo} .moreInfo - All information found by backend for a movie \n * @returns {JSX.Element} - ReviewList of pressable icons correlating to:\n *                          [<IMDb/>, <RottenTomatoes/>, <MetaCritic/>] || [<NoneFound/>]\n */\nconst ReviewList = ({Ratings, Title}: ReviewProps) => {\n    return (\n        <View style={styles.container}>\n            <IMDB Ratings={Ratings} Title={Title} /> \n            <RottenTomatoes Ratings={Ratings} Title={Title} /> \n            <MetaCritic Ratings={Ratings} Title={Title} />\n            <NoneFound Ratings={Ratings}/>\n        </View>\n    );\n}\n    \nconst styles = StyleSheet.create({\n    container: {\n        top: -10,\n        flexDirection: \"row\",\n        alignSelf: \"center\",\n        alignContent: \"space-between\",\n        minHeight: 100,\n    },\n    rating: {\n        color: colors.dullWhite,\n        margin: 10,\n    },\n    text: {\n        color: colors.dullWhite,\n        top: -20,\n        fontSize: 20,\n        fontWeight: \"bold\",\n        textAlign: \"center\",\n    },\n    error: {\n        textAlign: \"center\",\n        top: -10,\n        paddingBottom: 10,\n    }\n});\n\nexport default ReviewList;\n"]},"metadata":{},"sourceType":"module"}