{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SearchBar from \"../components/SearchBar\";\nimport MovieList from \"../components/MovieList\";\nimport axios from 'axios';\nimport { requestHelper, setFirstMovieResults } from \"../helpers/Functions\";\nimport Movies from \"../assets/Top250MoviesShort.json\";\nimport colors from \"../helpers/Colors\";\nimport { apiKeys } from \"../helpers/apiKeys\";\nimport { apiUrls } from \"../helpers/apiKeys\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function SearchRoute() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      query = _useState2[0],\n      setQuery = _useState2[1];\n\n  var _useState3 = useState(setFirstMovieResults(Movies)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      movieResults = _useState4[0],\n      setMovieResults = _useState4[1];\n\n  var handleSearch = function handleSearch(newQuery) {\n    var strippedQuery;\n    return _regeneratorRuntime.async(function handleSearch$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Keyboard.dismiss();\n            strippedQuery = newQuery.trim();\n\n            if (!(strippedQuery == \"\")) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 4:\n            return _context.abrupt(\"return\", strippedQuery);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var searchQuery = function searchQuery() {\n    var reqData, search_name, firstPage, secondPage, result, more, moreArr, i, secondPageMovie;\n    return _regeneratorRuntime.async(function searchQuery$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            Keyboard.dismiss();\n\n            if (!(query === \"\")) {\n              _context2.next = 3;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 3:\n            reqData = requestHelper(query);\n            _context2.prev = 4;\n            search_name = query.trim();\n            firstPage = {\n              method: \"GET\",\n              url: apiUrls.searchMovie,\n              params: {\n                s: search_name,\n                page: \"1\",\n                r: \"json\"\n              },\n              headers: apiKeys.searchMovie\n            };\n            secondPage = {\n              method: \"GET\",\n              url: apiUrls.searchMovie,\n              params: {\n                s: search_name,\n                page: \"2\",\n                r: \"json\"\n              },\n              headers: apiKeys.searchMovie\n            };\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap(axios.request(firstPage));\n\n          case 10:\n            result = _context2.sent;\n\n            if (!(result.data[\"totalResults\"] > 11)) {\n              _context2.next = 17;\n              break;\n            }\n\n            _context2.next = 14;\n            return _regeneratorRuntime.awrap(axios.request(secondPage));\n\n          case 14:\n            more = _context2.sent;\n            moreArr = more.data[\"Search\"];\n\n            for (i in moreArr) {\n              secondPageMovie = moreArr[i];\n              result.data[\"Search\"].push(secondPageMovie);\n            }\n\n          case 17:\n            setMovieResults(result.data['Search']);\n            console.log(result.data['Search']);\n            _context2.next = 25;\n            break;\n\n          case 21:\n            _context2.prev = 21;\n            _context2.t0 = _context2[\"catch\"](4);\n            console.log(_context2.t0);\n            throw new Error(_context2.t0);\n\n          case 25:\n            _context2.prev = 25;\n            console.log(reqData);\n            return _context2.finish(25);\n\n          case 28:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[4, 21, 25, 28]], Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(SearchBar, {\n      placeholder: \"Search for a movie...\",\n      query: query,\n      updateQuery: function updateQuery(text) {\n        return setQuery(text);\n      },\n      searchFunction: function searchFunction() {\n        searchQuery();\n      }\n    }), _jsx(View, {\n      style: styles.results,\n      children: _jsx(MovieList, {\n        movieArray: movieResults\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.black\n  },\n  results: {\n    paddingTop: 0,\n    height: '82%'\n  }\n});","map":{"version":3,"sources":["/home/ndonfris/Projects/ts-movie-list-frontend/frontend/routes/SearchRoute.tsx"],"names":["React","useState","SearchBar","MovieList","axios","requestHelper","setFirstMovieResults","Movies","colors","apiKeys","apiUrls","SearchRoute","query","setQuery","movieResults","setMovieResults","handleSearch","newQuery","Keyboard","dismiss","strippedQuery","trim","searchQuery","reqData","search_name","firstPage","method","url","searchMovie","params","s","page","r","headers","secondPage","request","result","data","more","moreArr","i","secondPageMovie","push","console","log","Error","styles","container","text","results","StyleSheet","create","flex","backgroundColor","black","paddingTop","height"],"mappings":"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","sourcesContent":["/**\n * File:        SearchRoute.tsx\n * Author:      Nick Donfris\n * Created:     01/24/22\n */\nimport React, {useState} from 'react';\nimport {Keyboard, View, StyleSheet} from 'react-native';\nimport SearchBar from '../components/SearchBar';\nimport MovieList from '../components/MovieList';\nimport axios, {AxiosRequestConfig} from 'axios';\nimport {createRequest, HitSearchKey, requestHelper, setFirstMovieResults, SimulateSearch} from '../helpers/Functions';\nimport {Movie, reqBody} from '../helpers/Interfaces';\nimport serverURL from '../helpers/URL';\nimport Movies from '../assets/Top250MoviesShort.json';\nimport colors from '../helpers/Colors';\nimport { apiKeys } from '../helpers/apiKeys';\nimport { apiUrls } from '../helpers/apiKeys';\n\n/*\n * Creates the SearchRoute page. Imports the static file Top250Movies.json, which \n * is just used for pre-query info.\n *\n * @returns {JSX.Element} Search Page rendered by clicking on the bottom bar.\n */\nexport default function SearchRoute() {\n    /* the text that is inputed to the SearchBar component */\n    const [query, setQuery] = useState('');\n\n    /* the list of movies currently rendered on screen as results */\n    const [movieResults, setMovieResults] = useState<Movie[]>(setFirstMovieResults(Movies));\n\n    const handleSearch = async (newQuery: string) : Promise<string> => {\n        Keyboard.dismiss();\n        let strippedQuery = newQuery.trim();\n        if (strippedQuery == \"\") {\n            return;\n        }\n        return strippedQuery;\n    }\n\n    /**\n     * @async searchQuery - uses the query, changed in the SearchBar component. \n     *\n     * @throws {Error} - Typically thrown if server is not connected/running\n     * @returns {Promise<void>} - Array of Movies, found from query\n     */\n    const searchQuery = async () : Promise<Movie[]> => {\n        Keyboard.dismiss();\n        if (query === \"\") {\n            return;\n        }\n        let reqData = requestHelper(query);\n        try {\n            const search_name = query.trim();\n            const firstPage = {\n                method: \"GET\",\n                url:  apiUrls.searchMovie,\n                params: { s: search_name, page: \"1\", r: \"json\" },\n                headers: apiKeys.searchMovie,\n            };\n            const secondPage = {\n                method: \"GET\",\n                url: apiUrls.searchMovie,\n                params: { s: search_name, page: \"2\", r: \"json\" },\n                headers: apiKeys.searchMovie,\n            };\n            const result = await axios.request(firstPage as AxiosRequestConfig);\n            if (result.data[\"totalResults\"] > 11) {\n                const more = await axios.request(secondPage as AxiosRequestConfig);\n                let moreArr: Movie[] = more.data[\"Search\"];\n                for (var i in moreArr) {\n                    let secondPageMovie: Movie = moreArr[i];\n                    result.data[\"Search\"].push(secondPageMovie);\n                }\n            }\n            setMovieResults(result.data['Search']);\n            console.log(result.data['Search']);\n        } catch (e) {\n            console.log(e);\n            throw new Error(e);\n        } finally {\n            console.log(reqData)\n        } \n    };\n\n    return (\n        <View style={styles.container}>\n            <SearchBar\n                placeholder=\"Search for a movie...\"\n                query={query}\n                updateQuery={text => setQuery(text)} \n                searchFunction={() => {\n                    searchQuery();\n                }}\n            />\n            <View style={styles.results}>\n                <MovieList movieArray={movieResults} />\n            </View>\n        </View>\n    )\n}\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: colors.black,\n    },\n    results: {\n        paddingTop: 0,\n        height: '82%',\n    }\n\n});\n\n"]},"metadata":{},"sourceType":"module"}