{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { failedMovieMoreInfo, requestHelper } from \"../helpers/Functions\";\nimport serverURL from \"../helpers/URL\";\nimport Popup from \"./Popup\";\nimport MovieImage from \"./MovieImage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar MovieTile = function MovieTile(_ref) {\n  var movie = _ref.movie,\n      shouldShowLoading = _ref.shouldShowLoading;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      moreInfo = _useState2[0],\n      setMoreInfo = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalVisible = _useState4[0],\n      setModalVisible = _useState4[1];\n\n  var ShowMoreInfo = function ShowMoreInfo() {\n    var reqData, response, obj;\n    return _regeneratorRuntime.async(function ShowMoreInfo$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            reqData = requestHelper(movie.imdbID);\n            console.log(reqData);\n\n            if (!(reqData == {})) {\n              _context.next = 5;\n              break;\n            }\n\n            console.log(\"reqData empty\");\n            return _context.abrupt(\"return\");\n\n          case 5:\n            _context.prev = 5;\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(fetch(serverURL + '/movie/more_info', reqData));\n\n          case 8:\n            response = _context.sent;\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 11:\n            obj = _context.sent;\n            console.log(obj);\n            setMoreInfo(obj);\n            _context.next = 20;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](5);\n            setMoreInfo(failedMovieMoreInfo(movie));\n            console.log(_context.t0);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[5, 16]], Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.outer,\n    children: [_jsx(Popup, {\n      moreInfo: moreInfo,\n      modalVisible: modalVisible,\n      updateModal: function updateModal() {\n        setModalVisible(!modalVisible);\n      }\n    }), _jsx(TouchableOpacity, {\n      style: styles.buttonContainer,\n      activeOpacity: 0.2,\n      onPress: function onPress() {\n        ShowMoreInfo();\n        setModalVisible(true);\n      },\n      children: _jsx(View, {\n        style: styles.container,\n        children: _jsx(MovieImage, {\n          movie: movie,\n          extraStyle: styles.container,\n          shouldShowLoading: shouldShowLoading\n        })\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  outer: {\n    flex: 1,\n    alignItems: 'center',\n    padding: 10\n  },\n  container: {\n    borderRadius: 10,\n    width: 120,\n    height: 120,\n    alignItems: 'center',\n    overflow: 'hidden'\n  },\n  titleText: {\n    textAlign: 'center',\n    color: \"#fff\",\n    position: 'absolute',\n    bottom: 5,\n    fontSize: 10,\n    fontWeight: 'bold',\n    textShadowColor: \"#000\",\n    textShadowOffset: {\n      width: -1,\n      height: 1\n    },\n    textShadowRadius: 1\n  },\n  titleContainer: {\n    alignItems: 'center',\n    textAlign: 'center'\n  },\n  buttonContainer: {\n    alignItems: 'center'\n  }\n});\nexport default MovieTile;","map":{"version":3,"sources":["/home/ndonfris/Projects/ts-movie-list-frontend/frontend/components/MovieTile.tsx"],"names":["React","useState","failedMovieMoreInfo","requestHelper","serverURL","Popup","MovieImage","MovieTile","movie","shouldShowLoading","moreInfo","setMoreInfo","modalVisible","setModalVisible","ShowMoreInfo","reqData","imdbID","console","log","fetch","response","json","obj","styles","outer","buttonContainer","container","StyleSheet","create","flex","alignItems","padding","borderRadius","width","height","overflow","titleText","textAlign","color","position","bottom","fontSize","fontWeight","textShadowColor","textShadowOffset","textShadowRadius","titleContainer"],"mappings":"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","sourcesContent":["/**\n * File:        MovieTile.tsx\n * Author:      Nick Donfris\n * Created:     01/24/22\n */\nimport React, {useState} from 'react';\nimport {StyleSheet, View, TouchableOpacity} from 'react-native';\nimport {Movie, MovieMoreInfo, reqBody} from '../helpers/Interfaces';\nimport {failedMovieMoreInfo, requestHelper} from '../helpers/Functions';\nimport serverURL from '../helpers/URL';\nimport Popup from './Popup';\nimport LoadingImage from './LoadingImage';\nimport MovieImage from './MovieImage';\nimport colors from '../helpers/Colors';\n\n\n\n/* single movie from typically from a movieArray */\ninterface Props {\n    movie: Movie;\n    shouldShowLoading ?: boolean;\n}\n\n/**\n * A MovieTile, which is a clickable component, which can render more information about the MovieTile\n *\n * @param {Movie} movie - the Movie interface which contains strings that correlate to the necessary details for a movie\n * @returns {JSX.Element} - the tile shown for a Movie, and the set of states that are coupled to rendering more information about a tile. \n */\nconst MovieTile = ({movie, shouldShowLoading}: Props) => {\n    /* the information retrieved from the api call onClick of MovieTile */\n    const [moreInfo, setMoreInfo] = useState<MovieMoreInfo>({} as MovieMoreInfo);\n\n    /* boolean that determines if the moreInfo modal visible */\n    const [modalVisible, setModalVisible] = useState(false);\n\n    /**\n     * @async Function that is called when a movieTile is selected. \n     *        Returns a unresolved promise. Sets the moreInfo on successful\n     *        api call.\n     *        \n     * @returns {Promise<void>} - instead of returning the objects, it sets them\n     *                            and makes use of global variables.\n     */\n    const ShowMoreInfo = async () : Promise<void> => {\n        const reqData = requestHelper(movie.imdbID);\n        console.log(reqData);\n        if (reqData == {}) {\n            console.log(\"reqData empty\");\n            return;\n        }\n        try {\n            const response = await fetch(serverURL + '/movie/more_info', reqData);\n            const obj = await response.json();\n            console.log(obj);\n            setMoreInfo(obj);\n        } catch (e) {\n            setMoreInfo(failedMovieMoreInfo(movie));\n            console.log(e);\n        }\n    }\n\n    return (\n        <View style={styles.outer}>\n            <Popup moreInfo={moreInfo} modalVisible={modalVisible} updateModal={() => { setModalVisible(!modalVisible) }} />\n            <TouchableOpacity\n                style={styles.buttonContainer}\n                activeOpacity={0.2}\n                onPress={() => {\n                    ShowMoreInfo();\n                    setModalVisible(true);\n                }}>\n                <View style={styles.container}>\n                    <MovieImage movie={movie} extraStyle={styles.container} shouldShowLoading={shouldShowLoading}/>\n                </View>\n            </TouchableOpacity> \n        </View>\n    );\n}\n\n\nconst styles = StyleSheet.create({\n    outer: {\n        flex: 1,\n        alignItems: 'center',\n        padding: 10,\n    },\n    container: {\n        borderRadius: 10,\n        width: 120,\n        height: 120,\n        alignItems: 'center',\n        overflow: 'hidden',\n    },\n    titleText: {\n        textAlign: 'center',\n        color: \"#fff\",\n        position: 'absolute',\n        bottom: 5,\n        fontSize: 10,\n        fontWeight: 'bold',\n        textShadowColor: \"#000\",\n        textShadowOffset: {\n            width: -1,\n            height: 1 \n        },\n        textShadowRadius: 1,\n    },\n    titleContainer: {\n        alignItems: 'center',\n        textAlign: 'center',\n    },\n    buttonContainer: {\n        alignItems: 'center',\n    }\n});\n\nexport default MovieTile;\n"]},"metadata":{},"sourceType":"module"}