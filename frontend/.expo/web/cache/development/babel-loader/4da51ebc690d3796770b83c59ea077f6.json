{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { createRequest, failedMovieMoreInfo } from \"../helpers/Functions\";\nimport serverURL from \"../helpers/URL\";\nimport Popup from \"./Popup\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar MovieTile = function MovieTile(_ref) {\n  var movie = _ref.movie;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      moreInfo = _useState2[0],\n      setMoreInfo = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalVisible = _useState4[0],\n      setModalVisible = _useState4[1];\n\n  var ShowMoreInfo = function ShowMoreInfo() {\n    var reqData, response, obj;\n    return _regeneratorRuntime.async(function ShowMoreInfo$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            reqData = createRequest({\n              method: 'POST',\n              mode: 'no-cors',\n              headers: {\n                accept: 'application/json',\n                contentType: 'application/json'\n              },\n              body: movie.imdbID\n            });\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(fetch(serverURL + '/show_more', reqData));\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 7:\n            obj = _context.sent;\n            setMoreInfo(obj);\n            _context.next = 15;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](1);\n            setMoreInfo(failedMovieMoreInfo(movie));\n            console.log(_context.t0);\n\n          case 15:\n            setModalVisible(true);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 11]], Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.outer,\n    children: [_jsx(Popup, {\n      moreInfo: moreInfo,\n      modalVisible: modalVisible,\n      updateModal: function updateModal() {\n        setModalVisible(!modalVisible);\n      }\n    }), _jsx(TouchableOpacity, {\n      style: styles.buttonContainer,\n      activeOpacity: 0.2,\n      onPress: function onPress() {\n        ShowMoreInfo();\n      },\n      children: _jsx(View, {\n        style: styles.container,\n        children: _jsx(Image, {\n          source: {\n            uri: movie.Poster\n          },\n          style: styles.container\n        })\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  outer: {\n    flex: 1,\n    alignItems: 'center',\n    padding: 10\n  },\n  container: {\n    borderRadius: 10,\n    width: 120,\n    height: 120,\n    alignItems: 'center'\n  },\n  titleText: {\n    textAlign: 'center',\n    color: \"#fff\",\n    position: 'absolute',\n    bottom: 5,\n    fontSize: 10,\n    fontWeight: 'bold',\n    textShadowColor: \"#000\",\n    textShadowOffset: {\n      width: -1,\n      height: 1\n    },\n    textShadowRadius: 1\n  },\n  titleContainer: {\n    alignItems: 'center',\n    textAlign: 'center'\n  },\n  buttonContainer: {\n    alignItems: 'center'\n  }\n});\nexport default MovieTile;","map":{"version":3,"sources":["/home/ndonfris/Projects/frontends/react-projects/typescript/ios/ts-movie-list/components/MovieTile.tsx"],"names":["React","useState","createRequest","failedMovieMoreInfo","serverURL","Popup","MovieTile","movie","moreInfo","setMoreInfo","modalVisible","setModalVisible","ShowMoreInfo","reqData","method","mode","headers","accept","contentType","body","imdbID","fetch","response","json","obj","console","log","styles","outer","buttonContainer","container","uri","Poster","StyleSheet","create","flex","alignItems","padding","borderRadius","width","height","titleText","textAlign","color","position","bottom","fontSize","fontWeight","textShadowColor","textShadowOffset","textShadowRadius","titleContainer"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {StyleSheet, Text, View, Modal, Image, TouchableOpacity} from 'react-native';\nimport {Movie, MovieMoreInfo} from '../helpers/Interfaces';\nimport {createRequest, failedMovieMoreInfo} from '../helpers/Functions';\nimport serverURL from '../helpers/URL';\nimport Popup from './Popup';\n\ninterface Props {\n    movie: Movie;\n}\n\nconst MovieTile = ({movie}: Props) => {\n    const [moreInfo, setMoreInfo] = useState<MovieMoreInfo>({} as MovieMoreInfo);\n    const [modalVisible, setModalVisible] = useState(false);\n\n    const ShowMoreInfo = async () : Promise<void> => {\n        let reqData = createRequest({\n            method: 'POST',\n            mode: 'no-cors',\n            headers: {\n                accept: 'application/json',\n                contentType: 'application/json'\n            },\n            body: movie.imdbID,\n        });\n        try {\n            const response = await fetch(serverURL + '/show_more', reqData);\n            const obj = await response.json();\n            setMoreInfo(obj);\n        } catch (e) {\n            setMoreInfo(failedMovieMoreInfo(movie));\n            console.log(e);\n        }\n        setModalVisible(true);\n    }\n\n    return (\n        <View style={styles.outer}>\n            <Popup moreInfo={moreInfo} modalVisible={modalVisible} updateModal={() => {setModalVisible(!modalVisible)}} />\n            <TouchableOpacity\n                style={styles.buttonContainer}\n                activeOpacity={0.2}\n                onPress={() => {\n                    ShowMoreInfo();\n                }}>\n                <View style={styles.container}>\n                    <Image source={{uri: movie.Poster}} style={styles.container} />\n                </View>\n            </TouchableOpacity> \n        </View>\n    );\n}\n\n\nconst styles = StyleSheet.create({\n    outer: {\n        flex: 1,\n        alignItems: 'center',\n        padding: 10,\n    },\n    container: {\n        borderRadius: 10,\n        width: 120,\n        height: 120,\n        alignItems: 'center'\n    },\n    titleText: {\n        textAlign: 'center',\n        color: \"#fff\",\n        position: 'absolute',\n        bottom: 5,\n        fontSize: 10,\n        fontWeight: 'bold',\n        textShadowColor: \"#000\",\n        textShadowOffset: {\n            width: -1,\n            height: 1 \n        },\n        textShadowRadius: 1,\n    },\n    titleContainer: {\n        alignItems: 'center',\n        textAlign: 'center',\n    },\n    buttonContainer: {\n        alignItems: 'center',\n    }\n});\n\nexport default MovieTile;\n"]},"metadata":{},"sourceType":"module"}