{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport { noStreamingSites, requestHelper } from \"../../helpers/Functions\";\nimport { Ionicons } from '@expo/vector-icons';\nimport serverURL from \"../../helpers/URL\";\nimport colors from \"../../helpers/Colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction StreamingList(_ref) {\n  var availabileSites = _ref.availabileSites;\n\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return item.name === \"Not Found\" ? _jsx(View, {\n      style: styles.streaming,\n      children: _jsx(Text, {\n        style: styles.text,\n        children: \" loading... \"\n      })\n    }) : _jsx(View, {\n      style: styles.streaming,\n      children: _jsx(TouchableOpacity, {\n        style: styles.iconContainer,\n        onPress: function onPress() {\n          Linking.openURL(item.url);\n        },\n        children: _jsx(Image, {\n          source: {\n            uri: item.icon\n          },\n          style: styles.icon\n        })\n      })\n    });\n  };\n\n  return _jsx(FlatList, {\n    style: styles.streamingContainer,\n    data: availabileSites,\n    renderItem: renderItem,\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    }\n  });\n}\n\nvar PopupLeft = function PopupLeft(_ref3) {\n  var moreInfo = _ref3.moreInfo;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      visible = _useState2[0],\n      setVisible = _useState2[1];\n\n  var _useState3 = useState(noStreamingSites(moreInfo.imdbID)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      availabileSites = _useState4[0],\n      setAvailibleSites = _useState4[1];\n\n  var ShowAvailableSites = function ShowAvailableSites() {\n    var reqData, response, obj;\n    return _regeneratorRuntime.async(function ShowAvailableSites$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            reqData = requestHelper(moreInfo.imdbID);\n            console.log(reqData);\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(fetch(serverURL + '/movie/streaming', reqData));\n\n          case 5:\n            response = _context.sent;\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 8:\n            obj = _context.sent;\n            setAvailibleSites(obj);\n            _context.next = 16;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](2);\n            setAvailibleSites(noStreamingSites(moreInfo.imdbID));\n            console.log(_context.t0);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 12]], Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(Text, {\n      style: styles.title,\n      children: [\" \", moreInfo.Title, \" \"]\n    }), _jsxs(View, {\n      style: styles.topContainer,\n      children: [_jsx(View, {\n        style: styles.streamingTitle,\n        children: _jsx(Text, {\n          style: styles.text,\n          children: \"Availible Streaming Options:\"\n        })\n      }), visible ? _jsx(StreamingList, {\n        availabileSites: availabileSites\n      }) : _jsx(TouchableOpacity, {\n        style: styles.refresh,\n        onPress: function onPress() {\n          setVisible(!visible);\n          ShowAvailableSites();\n        },\n        children: _jsx(Ionicons, {\n          name: \"ios-refresh-circle-outline\",\n          size: 24,\n          color: \"white\"\n        })\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"column\",\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  streamingTitle: {\n    top: -20\n  },\n  topContainer: {\n    top: 100,\n    minHeight: 200\n  },\n  refresh: {\n    borderRadius: 20,\n    padding: 20,\n    alignItems: \"center\"\n  },\n  button: {\n    alignContent: \"center\",\n    justifyContent: 'center',\n    alignItems: \"center\",\n    backgroundColor: \"lightblue\",\n    borderRadius: 20,\n    width: \"50%\",\n    height: 60\n  },\n  streaming: {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\"\n  },\n  streamingContainer: {},\n  iconContainer: {\n    width: 100\n  },\n  icon: {\n    width: 100,\n    height: 50,\n    resizeMode: \"contain\",\n    tintColor: colors.dullWhite\n  },\n  title: {\n    fontSize: 22,\n    fontWeight: \"bold\",\n    color: colors.dullWhite,\n    position: \"absolute\",\n    top: 10\n  },\n  text: {\n    color: colors.dullWhite,\n    fontWeight: 'bold',\n    justifyContent: 'center',\n    textAlign: \"center\"\n  }\n});\nexport default PopupLeft;","map":{"version":3,"sources":["/home/ndonfris/Projects/ts-movie-list-frontend/frontend/components/PopupPages/PopupLeft.tsx"],"names":["React","useState","noStreamingSites","requestHelper","Ionicons","serverURL","colors","StreamingList","availabileSites","renderItem","item","name","styles","streaming","text","iconContainer","Linking","openURL","url","uri","icon","streamingContainer","id","PopupLeft","moreInfo","visible","setVisible","imdbID","setAvailibleSites","ShowAvailableSites","reqData","console","log","fetch","response","json","obj","container","title","Title","topContainer","streamingTitle","refresh","StyleSheet","create","flex","flexDirection","alignItems","justifyContent","top","minHeight","borderRadius","padding","button","alignContent","backgroundColor","width","height","resizeMode","tintColor","dullWhite","fontSize","fontWeight","color","position","textAlign"],"mappings":";;AAKA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;;;;;;AAGA,SAAwBC,gBAAxB,EAA0CC,aAA1C;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,SAAP;AACA,OAAOC,MAAP;;;;AAiBA,SAASC,aAAT,OAAyD;AAAA,MAAjCC,eAAiC,QAAjCA,eAAiC;;AAcrD,MAAMC,UAAyC,GAAG,SAA5CA,UAA4C,QAAY;AAAA,QAAVC,IAAU,SAAVA,IAAU;AAC1D,WACIA,IAAI,CAACC,IAAL,KAAc,WAAd,GAEI,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA,gBACI,KAAC,IAAD;AAAM,QAAA,KAAK,EAAED,MAAM,CAACE,IAApB;AAAA;AAAA;AADJ,MAFJ,GAMI,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEF,MAAM,CAACC,SAApB;AAAA,gBACI,KAAC,gBAAD;AAAkB,QAAA,KAAK,EAAED,MAAM,CAACG,aAAhC;AACI,QAAA,OAAO,EAAE,mBAAM;AAACC,UAAAA,OAAO,CAACC,OAAR,CAAgBP,IAAI,CAACQ,GAArB;AAA0B,SAD9C;AAAA,kBAGI,KAAC,KAAD;AAAO,UAAA,MAAM,EAAE;AAACC,YAAAA,GAAG,EAAET,IAAI,CAACU;AAAX,WAAf;AAAiC,UAAA,KAAK,EAAER,MAAM,CAACQ;AAA/C;AAHJ;AADJ,MAPR;AAeH,GAhBD;;AAkBA,SACI,KAAC,QAAD;AACI,IAAA,KAAK,EAAER,MAAM,CAACS,kBADlB;AAEI,IAAA,IAAI,EAAEb,eAFV;AAGI,IAAA,UAAU,EAAEC,UAHhB;AAII,IAAA,YAAY,EAAE,sBAACC,IAAD;AAAA,aAAUA,IAAI,CAACY,EAAf;AAAA;AAJlB,IADJ;AAQH;;AAeD,IAAMC,SAAS,GAAG,SAAZA,SAAY,QAAuB;AAAA,MAArBC,QAAqB,SAArBA,QAAqB;;AAErC,kBAA8BvB,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOwB,OAAP;AAAA,MAAgBC,UAAhB;;AAQA,mBAA6CzB,QAAQ,CAAkBC,gBAAgB,CAACsB,QAAQ,CAACG,MAAV,CAAlC,CAArD;AAAA;AAAA,MAAOnB,eAAP;AAAA,MAAwBoB,iBAAxB;;AAUA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBC,YAAAA,OADmB,GACT3B,aAAa,CAACqB,QAAQ,CAACG,MAAV,CADJ;AAEvBI,YAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAFuB;AAAA;AAAA,6CAIIG,KAAK,CAAC5B,SAAS,GAAG,kBAAb,EAAiCyB,OAAjC,CAJT;;AAAA;AAIbI,YAAAA,QAJa;AAAA;AAAA,6CAKDA,QAAQ,CAACC,IAAT,EALC;;AAAA;AAKbC,YAAAA,GALa;AAMnBR,YAAAA,iBAAiB,CAACQ,GAAD,CAAjB;AANmB;AAAA;;AAAA;AAAA;AAAA;AAQnBR,YAAAA,iBAAiB,CAAC1B,gBAAgB,CAACsB,QAAQ,CAACG,MAAV,CAAjB,CAAjB;AACAI,YAAAA,OAAO,CAACC,GAAR;;AATmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAYA,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEpB,MAAM,CAACyB,SAApB;AAAA,eACA,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEzB,MAAM,CAAC0B,KAApB;AAAA,sBAA6Bd,QAAQ,CAACe,KAAtC;AAAA,MADA,EAEA,MAAC,IAAD;AAAM,MAAA,KAAK,EAAE3B,MAAM,CAAC4B,YAApB;AAAA,iBACI,KAAC,IAAD;AAAM,QAAA,KAAK,EAAE5B,MAAM,CAAC6B,cAApB;AAAA,kBACI,KAAC,IAAD;AAAM,UAAA,KAAK,EAAE7B,MAAM,CAACE,IAApB;AAAA;AAAA;AADJ,QADJ,EAIKW,OAAO,GACF,KAAC,aAAD;AAAe,QAAA,eAAe,EAAEjB;AAAhC,QADE,GAEF,KAAC,gBAAD;AAAkB,QAAA,KAAK,EAAEI,MAAM,CAAC8B,OAAhC;AACE,QAAA,OAAO,EAAE,mBAAM;AACXhB,UAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACAI,UAAAA,kBAAkB;AACzB,SAJC;AAAA,kBAKE,KAAC,QAAD;AAAU,UAAA,IAAI,EAAC,4BAAf;AAA4C,UAAA,IAAI,EAAE,EAAlD;AAAsD,UAAA,KAAK,EAAC;AAA5D;AALF,QANV;AAAA,MAFA;AAAA,IADJ;AAoBH,CApDD;;AAsDA,IAAMjB,MAAM,GAAG+B,UAAU,CAACC,MAAX,CAAkB;AAC7BP,EAAAA,SAAS,EAAE;AACPQ,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,aAAa,EAAE,QAFR;AAGPC,IAAAA,UAAU,EAAE,QAHL;AAIPC,IAAAA,cAAc,EAAE;AAJT,GADkB;AAO7BP,EAAAA,cAAc,EAAE;AACZQ,IAAAA,GAAG,EAAE,CAAC;AADM,GAPa;AAU7BT,EAAAA,YAAY,EAAE;AACVS,IAAAA,GAAG,EAAE,GADK;AAEVC,IAAAA,SAAS,EAAE;AAFD,GAVe;AAc7BR,EAAAA,OAAO,EAAE;AACLS,IAAAA,YAAY,EAAE,EADT;AAELC,IAAAA,OAAO,EAAE,EAFJ;AAGLL,IAAAA,UAAU,EAAE;AAHP,GAdoB;AAmB7BM,EAAAA,MAAM,EAAE;AACJC,IAAAA,YAAY,EAAE,QADV;AAEJN,IAAAA,cAAc,EAAE,QAFZ;AAGJD,IAAAA,UAAU,EAAE,QAHR;AAIJQ,IAAAA,eAAe,EAAE,WAJb;AAKJJ,IAAAA,YAAY,EAAE,EALV;AAMJK,IAAAA,KAAK,EAAE,KANH;AAOJC,IAAAA,MAAM,EAAE;AAPJ,GAnBqB;AA4B7B5C,EAAAA,SAAS,EAAE;AACPiC,IAAAA,aAAa,EAAE,QADR;AAEPC,IAAAA,UAAU,EAAE,QAFL;AAGPC,IAAAA,cAAc,EAAE;AAHT,GA5BkB;AAiC7B3B,EAAAA,kBAAkB,EAAE,EAjCS;AAmC7BN,EAAAA,aAAa,EAAE;AACXyC,IAAAA,KAAK,EAAE;AADI,GAnCc;AAsC7BpC,EAAAA,IAAI,EAAE;AACFoC,IAAAA,KAAK,EAAE,GADL;AAEFC,IAAAA,MAAM,EAAE,EAFN;AAGFC,IAAAA,UAAU,EAAE,SAHV;AAIFC,IAAAA,SAAS,EAAGrD,MAAM,CAACsD;AAJjB,GAtCuB;AA4C7BtB,EAAAA,KAAK,EAAE;AACHuB,IAAAA,QAAQ,EAAE,EADP;AAEHC,IAAAA,UAAU,EAAE,MAFT;AAGHC,IAAAA,KAAK,EAAGzD,MAAM,CAACsD,SAHZ;AAIHI,IAAAA,QAAQ,EAAE,UAJP;AAKHf,IAAAA,GAAG,EAAE;AALF,GA5CsB;AAmD7BnC,EAAAA,IAAI,EAAE;AACFiD,IAAAA,KAAK,EAAGzD,MAAM,CAACsD,SADb;AAEFE,IAAAA,UAAU,EAAE,MAFV;AAGFd,IAAAA,cAAc,EAAE,QAHd;AAIFiB,IAAAA,SAAS,EAAE;AAJT;AAnDuB,CAAlB,CAAf;AA2DA,eAAe1C,SAAf","sourcesContent":["/**\n * File:        PopupLeft.tsx\n * Author:      Nick Donfris\n * Created:     01/31/22\n */\nimport React, {useState} from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Image, FlatList, ListRenderItem, Linking} from \"react-native\";\nimport { MovieMoreInfo, reqBody, StreamWebsite } from '../../helpers/Interfaces';\nimport { createRequest, noStreamingSites, requestHelper } from '../../helpers/Functions';\nimport { Ionicons } from '@expo/vector-icons';\nimport serverURL from '../../helpers/URL';\nimport colors from '../../helpers/Colors';\n\ninterface ShowListProps {\n    availabileSites: StreamWebsite[];\n}\n\n/**\n * This is a functional component that renders the results for the where a movie\n * is streamable on. Backend inserts a StreamWebsite with a name == \"Not Found\"\n * if there are StreamWebsites found.\n *\n * @param {StreamWebsite[]} availabileSites - result from api call of array of websites\n *                                            that a movie is streamable.\n * \n * @returns {JSX.Element} - <FlatList /> of Clickable Websites where you can stream \n *                          a movie.\n */\nfunction StreamingList({availabileSites}: ShowListProps) {\n    \n    /**\n     * Function that returns a singular result from the backend, that is a website\n     * the movie is available to stream on.  One noteable feature implemented \n     * in the ternary operator, is how this function handles displaying \n     * the result list loading.\n     *\n     * @param {StreamWebsite} item - an element in the array of SteamWebsites found \n     *                               from the api.\n     *\n     * @returns {ListRenderItem<StreamWebsite>} - Rendered Item to be used in the\n     *                                            <FlatList/>\n     */\n    const renderItem: ListRenderItem<StreamWebsite> = ({item}) => {\n        return ( \n            item.name === \"Not Found\"\n                ? \n                <View style={styles.streaming}>\n                    <Text style={styles.text}> loading... </Text>\n                </View>\n                :\n                <View style={styles.streaming}>\n                    <TouchableOpacity style={styles.iconContainer}\n                        onPress={() => {Linking.openURL(item.url)}}\n                    >\n                        <Image source={{uri: item.icon}} style={styles.icon}  />\n                    </TouchableOpacity>\n                </View>\n        );\n    }\n\n    return (\n        <FlatList\n            style={styles.streamingContainer}\n            data={availabileSites}\n            renderItem={renderItem}\n            keyExtractor={(item) => item.id}\n        />\n    );\n}\n\n/* the props used in this actual Popup navigation screen */\ninterface Props {\n    moreInfo: MovieMoreInfo;\n}\n\n/**\n * The 0th index of the Popup array of navigation screens. \n *\n * @param {MovieMoreInfo} moreInfo - all info from the backend for an imdbID\n *\n * @returns {JSX.Element} - The left page inside the Popup component list, with\n *                          an inner list of StreamingWebsite interfaces\n */\nconst PopupLeft = ({moreInfo}: Props) => {\n    /* the visibility of the list of available streaming websites */\n    const [visible, setVisible] = useState(false);\n\n    /* the result list from the backend api call of StreamingWebsites \n     * Initial state is set from a helperFunction that sets the default \n     * result with the StreamingWebsite.name field set to \"Not Found\", and\n     * is used in the render item ternary operator, for the FlatList of the\n*    * <StreamingList /> functional component.\n     */\n    const [availabileSites, setAvailibleSites] = useState<StreamWebsite[]>(noStreamingSites(moreInfo.imdbID));\n\n    /**\n     * @async function to call backend and set the StreamWebsites[] state for this\n     * Popup navigation page\n     *\n     * @returns {Promise<void>} - return is void because instead of returning the SteamWebsite[]\n     *                            and storing it in a value, we can make use of the const state\n     *                            for the availabieSites array.\n     */\n    const ShowAvailableSites = async () : Promise<void> => {\n        let reqData = requestHelper(moreInfo.imdbID);\n        console.log(reqData);\n        try {\n            const response = await fetch(serverURL + '/movie/streaming', reqData);\n            const obj = await response.json();\n            setAvailibleSites(obj);\n        } catch (e) {\n            setAvailibleSites(noStreamingSites(moreInfo.imdbID));\n            console.log(e);\n        }\n    }\n    return (\n        <View style={styles.container}>\n        <Text style={styles.title}> {moreInfo.Title} </Text>\n        <View style={styles.topContainer}>\n            <View style={styles.streamingTitle}>\n                <Text style={styles.text}>Availible Streaming Options:</Text>\n            </View>\n            {visible\n                ? <StreamingList availabileSites={availabileSites} />\n                : <TouchableOpacity style={styles.refresh}\n                    onPress={() => {\n                        setVisible(!visible)\n                        ShowAvailableSites()\n                }}>\n                    <Ionicons name=\"ios-refresh-circle-outline\" size={24} color=\"white\" />\n                </TouchableOpacity>\n            }\n            </View>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        flexDirection: \"column\",\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    streamingTitle: {\n        top: -20,\n    },\n    topContainer: {\n        top: 100,\n        minHeight: 200,\n    },\n    refresh: {\n        borderRadius: 20,\n        padding: 20,\n        alignItems: \"center\",\n    },\n    button: {\n        alignContent: \"center\",\n        justifyContent: 'center',\n        alignItems: \"center\",\n        backgroundColor: \"lightblue\",\n        borderRadius: 20,\n        width: \"50%\",\n        height: 60,\n    },\n    streaming: {\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"space-evenly\",\n    },\n    streamingContainer: {\n    },\n    iconContainer: {\n        width: 100,\n    },\n    icon: {\n        width: 100,\n        height: 50,\n        resizeMode: \"contain\",\n        tintColor:  colors.dullWhite\n    },\n    title: {\n        fontSize: 22,\n        fontWeight: \"bold\",\n        color:  colors.dullWhite,\n        position: \"absolute\",\n        top: 10,\n    },\n    text: {\n        color:  colors.dullWhite,\n        fontWeight: 'bold',\n        justifyContent: 'center',\n        textAlign: \"center\",\n    }\n})\n\nexport default PopupLeft;\n"]},"metadata":{},"sourceType":"module"}