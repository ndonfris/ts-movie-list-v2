{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport MovieList from \"../components/MovieList\";\nimport { requestHelper, setFirstMovieResults } from \"../helpers/Functions\";\nimport serverURL from \"../helpers/URL\";\nimport Movies from \"../assets/Top250MoviesShort.json\";\nimport DropDownPicker from 'react-native-dropdown-picker';\nimport colors from \"../helpers/Colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function BrowseRoute() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      open = _useState2[0],\n      setOpen = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      value = _useState4[0],\n      setValue = _useState4[1];\n\n  var _useState5 = useState([{\n    label: 'Action',\n    value: 'Action'\n  }, {\n    label: 'Adventure',\n    value: 'Adventure'\n  }, {\n    label: 'Animation',\n    value: 'Animation'\n  }, {\n    label: 'Comedy',\n    value: 'Comedy'\n  }, {\n    label: 'Crime',\n    value: 'Crime'\n  }, {\n    label: 'Drama',\n    value: 'Drama'\n  }, {\n    label: 'Family',\n    value: 'Family'\n  }, {\n    label: 'Fantasy',\n    value: 'Fantasy'\n  }, {\n    label: 'History',\n    value: 'History'\n  }, {\n    label: 'Horror',\n    value: 'Horror'\n  }, {\n    label: 'Mystery',\n    value: 'Mystery'\n  }, {\n    label: 'Romance',\n    value: 'Romance'\n  }, {\n    label: 'Science Fiction',\n    value: 'Science Fiction'\n  }, {\n    label: 'Thriller',\n    value: 'Thriller'\n  }, {\n    label: 'War',\n    value: 'War'\n  }, {\n    label: 'Western',\n    value: 'Western'\n  }]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      items = _useState6[0],\n      setItems = _useState6[1];\n\n  var _useState7 = useState(setFirstMovieResults(Movies)),\n      _useState8 = _slicedToArray(_useState7, 2),\n      movieResults = _useState8[0],\n      setMovieResults = _useState8[1];\n\n  var searchGenre = function searchGenre(value) {\n    var bodyData, reqData, response, body;\n    return _regeneratorRuntime.async(function searchGenre$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Keyboard.dismiss();\n            console.log(value);\n\n            if (!(value === \"IMDb top 250\")) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 4:\n            bodyData = {\n              \"Genre\": value\n            };\n            reqData = requestHelper(JSON.stringify(bodyData));\n            _context.prev = 6;\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(fetch(serverURL + \"/browse/genre\", reqData));\n\n          case 9:\n            response = _context.sent;\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 12:\n            body = _context.sent;\n            setMovieResults(body);\n            return _context.abrupt(\"return\", body);\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](6);\n            console.log(_context.t0);\n            throw new Error(_context.t0);\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[6, 17]], Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.topContainer,\n      children: _jsx(DropDownPicker, {\n        open: open,\n        value: value,\n        items: items,\n        setOpen: setOpen,\n        setValue: setValue,\n        setItems: setItems,\n        onChangeValue: function onChangeValue() {\n          searchGenre(value);\n        },\n        placeholder: \"IMDb Top 250\",\n        theme: \"DARK\",\n        style: styles.topBar,\n        containerStyle: styles.containerStyle,\n        textStyle: styles.text,\n        labelStyle: styles.labelStyle,\n        labelProps: {\n          numberOfLines: 1\n        },\n        disabledStyle: {\n          opacity: 0.5\n        }\n      })\n    }), _jsx(SafeAreaView, {\n      style: styles.results,\n      children: _jsx(MovieList, {\n        movieArray: movieResults\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.black\n  },\n  topContainer: {\n    marginTop: '15%',\n    alignItems: 'center',\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    position: 'relative',\n    zIndex: 100,\n    textAlignVertical: 'center',\n    paddingBottom: 15\n  },\n  text: {\n    flexGrow: 1,\n    textAlignVertical: 'center'\n  },\n  containerStyle: {\n    width: 325\n  },\n  labelStyle: {\n    width: 325\n  },\n  topBar: {\n    paddingTop: 15,\n    paddingLeft: 20,\n    paddingRight: 20,\n    paddingBottom: 15,\n    width: 325,\n    height: 50\n  },\n  results: {\n    height: '82%',\n    position: 'relative'\n  }\n});","map":{"version":3,"sources":["/home/ndonfris/Projects/ts-movie-list-frontend/frontend/routes/BrowseRoute.tsx"],"names":["React","useState","MovieList","requestHelper","setFirstMovieResults","serverURL","Movies","DropDownPicker","colors","BrowseRoute","open","setOpen","value","setValue","label","items","setItems","movieResults","setMovieResults","searchGenre","Keyboard","dismiss","console","log","bodyData","reqData","JSON","stringify","fetch","response","json","body","Error","styles","container","topContainer","topBar","containerStyle","text","labelStyle","numberOfLines","opacity","results","StyleSheet","create","flex","backgroundColor","black","marginTop","alignItems","marginLeft","marginRight","position","zIndex","textAlignVertical","paddingBottom","flexGrow","width","paddingTop","paddingLeft","paddingRight","height"],"mappings":"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","sourcesContent":["/**\n * File:        BrowseRoute.tsx\n * Author:      Nick Donfris\n * Created:     01/24/22\n */\nimport React, {useState} from 'react';\nimport {Keyboard, View, StyleSheet, SafeAreaView} from 'react-native';\nimport MovieList from '../components/MovieList';\nimport {requestHelper, setFirstMovieResults} from '../helpers/Functions';\nimport {Movie, reqBody} from '../helpers/Interfaces';\nimport serverURL from '../helpers/URL';\nimport Movies from '../assets/Top250MoviesShort.json';\nimport DropDownPicker from 'react-native-dropdown-picker';\nimport colors from '../helpers/Colors';\n\n/*\n * Creates a SearchRoute page. Imports the static file Top250Moives.json, which\n * contains the necessary data to render MovieItem's of type Movie. \n *\n * @returns {JSX.Element} - Browse Page rendered by clicking on the bottom bar.\n */\nexport default function BrowseRoute() {\n\n    /* prop that determines if the catagory dropdown is opened  */\n    const [open, setOpen] = useState(false);\n\n    /* individual value of the selected in the items */\n    const [value, setValue] = useState(null);\n\n    /* the Movie genres that are searchable in the database */\n    const [items, setItems] = useState([\n        {label: 'Action', value: 'Action'},\n        {label: 'Adventure', value: 'Adventure'},\n        {label: 'Animation', value: 'Animation'},\n        {label: 'Comedy', value: 'Comedy'},\n        {label: 'Crime', value: 'Crime'},\n        {label: 'Drama', value: 'Drama'},\n        {label: 'Family', value: 'Family'},\n        {label: 'Fantasy', value: 'Fantasy'},\n        {label: 'History', value: 'History'},\n        {label: 'Horror', value: 'Horror'},\n        {label: 'Mystery', value: 'Mystery'},\n        {label: 'Romance', value: 'Romance'},\n        {label: 'Science Fiction', value: 'Science Fiction'},\n        {label: 'Thriller', value: 'Thriller'},\n        {label: 'War', value: 'War'},\n        {label: 'Western', value: 'Western'}\n    ]);\n    \n    /* the results found from the query function */\n    const [movieResults, setMovieResults] = useState<Movie[]>(setFirstMovieResults(Movies));\n\n    /**\n     * @async searchGenre - searches the database for any movie matching the genre\n     *                      passed in as a param. Called when the user selects a \n     *                      item from the dropdown menu.\n     *\n     * @param value - the selected value from the user\n     *\n     * @returns {Promise<Movie[]>} - Returns a promise that resolves an array of movies \n     *                               from the backend, which will then re-render the \n     *                               MovieList component. \n     */\n    const searchGenre = async (value:string) : Promise<Movie[]> => {\n        Keyboard.dismiss();\n        console.log(value);\n        if (value === \"IMDb top 250\") {\n            return;\n        }\n        let bodyData: reqBody<string> = {\n            \"Genre\": value\n        }\n        let reqData = requestHelper(JSON.stringify(bodyData));\n        try {\n            const response = await fetch(serverURL+\"/browse/genre\", reqData);\n            const body = await response.json();\n            setMovieResults(body);\n            return body;\n        } catch (e) {\n            console.log(e);\n            throw new Error(e);\n        }\n    };\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.topContainer}>\n                <DropDownPicker\n                    open={open}\n                    value={value}\n                    items={items}\n                    setOpen={setOpen}\n                    setValue={setValue}\n                    setItems={setItems}\n                    onChangeValue={() => {searchGenre(value)}}\n                    placeholder=\"IMDb Top 250\"\n                    theme=\"DARK\"\n                    style={styles.topBar}\n                    containerStyle={styles.containerStyle}\n                    textStyle={styles.text}\n                    labelStyle={styles.labelStyle}\n                    labelProps={{\n                        numberOfLines: 1\n                    }}\n                    disabledStyle={{\n                        opacity: 0.5\n                    }}\n                />\n            </View>\n            <SafeAreaView style={styles.results}>\n                <MovieList movieArray={movieResults} />\n            </SafeAreaView>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: colors.black,\n    },\n    topContainer: {\n        marginTop: '15%',\n        alignItems: 'center',\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        position: 'relative',\n        zIndex: 100,\n        textAlignVertical: 'center',\n        paddingBottom: 15,\n    },\n    text: {\n        flexGrow: 1,\n        textAlignVertical: 'center',\n    },\n    containerStyle: {\n        width: 325,\n    },\n    labelStyle: {\n        width: 325,\n    },\n    topBar: {\n        paddingTop: 15,\n        paddingLeft: 20,\n        paddingRight: 20,\n        paddingBottom: 15,\n        width: 325,\n        height: 50,\n    },\n    results: {\n        height: '82%',\n        position: 'relative',\n    }\n});\n\n"]},"metadata":{},"sourceType":"module"}