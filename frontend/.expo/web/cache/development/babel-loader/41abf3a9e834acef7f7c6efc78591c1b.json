{"ast":null,"code":"export function requestHelper(bodyData) {\n  console.log(\"requestHelper got:\\n\" + bodyData);\n  return {\n    method: \"POST\",\n    mode: \"no-cors\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    },\n    body: JSON.stringify(bodyData)\n  };\n}\nexport function createRequest(request) {\n  return {\n    method: request.method,\n    mode: request.mode,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    },\n    body: JSON.stringify({\n      \"title\": request.body\n    })\n  };\n}\nexport function createRequestBody(keyString, valueString) {\n  return {\n    method: 'POST',\n    mode: 'no-cors',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    },\n    body: JSON.stringify({\n      \"Genre\": valueString\n    })\n  };\n}\nexport function failedMovieMoreInfo(found) {\n  return {\n    Title: found.Title,\n    Year: found.Year,\n    Rated: \"N/a\",\n    Released: found.Year,\n    Runtime: \"N/a\",\n    Genre: \"N/a\",\n    Director: \"N/a\",\n    Writer: \"N/a\",\n    Actors: \"N/a\",\n    Plot: \"Oops, it looks like there was an error retrieving more info about the \" + found.Type + \", \" + found.Title + \".\",\n    Language: \"N/a\",\n    Country: \"N/a\",\n    Awards: \"N/a\",\n    Poster: found.Poster,\n    Ratings: [{\n      Source: \"N/a\",\n      Value: \"N/a\"\n    }, {\n      Source: \"N/a\",\n      Value: \"N/a\"\n    }],\n    Metascore: \"N/a\",\n    imdbRating: \"N/a\",\n    imdbVotes: \"N/a\",\n    imdbID: found.imdbID,\n    Type: found.Type,\n    DVD: \"N/a\",\n    BoxOffice: \"N/a\",\n    Production: \"N/a\",\n    Website: \"N/a\",\n    Response: \"N/a\"\n  };\n}\nexport function getRandomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\nexport function noStreamingSites(imdbID) {\n  return [{\n    id: imdbID,\n    icon: \"\",\n    name: \"Not Found\",\n    url: \"\",\n    display_name: \"n/a\",\n    country: [{\n      itemNumber: 0,\n      location: \"\"\n    }]\n  }];\n}\nexport function HitSearchKey() {\n  return [];\n}\nexport function SimulateSearch() {\n  var amount = getRandomNumber(1, 5);\n  var movies = [];\n\n  for (var i = 0; i < amount; i++) {\n    movies.push({});\n  }\n\n  return movies;\n}\nexport function getBadRatings() {\n  return [{\n    Source: \"N/a\",\n    Value: \"N/a\"\n  }];\n}\nexport function setFirstMovieResults(movieArray) {\n  var rand = getRandomNumber(0, 4);\n  var start = rand * 50;\n  var end = start + 50;\n  var newArr = movieArray.slice(start, end);\n  var shuffled = newArr.map(function (value) {\n    return {\n      value: value,\n      sort: Math.random\n    };\n  }).sort(function () {\n    return Math.random() - 0.5;\n  }).map(function (_ref) {\n    var value = _ref.value;\n    return value;\n  });\n  return shuffled;\n}","map":{"version":3,"sources":["/home/ndonfris/Projects/ts-movie-list-frontend/frontend/helpers/Functions.tsx"],"names":["requestHelper","bodyData","console","log","method","mode","headers","body","JSON","stringify","createRequest","request","createRequestBody","keyString","valueString","failedMovieMoreInfo","found","Title","Year","Rated","Released","Runtime","Genre","Director","Writer","Actors","Plot","Type","Language","Country","Awards","Poster","Ratings","Source","Value","Metascore","imdbRating","imdbVotes","imdbID","DVD","BoxOffice","Production","Website","Response","getRandomNumber","min","max","Math","floor","random","noStreamingSites","id","icon","name","url","display_name","country","itemNumber","location","HitSearchKey","SimulateSearch","amount","movies","i","push","getBadRatings","setFirstMovieResults","movieArray","rand","start","end","newArr","slice","shuffled","map","value","sort"],"mappings":"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","sourcesContent":["/**\n * File:        Functions.tsx\n * Author:      Nick Donfris\n * Created:     02/06/22\n * Description: This file exports functions used throughout the entire \n * frontend of this application. These functions are typically used to\n * help simplify the readability of the components in the application. \n * Building the json needed to send a request to  the backend, and defining\n * what a default state should contain for an Interface, are some examples\n * of what I decided to include here.\n */\n\nimport {PostRequest, Movie, MovieMoreInfo, StreamWebsite, addRequestBody, reqBody, Rating} from './Interfaces';\nimport MovieTileObj from './MovieTileObj';\n\n/**\n * requestHelper(bodyString) - this function is similiar to createRequest. However, instead\n *                             of passing in the entire Interface of options, only the string \n *                             used in the body (as a value for the key \"title\"), is\n *                             passed in. \n *\n * @param {string} bodyString - the string of the post request to call to the backend.\n * @returns {RequestInit} - defines a request to send to a backend URI,\n *                          with this request having the request method, headers, mode\n *                          defined. Also sets the body set to the key \"title\"\n */\nexport function requestHelper(bodyData: string): RequestInit {\n    console.log(\"requestHelper got:\\n\" + bodyData);\n    return {\n        method: \"POST\",\n        mode: \"no-cors\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify(bodyData)\n    };\n}\n\n/**\n * createRequest(PostRequest) - Returns part of a Request with all of the \n *                              fields defined in the parameter passed in.\n *\n * @param {PostRequest} request - interface containing a method, more, headers,\n *\n * @returns {RequestInit} - the Request to send the back (without the URI),\n *                          with the fields set to their defined values in the\n *                          request parameter \n */\nexport function createRequest(request: PostRequest): RequestInit {\n    return {\n        method: request.method,\n        mode: request.mode,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\"title\": request.body})\n    }\n}\n\n/**\n * createRequestBody(PostRequest) - Returns part of a Request with all of the \n *                                  fields pre-defined and the body matching the\n *                                  key value pair.\n *\n * @param {string} keyString -  the key for the bodyString\n * @param {string} valueString -  the value for the bodyString\n * @returns {RequestInit} - defines a request to send to a backend URI,\n *                          with this request having the request method, headers, mode\n *                          defined. Also sets the body set to the key \"title\"\n */\nexport function createRequestBody(keyString: string, valueString: string): RequestInit {\n    return {\n        method: 'POST',\n        mode: 'no-cors',\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\"Genre\": valueString}),\n    }\n}\n\n\n/**\n * This function is called when a movie is expected to show more info, but \n * the call to the backend failed. \n *\n * @param {Movie} found - the Movie interface that was found from the search screen\n *                        \n * @returns {MovieMoreInfo} - A object, with all availible fields from the Movie\n *                            inserted to the MovieMoreInfo interface.\n */\nexport function failedMovieMoreInfo(found: Movie) : MovieMoreInfo{\n    return {\n        Title: found.Title,\n        Year: found.Year,\n        Rated: \"N/a\",\n        Released: found.Year,\n        Runtime: \"N/a\",\n        Genre: \"N/a\",\n        Director: \"N/a\",\n        Writer: \"N/a\",\n        Actors: \"N/a\",\n        Plot: \"Oops, it looks like there was an error retrieving more info about the \" + found.Type + \", \" + found.Title + \".\",\n        Language: \"N/a\",\n        Country: \"N/a\",\n        Awards: \"N/a\",\n        Poster: found.Poster,\n        Ratings: [{Source: \"N/a\", Value: \"N/a\"}, {Source: \"N/a\", Value: \"N/a\"}],\n        Metascore: \"N/a\",\n        imdbRating: \"N/a\",\n        imdbVotes: \"N/a\",\n        imdbID: found.imdbID,\n        Type: found.Type,\n        DVD: \"N/a\",\n        BoxOffice: \"N/a\",\n        Production: \"N/a\",\n        Website: \"N/a\",\n        Response: \"N/a\"\n    };\n}\n\n\n\nexport function getRandomNumber(min: number, max: number){\n        return Math.floor(Math.random()*(max-min+1)+min);\n    }\n\n/**\n * noStreamingSites(imdbID) - defines a default behavior for the streaming sites\n *                            of a movie when no results are found.\n *\n * @param {string} imdbID - the string of the imdbID field from a Movie interface\n * \n * @returns {StreamWebsite[]} - an array of 1 StreamingWebsite, with only only the \n *                              id, name, display_name, and county.number fields set\n */\nexport function noStreamingSites(imdbID : string): StreamWebsite[] {\n    return [{\n        id: imdbID,\n        icon: \"\",\n        name: \"Not Found\",\n        url: \"\",\n        display_name: \"n/a\",\n        country: [\n            {\n                itemNumber: 0,\n                location: \"\",\n            },\n        ],\n    }]\n}\n\nexport function HitSearchKey() {\n    return [] as Movie[];\n\n}\n\nexport function SimulateSearch() : Movie[] {\n    var amount = getRandomNumber(1, 5);\n    var movies: Movie[] = [];\n    for (let i = 0; i < amount; i++) {\n        movies.push({} as Movie);\n        \n    }\n    return movies;\n}\n\nexport function getBadRatings() : Rating[] {\n    return [{Source: \"N/a\", Value: \"N/a\"}];\n}\n\n\nexport function setFirstMovieResults(movieArray : Movie[]) : Movie[] {\n    let rand = getRandomNumber(0, 4);\n    var start = rand * 50;\n    var end = start + 50;\n\n    const newArr = movieArray.slice(start, end);\n    var shuffled = newArr\n        .map(value => ({value, sort: Math.random}))\n        .sort( () => Math.random() - 0.5) \n        .map(({value}) => value)\n    return shuffled;\n}\n\n"]},"metadata":{},"sourceType":"module"}