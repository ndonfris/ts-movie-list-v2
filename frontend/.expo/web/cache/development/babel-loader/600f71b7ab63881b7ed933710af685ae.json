{"ast":null,"code":"import React, { useRef } from 'react';\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport GestureRecognizer from 'react-native-swipe-gestures';\nimport PopupLeft from \"./PopupPages/PopupLeft\";\nimport PopupCenter from \"./PopupPages/PopupCenter\";\nimport PopupRight from \"./PopupPages/PopupRight\";\nimport { AntDesign } from '@expo/vector-icons';\nimport colors from \"../helpers/Colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction CloseButton(_ref) {\n  var updateModal = _ref.updateModal,\n      modalVisible = _ref.modalVisible;\n  return _jsx(Pressable, {\n    style: [styles.button, styles.buttonClose],\n    onPress: function onPress() {\n      return updateModal(!modalVisible);\n    },\n    children: _jsx(AntDesign, {\n      name: \"closecircleo\",\n      size: 24,\n      color: colors.dullWhite\n    })\n  });\n}\n\nvar Popup = function Popup(_ref2) {\n  var moreInfo = _ref2.moreInfo,\n      updateModal = _ref2.updateModal,\n      modalVisible = _ref2.modalVisible;\n  var PopupTiles = [_jsx(PopupLeft, {\n    moreInfo: moreInfo\n  }), _jsx(PopupCenter, {\n    moreInfo: moreInfo\n  }), _jsx(PopupRight, {\n    moreInfo: moreInfo\n  })];\n  var scrollX = useRef(new Animated.Value(0)).current;\n\n  var _useWindowDimensions = useWindowDimensions(),\n      windowWidth = _useWindowDimensions.width;\n\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(GestureRecognizer, {\n      onSwipeDown: function onSwipeDown() {\n        return updateModal(!modalVisible);\n      },\n      config: {\n        velocityThreshold: 0.3,\n        directionalOffsetThreshold: 300\n      },\n      children: _jsx(Modal, {\n        animationType: \"slide\",\n        transparent: true,\n        visible: modalVisible,\n        onRequestClose: function onRequestClose() {\n          updateModal(!modalVisible);\n        },\n        children: _jsx(View, {\n          style: styles.centeredView,\n          children: _jsxs(View, {\n            style: styles.modalView,\n            children: [_jsx(CloseButton, {\n              updateModal: updateModal,\n              modalVisible: modalVisible\n            }), _jsx(SafeAreaView, {\n              style: styles.widthContainer,\n              children: _jsx(ScrollView, {\n                horizontal: true,\n                pagingEnabled: true,\n                showsHorizontalScrollIndicator: false,\n                contentOffset: {\n                  x: windowWidth - 50,\n                  y: 0\n                },\n                zoomScale: 1,\n                scrollEventThrottle: 1,\n                snapToStart: false,\n                snapToEnd: false,\n                onScroll: Animated.event([{\n                  nativeEvent: {\n                    contentOffset: {\n                      x: scrollX\n                    }\n                  }\n                }], {\n                  useNativeDriver: false\n                }),\n                children: PopupTiles.map(function (popupTile, index) {\n                  return _jsx(Animated.View, {\n                    style: {\n                      width: windowWidth - 50,\n                      height: \"100%\"\n                    },\n                    children: popupTile\n                  }, index);\n                })\n              })\n            }), _jsx(View, {\n              style: styles.footer,\n              children: PopupTiles.map(function (movieTile, index) {\n                var width = scrollX.interpolate({\n                  inputRange: [windowWidth * (index - 1), windowWidth * index, windowWidth * (index + 1)],\n                  outputRange: [8, 16, 8],\n                  extrapolate: \"clamp\"\n                });\n                return _jsx(Animated.View, {\n                  style: [styles.normalDot, {\n                    width: width\n                  }]\n                }, index);\n              })\n            })]\n          })\n        })\n      })\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    marginTop: 30,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  modalView: {\n    backgroundColor: colors.barDarker,\n    borderRadius: 20,\n    width: \"90%\",\n    height: \"75%\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 5,\n      height: 5\n    },\n    shadowOpacity: 0.5,\n    shadowRadius: 3,\n    elevation: 5\n  },\n  footer: {\n    color: colors.dullWhite,\n    flexDirection: \"row\",\n    alignSelf: \"center\",\n    justifyContent: \"space-evenly\",\n    width: \"20%\",\n    position: \"absolute\",\n    bottom: 10\n  },\n  button: {\n    color: colors.dullWhite,\n    borderRadius: 30,\n    padding: 10,\n    backgroundColor: \"transparent\",\n    position: 'absolute',\n    top: -5,\n    right: -5,\n    elevation: 2\n  },\n  buttonClose: {\n    backgroundColor: \"transparent\"\n  },\n  container: {\n    borderRadius: 15\n  },\n  widthContainer: {\n    width: \"95%\",\n    height: \"95%\"\n  },\n  normalDot: {\n    height: 8,\n    width: 8,\n    borderRadius: 4,\n    backgroundColor: colors.dullWhite,\n    marginHorizontal: 4\n  },\n  indicatorContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});\nexport default Popup;","map":{"version":3,"sources":["/home/ndonfris/Projects/ts-movie-list-frontend/frontend/components/Popup.tsx"],"names":["React","useRef","GestureRecognizer","PopupLeft","PopupCenter","PopupRight","AntDesign","colors","CloseButton","updateModal","modalVisible","styles","button","buttonClose","dullWhite","Popup","moreInfo","PopupTiles","scrollX","Animated","Value","current","useWindowDimensions","windowWidth","width","container","velocityThreshold","directionalOffsetThreshold","centeredView","modalView","widthContainer","x","y","event","nativeEvent","contentOffset","useNativeDriver","map","popupTile","index","height","footer","movieTile","interpolate","inputRange","outputRange","extrapolate","normalDot","StyleSheet","create","flex","marginTop","justifyContent","alignItems","backgroundColor","barDarker","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","color","flexDirection","alignSelf","position","bottom","padding","top","right","marginHorizontal","indicatorContainer"],"mappings":"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","sourcesContent":["/**\n * File:        Popup.tsx\n * Author:      Nick Donfris\n * Created:     01/27/22\n */\nimport React, { useRef } from 'react';\nimport { Modal, StyleSheet, useWindowDimensions, Pressable, View, Animated, ScrollView, SafeAreaView } from \"react-native\";\nimport GestureRecognizer from 'react-native-swipe-gestures';\nimport PopupLeft from \"./PopupPages/PopupLeft\";\nimport PopupCenter from \"./PopupPages/PopupCenter\";\nimport PopupRight from \"./PopupPages/PopupRight\";\nimport { MovieMoreInfo } from '../helpers/Interfaces';\nimport { AntDesign } from '@expo/vector-icons';\nimport colors from '../helpers/Colors';\n\n/* Props used in the CloseButton Functional Component */\ninterface CloseProps {\n    modalVisible: boolean;\n    updateModal: (modalVisible: boolean) => void;\n}\n\n/**\n * <CloseButton /> functional component that is rendered in the top right corner of\n * the Popup. This component functions takes the modalVisible state (which must be true)\n * and sets it to false.\n *\n * @param {function} updateModal - the function called updating the modalVisible state of\n *                                  the popup.\n * @param {boolean} modalVisible - the state of the visibility of this modal\n *\n * @returns {JSX.Element} - closes/removes visibility of this Popup prop\n */\nfunction CloseButton({updateModal, modalVisible}: CloseProps ){\n    return (\n        <Pressable\n            style={[styles.button, styles.buttonClose]}\n            onPress={() => updateModal(!modalVisible)}\n        >\n            <AntDesign name=\"closecircleo\" size={24} color={colors.dullWhite} />\n        </Pressable>\n    );\n}\n\n/* Props for the exported component from this file (<Popup/>) */\ninterface Props {\n    moreInfo: MovieMoreInfo;\n    modalVisible: boolean;\n    updateModal: (modalVisible: boolean) => void;\n}\n\n/**\n * information (swipe-able) shown within the inner modal \n *\n * @param {MovieMoreInfo} moreInfo - the interface containing all extra information about a \n *                                   movie.\n * @param {function} updateModal - no return, changes the state of the visibility of a modal\n * @param {boolean} modalVisible - the state determining if this Popup is showing. This\n *                                  so that each PopupTile can handle closing the Popup\n *\n * @returns {JSX.Element} - A swippeable list of <PopupTiles/>.\n *                          These are different components in the PopupTiles Directory.\n */\nconst Popup = ({moreInfo, updateModal, modalVisible}: Props) => {\n\n    /* this is an array of functional components, where each index is used as an inner screen */\n    const PopupTiles = [\n        <PopupLeft moreInfo={moreInfo} />,\n        <PopupCenter moreInfo={moreInfo}/>,\n        <PopupRight moreInfo={moreInfo} />,\n    ]\n    \n    /* the X value of that is changed when the user horizontally swipes on the Popup */\n    const scrollX = useRef(new Animated.Value(0)).current;\n\n    /* number that is the width of the Device screen */\n    const {width: windowWidth} = useWindowDimensions();\n\n    return (\n            <View style={styles.container}>\n            <GestureRecognizer\n                onSwipeDown={() => updateModal(!modalVisible)}\n                config={{\n                    velocityThreshold: 0.3,\n                    directionalOffsetThreshold: 300\n                }}>\n                <Modal\n                    animationType=\"slide\"\n                    transparent={true}\n                    visible={modalVisible}\n                    onRequestClose={() => {\n                        updateModal(!modalVisible);\n                }}>\n                    <View style={styles.centeredView}>\n                        <View style={styles.modalView}>\n                            <CloseButton updateModal={updateModal} modalVisible={modalVisible}/>\n                            <SafeAreaView style={styles.widthContainer}>\n                                <ScrollView\n                                    horizontal={true}\n                                    pagingEnabled={true}\n                                    showsHorizontalScrollIndicator={false}\n                                    contentOffset={{x: windowWidth-50, y:0}}\n                                    zoomScale={1}\n                                    scrollEventThrottle={1}\n                                    snapToStart={false}\n                                    snapToEnd={false}\n                                    onScroll={Animated.event([{\n                                        nativeEvent: {\n                                            contentOffset: {\n                                                x: scrollX,\n                                            },\n                                        },\n                                    }],\n                                    {useNativeDriver: false},\n                                    )}\n                                >\n                                    {PopupTiles.map((popupTile, index) => {\n                                        return(\n                                            <Animated.View key={index} style={{width: windowWidth-50, height: \"100%\"}}>\n                                                {popupTile}\n                                            </Animated.View>\n                                        );\n                                    })}\n                                </ScrollView>\n                            </SafeAreaView>\n                            <View style={styles.footer}>\n                                {PopupTiles.map((movieTile, index) => {\n                                    const width = scrollX.interpolate({\n                                        inputRange: [\n                                            windowWidth * (index - 1),\n                                            windowWidth * index,\n                                            windowWidth * (index + 1)\n                                        ],\n                                        outputRange: [8, 16, 8],\n                                        extrapolate: \"clamp\"\n                                    });\n                                    return (\n                                        <Animated.View\n                                            key={index}\n                                            style={[styles.normalDot, { width }]}\n                                        />\n                                    );\n                                })}\n                            </View>\n                        </View>\n                    </View>\n                </Modal>\n                </GestureRecognizer>\n            </View>\n    );\n};\n\n\nconst styles = StyleSheet.create({\n    centeredView: {\n        flex: 1,\n        marginTop: 30,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    modalView: {\n        backgroundColor: colors.barDarker,\n        borderRadius: 20,\n        width: \"90%\",\n        height: \"75%\",\n        shadowColor: \"#000\",\n        shadowOffset: {\n            width: 5,\n            height: 5\n        },\n        shadowOpacity: 0.5,\n        shadowRadius: 3,\n        elevation: 5\n    },\n    footer: {\n        color: colors.dullWhite,\n        flexDirection: \"row\",\n        alignSelf: \"center\",\n        justifyContent: \"space-evenly\",\n        width: \"20%\",\n        position: \"absolute\",\n        bottom: 10,\n    },\n    button: {\n        color: colors.dullWhite,\n        borderRadius: 30,\n        padding: 10,\n        backgroundColor: \"transparent\",\n        position: 'absolute',\n        top: -5,\n        right: -5,\n        elevation: 2,\n    },\n    buttonClose: {\n        backgroundColor: \"transparent\",\n    },\n    container: {\n        borderRadius: 15,\n    },\n    widthContainer: {\n        width: \"95%\",\n        height: \"95%\",\n    },\n    normalDot: {\n        height: 8,\n        width: 8,\n        borderRadius: 4,\n        backgroundColor: colors.dullWhite,\n        marginHorizontal: 4\n    },\n    indicatorContainer: {\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    }\n});\n\nexport default Popup;\n"]},"metadata":{},"sourceType":"module"}