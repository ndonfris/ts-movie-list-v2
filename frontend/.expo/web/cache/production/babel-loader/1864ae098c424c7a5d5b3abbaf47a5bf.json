{"ast":null,"code":"import React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"react-native-web/dist/exports/Text\";import View from\"react-native-web/dist/exports/View\";import Pressable from\"react-native-web/dist/exports/Pressable\";import Linking from\"react-native-web/dist/exports/Linking\";import{SvgXml}from\"react-native-svg\";import RottenTomatoesIcon from\"../assets/RT_new.svg\";import MetacriticLogo from\"../assets/META_new.svg\";import ImdbIcon from\"../assets/IMDB_new.svg\";import{MaterialIcons}from'@expo/vector-icons';import colors from\"../helpers/Colors\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";;function IMDB(_ref){var _Ratings$find;var Ratings=_ref.Ratings,Title=_ref.Title;var review=(_Ratings$find=Ratings.find(function(rating){return rating.Source===\"Internet Movie Database\";}))==null?void 0:_Ratings$find.Value;if(review==null){return _jsx(View,{});}else{var searchURL=\"https://www.imdb.com/find?q=\"+Title;return _jsxs(Pressable,{style:styles.rating,onPress:function onPress(){Linking.openURL(searchURL);},children:[_jsx(SvgXml,{width:\"80\",height:\"100\",xml:ImdbIcon}),_jsx(Text,{style:styles.text,children:review})]});}};function RottenTomatoes(_ref2){var _Ratings$find2;var Ratings=_ref2.Ratings,Title=_ref2.Title;var searchURL=\"https://www.rottentomatoes.com/search?search=\"+Title;var review=(_Ratings$find2=Ratings.find(function(rating){return rating.Source==\"Rotten Tomatoes\";}))==null?void 0:_Ratings$find2.Value;if(review==null){return _jsx(View,{});}else{return _jsxs(Pressable,{style:styles.rating,onPress:function onPress(){Linking.openURL(searchURL);},children:[_jsx(SvgXml,{width:\"80\",height:\"100\",xml:RottenTomatoesIcon}),_jsx(Text,{style:styles.text,children:review})]});}};function MetaCritic(_ref3){var _Ratings$find3;var Ratings=_ref3.Ratings,Title=_ref3.Title;var searchURL=\"https://www.metacritic.com/search/all/\"+Title+\"/results\";var review=(_Ratings$find3=Ratings.find(function(rating){return rating.Source==\"Metacritic\";}))==null?void 0:_Ratings$find3.Value;if(review==null){return _jsx(View,{});}else{return _jsxs(Pressable,{style:styles.rating,onPress:function onPress(){Linking.openURL(searchURL);},children:[_jsx(SvgXml,{width:\"80\",height:\"100\",xml:MetacriticLogo}),_jsx(Text,{style:styles.text,children:review})]});}}function NoneFound(_ref4){var Ratings=_ref4.Ratings;var review=Ratings.filter(function(_ref5){var Source=_ref5.Source;return Source===\"N/a\";});if(review.length==0){return _jsx(View,{});}else{return _jsxs(View,{style:styles.rating,children:[_jsx(MaterialIcons,{name:\"error-outline\",size:40,color:colors.dullWhite,style:styles.error}),_jsx(Text,{style:styles.text,children:\"Reviews not found\"})]});}}var ReviewList=function ReviewList(_ref6){var Ratings=_ref6.Ratings,Title=_ref6.Title;return _jsxs(View,{style:styles.container,children:[_jsx(IMDB,{Ratings:Ratings,Title:Title}),_jsx(RottenTomatoes,{Ratings:Ratings,Title:Title}),_jsx(MetaCritic,{Ratings:Ratings,Title:Title}),_jsx(NoneFound,{Ratings:Ratings})]});};var styles=StyleSheet.create({container:{top:-10,flexDirection:\"row\",alignSelf:\"center\",alignContent:\"space-between\",minHeight:100},rating:{color:colors.dullWhite,margin:10},text:{color:colors.dullWhite,top:-20,fontSize:20,fontWeight:\"bold\",textAlign:\"center\"},error:{textAlign:\"center\",top:-10,paddingBottom:10}});export default ReviewList;","map":{"version":3,"sources":["/home/ndonfris/Projects/ts-movie-list-frontend/frontend/components/ReviewList.tsx"],"names":["React","SvgXml","RottenTomatoesIcon","MetacriticLogo","ImdbIcon","MaterialIcons","colors","IMDB","Ratings","Title","review","find","rating","Source","Value","searchURL","styles","Linking","openURL","text","RottenTomatoes","MetaCritic","NoneFound","filter","length","dullWhite","error","ReviewList","container","StyleSheet","create","top","flexDirection","alignSelf","alignContent","minHeight","color","margin","fontSize","fontWeight","textAlign","paddingBottom"],"mappings":"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","sourcesContent":["/**\n * File:        ReviewList.tsx\n * Author:      Nick Donfris\n * Created:     01/29/22\n */\nimport React from 'react';\nimport {StyleSheet, Text, View, Pressable, Linking} from \"react-native\";\nimport { Rating} from \"../helpers/Interfaces\";\nimport {SvgXml} from \"react-native-svg\";\nimport RottenTomatoesIcon from '../assets/RT_new.svg';\nimport MetacriticLogo from '../assets/META_new.svg';\nimport ImdbIcon from '../assets/IMDB_new.svg';\nimport {MaterialIcons} from '@expo/vector-icons';\nimport colors from '../helpers/Colors';\n\n\n/* Props used in each of the following functional components */\ninterface ReviewProps {\n    Ratings?: Rating[];\n    Title?: string;\n};\n\n/**\n * Functional component that renders if a review score is found.\n * This component is a pressable icon, that opens imdb in Default Browser\n *\n * @param {Rating[]} Ratings - the array of all found ratings found on for a MovieItem\n * @param {Title} Title - the title ot search for in the IMDB URL\n *\n * @returns {JSX.Element} - IMDB icon that is pressable \n */\nfunction IMDB({Ratings, Title}: ReviewProps) {\n    const review = Ratings.find(rating => rating.Source as Rating === \"Internet Movie Database\")?.Value;\n    if (review == null) {\n        return (<View></View>);\n    } else {\n        const searchURL = \"https://www.imdb.com/find?q=\"+ Title;\n        return (\n            <Pressable style={styles.rating} onPress={() => { Linking.openURL(searchURL) }}>\n                <SvgXml width=\"80\" height=\"100\" xml={ImdbIcon} />\n                <Text style={styles.text}>{review}</Text>\n            </Pressable>\n        );\n    }\n};\n\n/**\n * Functional component that renders if a review score is found that has the\n * Rating.Source field matching Rotten Tomatoes. This component is a pressable\n * icon.\n *\n * @param {Rating[]} Ratings - the array of all ratings found in a MovieItem\n * @param {string} Title - the string of the title, to search for on rotten tomatoes\n *                          URL\n *\n * @returns {JSX.Element} - RottenTomatoes icon that is pressable\n */\nfunction RottenTomatoes({Ratings, Title}: ReviewProps ){\n    let searchURL = \"https://www.rottentomatoes.com/search?search=\"+Title;\n    let review = Ratings.find(rating => rating.Source as Rating== \"Rotten Tomatoes\")?.Value;\n    if (review == null) {\n        return (<View></View>);\n    } else {\n        return (\n            <Pressable style={styles.rating} onPress={() => { Linking.openURL(searchURL) }}>\n                <SvgXml width=\"80\" height=\"100\" xml={RottenTomatoesIcon} />\n                <Text style={styles.text}>{review}</Text>\n            </Pressable>\n        );\n    } \n};\n\n/**\n * Functional component that renders if a review score is found that has the\n * Rating.Source field matching Metacritic. This component is a pressable\n * icon.\n *\n * @param {Rating[]} .Ratings - the array of all ratings found in a MovieItem\n * @param {string} .Title - the string of the title, to search for on Metacritic\n *                          website.\n *\n * @returns {JSX.Element} - MetaCritic icon that is pressable\n */\nfunction MetaCritic({Ratings, Title}: ReviewProps) {\n    let searchURL = \"https://www.metacritic.com/search/all/\"+Title+\"/results\";\n    let review = Ratings.find(rating => rating.Source as Rating == \"Metacritic\")?.Value;\n    if (review == null) {\n        return (<View></View>);\n    } else {\n        return (\n            <Pressable style={styles.rating} onPress={() => { Linking.openURL(searchURL) }}>\n                <SvgXml width=\"80\" height=\"100\" xml={MetacriticLogo} />\n                <Text style={styles.text}>{review}</Text>\n            </Pressable>\n        );\n    }\n}\n\n\ninterface NoneFoundProps {\n    Ratings?: Rating[];\n}\n\n/**\n * Functional component that renders the default Review not found icon. Like all of the\n * functional components called from RevewList, this may return an empty view (nothing).\n *\n * @param {Rating[]} Ratings - the array results found in the backend. The backend\n *                                checks the reviews it finds and if this JSON array is\n *                                empty, it will insert a default Rating interface with the\n *                                the Rating.Source field equal to \"N/A\".\n *\n * @returns {JSX.Element} - NoneFound icon that is not pressable\n */\nfunction NoneFound({Ratings}: NoneFoundProps) {\n    const review = Ratings.filter(({ Source }) => Source === \"N/a\");\n    if (review.length == 0) {\n        return (<View></View>);\n    } else {\n        return (\n            <View style={styles.rating} >\n                <MaterialIcons name=\"error-outline\" size={40} color={colors.dullWhite} style={styles.error}/>\n                <Text style={styles.text}>Reviews not found</Text>\n            </View>\n        );\n    }\n}\n\n\n\n/**\n * ReviewList of pressable icons, and the score the rated a movie. The list of ratings\n * might contain 0-3 reviews (while it can't actually contain zero ratings, backend inserts\n * a value to catch no reviews found), so each functional component called above must handle\n * not finding it's correlating rating.\n *\n * @param {MovieMoreInfo} .moreInfo - All information found by backend for a movie \n * @returns {JSX.Element} - ReviewList of pressable icons correlating to:\n *                          [<IMDb/>, <RottenTomatoes/>, <MetaCritic/>] || [<NoneFound/>]\n */\nconst ReviewList = ({Ratings, Title}: ReviewProps) => {\n    return (\n        <View style={styles.container}>\n            <IMDB Ratings={Ratings} Title={Title} /> \n            <RottenTomatoes Ratings={Ratings} Title={Title} /> \n            <MetaCritic Ratings={Ratings} Title={Title} />\n            <NoneFound Ratings={Ratings}/>\n        </View>\n    );\n}\n    \nconst styles = StyleSheet.create({\n    container: {\n        top: -10,\n        flexDirection: \"row\",\n        alignSelf: \"center\",\n        alignContent: \"space-between\",\n        minHeight: 100,\n    },\n    rating: {\n        color: colors.dullWhite,\n        margin: 10,\n    },\n    text: {\n        color: colors.dullWhite,\n        top: -20,\n        fontSize: 20,\n        fontWeight: \"bold\",\n        textAlign: \"center\",\n    },\n    error: {\n        textAlign: \"center\",\n        top: -10,\n        paddingBottom: 10,\n    }\n});\n\nexport default ReviewList;\n"]},"metadata":{},"sourceType":"module"}