{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"elevation\",\"onLongPress\",\"onPress\",\"mode\",\"children\",\"style\",\"theme\",\"testID\",\"accessible\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Animated from\"react-native-web/dist/exports/Animated\";import TouchableWithoutFeedback from\"react-native-web/dist/exports/TouchableWithoutFeedback\";import View from\"react-native-web/dist/exports/View\";import color from'color';import{white,black}from\"../../styles/colors\";import CardContent from\"./CardContent\";import CardActions from\"./CardActions\";import CardCover from\"./CardCover\";import CardTitle from\"./CardTitle\";import Surface from\"../Surface\";import{withTheme}from\"../../core/theming\";var Card=function Card(_ref){var _ref$elevation=_ref.elevation,cardElevation=_ref$elevation===void 0?1:_ref$elevation,onLongPress=_ref.onLongPress,onPress=_ref.onPress,_ref$mode=_ref.mode,cardMode=_ref$mode===void 0?'elevated':_ref$mode,children=_ref.children,style=_ref.style,theme=_ref.theme,testID=_ref.testID,accessible=_ref.accessible,rest=_objectWithoutProperties(_ref,_excluded);var _React$useRef=React.useRef(new Animated.Value(cardElevation)),elevation=_React$useRef.current;var animation=theme.animation,dark=theme.dark,mode=theme.mode,roundness=theme.roundness;var handlePressIn=function handlePressIn(){var dark=theme.dark,mode=theme.mode,scale=theme.animation.scale;Animated.timing(elevation,{toValue:8,duration:150*scale,useNativeDriver:!dark||mode==='exact'}).start();};var handlePressOut=function handlePressOut(){Animated.timing(elevation,{toValue:cardElevation,duration:150*animation.scale,useNativeDriver:!dark||mode==='exact'}).start();};var total=React.Children.count(children);var siblings=React.Children.map(children,function(child){return React.isValidElement(child)&&child.type?child.type.displayName:null;});var borderColor=color(theme.dark?white:black).alpha(0.12).rgb().string();return React.createElement(Surface,_extends({style:[{borderRadius:roundness,elevation:elevation,borderColor:borderColor},cardMode==='outlined'?styles.outlined:{},style],theme:theme},rest),React.createElement(TouchableWithoutFeedback,{delayPressIn:0,disabled:!(onPress||onLongPress),onLongPress:onLongPress,onPress:onPress,onPressIn:onPress||onLongPress?handlePressIn:undefined,onPressOut:onPress||onLongPress?handlePressOut:undefined,testID:testID,accessible:accessible},React.createElement(View,{style:styles.innerContainer},React.Children.map(children,function(child,index){return React.isValidElement(child)?React.cloneElement(child,{index:index,total:total,siblings:siblings}):child;}))));};Card.Content=CardContent;Card.Actions=CardActions;Card.Cover=CardCover;Card.Title=CardTitle;var styles=StyleSheet.create({innerContainer:{flexGrow:1,flexShrink:1},outlined:{elevation:0,borderWidth:1}});export default withTheme(Card);","map":{"version":3,"sources":["Card.tsx"],"names":["Card","elevation","cardElevation","mode","cardMode","rest","current","React","Animated","roundness","handlePressIn","animation","scale","toValue","duration","useNativeDriver","handlePressOut","total","siblings","child","borderColor","color","theme","borderRadius","styles","onPress","accessible","innerContainer","index","flexGrow","flexShrink","outlined","borderWidth","withTheme"],"mappings":"wdAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,gRASA,MAAA,CAAA,KAAA,KAAA,OAAA,CACA,OAAA,KAAA,CAAA,KAAA,2BACA,MAAA,CAAA,WAAA,qBACA,MAAA,CAAA,WAAA,qBAEA,MAAA,CAAA,SAAA,mBAEA,MAAA,CAAA,SAAA,mBACA,MAAA,CAAA,OAAA,kBACA,OAAA,SAAA,0BAmFA,GAAMA,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,MAW0C,yBAVrDC,SAUqD,CAV1CC,aAU0C,yBAXzC,CAWyC,gBAXzC,WAWyC,MAXzC,WAWyC,CAXzC,OAWyC,MAXzC,OAWyC,gBAPrDC,IAOqD,CAP/CC,QAO+C,oBAXzC,UAWyC,WAXzC,QAWyC,MAXzC,QAWyC,CAXzC,KAWyC,MAXzC,KAWyC,CAXzC,KAWyC,MAXzC,KAWyC,CAXzC,MAWyC,MAXzC,MAWyC,CAXzC,UAWyC,MAXzC,UAWyC,CADlDC,IACkD,0CACrD,kBAA+BE,KAAK,CAALA,MAAAA,CAC7B,GAAIC,CAAAA,QAAQ,CAAZ,KAAA,CADF,aACE,CAD6BD,CAA/B,CAAiBN,SAAjB,eAAQK,OAAR,CAGA,GAAM,CAAA,SAAN,CAAA,KAAA,CAAM,SAAN,CAAM,IAAN,CAAA,KAAA,CAAM,IAAN,CAAM,IAAN,CAAA,KAAA,CAAM,IAAN,CAA+BG,SAA/B,CAAA,KAAA,CAA+BA,SAA/B,CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B,GAAM,CAAA,IAAN,CAAA,KAAA,CAAM,IAAN,CAAM,IAAN,CAAA,KAAA,CAAM,IAAN,CAGeE,KAHf,CAAA,KAAA,CAGED,SAHF,CAGeC,KAHf,CAKAJ,QAAQ,CAARA,MAAAA,CAAAA,SAAAA,CAA2B,CACzBK,OAAO,CADkB,CAAA,CAEzBC,QAAQ,CAAE,IAFe,KAAA,CAGzBC,eAAe,CAAE,CAAA,IAAA,EAASZ,IAAI,GAAK,OAHV,CAA3BK,EAAAA,KAAAA,GANF,CAAA,CAaA,GAAMQ,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3BR,QAAQ,CAARA,MAAAA,CAAAA,SAAAA,CAA2B,CACzBK,OAAO,CADkB,aAAA,CAEzBC,QAAQ,CAAE,IAAMH,SAAS,CAFA,KAAA,CAGzBI,eAAe,CAAE,CAAA,IAAA,EAASZ,IAAI,GAAK,OAHV,CAA3BK,EAAAA,KAAAA,GADF,CAAA,CAQA,GAAMS,CAAAA,KAAK,CAAGV,KAAK,CAALA,QAAAA,CAAAA,KAAAA,CAAd,QAAcA,CAAd,CACA,GAAMW,CAAAA,QAAQ,CAAGX,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,QAAAA,CAA8BY,SAAAA,KAAD,QAC5C,CAAA,KAAK,CAAL,cAAA,CAAA,KAAA,GAA+BA,KAAK,CAApC,IAAA,CACKA,KAAK,CAAN,IAACA,CADL,WAAA,CADF,IAA8C,EAA7BZ,CAAjB,CAKA,GAAMa,CAAAA,WAAW,CAAGC,KAAK,CAACC,KAAK,CAALA,IAAAA,CAAAA,KAAAA,CAAND,KAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAApB,MAAoBA,EAApB,CAKA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CACE,KAAK,CAAE,CACL,CAAEE,YAAY,CAAd,SAAA,CAA2BtB,SAA3B,CAA2BA,SAA3B,CAAsCmB,WAAAA,CAAAA,WAAtC,CADK,CAELhB,QAAQ,GAARA,UAAAA,CAA0BoB,MAAM,CAAhCpB,QAAAA,CAFK,EAAA,CADT,KACS,CADT,CAME,KAAK,CAAEkB,KANT,CAAA,CAAA,IAAA,CAAA,CASE,KAAA,CAAA,aAAA,CAAA,wBAAA,CAAA,CACE,YAAY,CADd,CAAA,CAEE,QAAQ,CAAE,EAAEG,OAAO,EAFrB,WAEY,CAFZ,CAGE,WAAW,CAHb,WAAA,CAIE,OAAO,CAJT,OAAA,CAKE,SAAS,CAAEA,OAAO,EAAPA,WAAAA,CAAAA,aAAAA,CALb,SAAA,CAME,UAAU,CAAEA,OAAO,EAAPA,WAAAA,CAAAA,cAAAA,CANd,SAAA,CAOE,MAAM,CAPR,MAAA,CAQE,UAAU,CAAEC,UARd,CAAA,CAUE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAEF,MAAM,CAACG,cAApB,CAAA,CACGpB,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,QAAAA,CAA6B,SAAA,KAAA,CAAA,KAAA,QAC5B,CAAA,KAAK,CAAL,cAAA,CAAA,KAAA,EACI,KAAK,CAAL,YAAA,CAAA,KAAA,CAA0B,CACxBqB,KADwB,CACxBA,KADwB,CAExBX,KAFwB,CAExBA,KAFwB,CAGxBC,QAAAA,CAAAA,QAHwB,CAA1B,CADJ,CAtBV,KAqBsC,EAA7BX,CADH,CAVF,CATF,CADF,CAjDF,CAAA,CAsFAP,IAAI,CAAJA,OAAAA,CAAAA,WAAAA,CAEAA,IAAI,CAAJA,OAAAA,CAAAA,WAAAA,CAEAA,IAAI,CAAJA,KAAAA,CAAAA,SAAAA,CAEAA,IAAI,CAAJA,KAAAA,CAAAA,SAAAA,CAEA,GAAMwB,CAAAA,MAAM,CAAG,UAAU,CAAV,MAAA,CAAkB,CAC/BG,cAAc,CAAE,CACdE,QAAQ,CADM,CAAA,CAEdC,UAAU,CAAE,CAFE,CADe,CAK/BC,QAAQ,CAAE,CACR9B,SAAS,CADD,CAAA,CAER+B,WAAW,CAAE,CAFL,CALqB,CAAlB,CAAf,CAWA,cAAeC,CAAAA,SAAS,CAAxB,IAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport { white, black } from '../../styles/colors';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: never | number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `outlined` - Card with an outline.\n   */\n  mode?: 'elevated' | 'outlined';\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  mode: cardMode = 'elevated',\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: (OutlinedCardProps | ElevatedCardProps) & Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness } = theme;\n\n  const handlePressIn = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    Animated.timing(elevation, {\n      toValue: cardElevation,\n      duration: 150 * animation.scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const borderColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <Surface\n      style={[\n        { borderRadius: roundness, elevation, borderColor },\n        cardMode === 'outlined' ? styles.outlined : {},\n        style,\n      ]}\n      theme={theme}\n      {...rest}\n    >\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress || onLongPress ? handlePressIn : undefined}\n        onPressOut={onPress || onLongPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]},"metadata":{},"sourceType":"module"}