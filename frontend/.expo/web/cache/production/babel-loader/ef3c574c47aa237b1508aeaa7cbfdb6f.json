{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import React,{useState}from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import{failedMovieMoreInfo,requestHelper}from\"../helpers/Functions\";import serverURL from\"../helpers/URL\";import Popup from\"./Popup\";import MovieImage from\"./MovieImage\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var MovieTile=function MovieTile(_ref){var movie=_ref.movie,shouldShowLoading=_ref.shouldShowLoading;var _useState=useState({}),_useState2=_slicedToArray(_useState,2),moreInfo=_useState2[0],setMoreInfo=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),modalVisible=_useState4[0],setModalVisible=_useState4[1];var ShowMoreInfo=function ShowMoreInfo(){var bodyData,reqData,response,obj;return _regeneratorRuntime.async(function ShowMoreInfo$(_context){while(1){switch(_context.prev=_context.next){case 0:bodyData={\"title\":movie.imdbID};reqData=requestHelper(JSON.stringify(bodyData));console.log(reqData);if(!(reqData=={})){_context.next=6;break;}console.log(\"reqData empty\");return _context.abrupt(\"return\");case 6:_context.prev=6;_context.next=9;return _regeneratorRuntime.awrap(fetch(serverURL+'/movie/more_info',reqData));case 9:response=_context.sent;_context.next=12;return _regeneratorRuntime.awrap(response.json());case 12:obj=_context.sent;console.log(obj);setMoreInfo(obj);_context.next=21;break;case 17:_context.prev=17;_context.t0=_context[\"catch\"](6);setMoreInfo(failedMovieMoreInfo(movie));console.log(_context.t0);case 21:case\"end\":return _context.stop();}}},null,null,[[6,17]],Promise);};return _jsxs(View,{style:styles.outer,children:[_jsx(Popup,{moreInfo:moreInfo,modalVisible:modalVisible,updateModal:function updateModal(){setModalVisible(!modalVisible);}}),_jsx(TouchableOpacity,{style:styles.buttonContainer,activeOpacity:0.2,onPress:function onPress(){ShowMoreInfo();setModalVisible(true);},children:_jsx(View,{style:styles.container,children:_jsx(MovieImage,{movie:movie,extraStyle:styles.container,shouldShowLoading:shouldShowLoading})})})]});};var styles=StyleSheet.create({outer:{flex:1,alignItems:'center',padding:10},container:{borderRadius:10,width:120,height:120,alignItems:'center',overflow:'hidden'},titleText:{textAlign:'center',color:\"#fff\",position:'absolute',bottom:5,fontSize:10,fontWeight:'bold',textShadowColor:\"#000\",textShadowOffset:{width:-1,height:1},textShadowRadius:1},titleContainer:{alignItems:'center',textAlign:'center'},buttonContainer:{alignItems:'center'}});export default MovieTile;","map":{"version":3,"sources":["/home/ndonfris/Projects/ts-movie-list-frontend/frontend/components/MovieTile.tsx"],"names":["React","useState","failedMovieMoreInfo","requestHelper","serverURL","Popup","MovieImage","MovieTile","movie","shouldShowLoading","moreInfo","setMoreInfo","modalVisible","setModalVisible","ShowMoreInfo","bodyData","imdbID","reqData","JSON","stringify","console","log","fetch","response","json","obj","styles","outer","buttonContainer","container","StyleSheet","create","flex","alignItems","padding","borderRadius","width","height","overflow","titleText","textAlign","color","position","bottom","fontSize","fontWeight","textShadowColor","textShadowOffset","textShadowRadius","titleContainer"],"mappings":"6HAKA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,C,mMAGA,OAAQC,mBAAR,CAA6BC,aAA7B,4BACA,MAAOC,CAAAA,SAAP,sBACA,MAAOC,CAAAA,KAAP,eAEA,MAAOC,CAAAA,UAAP,oB,wFAiBA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAAuC,IAArCC,CAAAA,KAAqC,MAArCA,KAAqC,CAA9BC,iBAA8B,MAA9BA,iBAA8B,CAErD,cAAgCR,QAAQ,CAAgB,EAAhB,CAAxC,wCAAOS,QAAP,eAAiBC,WAAjB,eAGA,eAAwCV,QAAQ,CAAC,KAAD,CAAhD,yCAAOW,YAAP,eAAqBC,eAArB,eAUA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,2JACXC,QADW,CACiB,CAC9B,QAASP,KAAK,CAACQ,MADe,CADjB,CAIXC,OAJW,CAIDd,aAAa,CAACe,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAAD,CAJZ,CAKjBK,OAAO,CAACC,GAAR,CAAYJ,OAAZ,EALiB,KAMbA,OAAO,EAAI,EANE,0BAObG,OAAO,CAACC,GAAR,CAAY,eAAZ,EAPa,yGAWUC,KAAK,CAAClB,SAAS,CAAG,kBAAb,CAAiCa,OAAjC,CAXf,SAWPM,QAXO,iEAYKA,QAAQ,CAACC,IAAT,EAZL,UAYPC,GAZO,eAabL,OAAO,CAACC,GAAR,CAAYI,GAAZ,EACAd,WAAW,CAACc,GAAD,CAAX,CAda,iFAgBbd,WAAW,CAACT,mBAAmB,CAACM,KAAD,CAApB,CAAX,CACAY,OAAO,CAACC,GAAR,cAjBa,0EAArB,CAqBA,MACI,OAAC,IAAD,EAAM,KAAK,CAAEK,MAAM,CAACC,KAApB,WACI,KAAC,KAAD,EAAO,QAAQ,CAAEjB,QAAjB,CAA2B,YAAY,CAAEE,YAAzC,CAAuD,WAAW,CAAE,sBAAM,CAAEC,eAAe,CAAC,CAACD,YAAF,CAAf,CAAgC,CAA5G,EADJ,CAEI,KAAC,gBAAD,EACI,KAAK,CAAEc,MAAM,CAACE,eADlB,CAEI,aAAa,CAAE,GAFnB,CAGI,OAAO,CAAE,kBAAM,CACXd,YAAY,GACZD,eAAe,CAAC,IAAD,CAAf,CACH,CANL,UAOI,KAAC,IAAD,EAAM,KAAK,CAAEa,MAAM,CAACG,SAApB,UACI,KAAC,UAAD,EAAY,KAAK,CAAErB,KAAnB,CAA0B,UAAU,CAAEkB,MAAM,CAACG,SAA7C,CAAwD,iBAAiB,CAAEpB,iBAA3E,EADJ,EAPJ,EAFJ,GADJ,CAgBH,CApDD,CAuDA,GAAMiB,CAAAA,MAAM,CAAGI,UAAU,CAACC,MAAX,CAAkB,CAC7BJ,KAAK,CAAE,CACHK,IAAI,CAAE,CADH,CAEHC,UAAU,CAAE,QAFT,CAGHC,OAAO,CAAE,EAHN,CADsB,CAM7BL,SAAS,CAAE,CACPM,YAAY,CAAE,EADP,CAEPC,KAAK,CAAE,GAFA,CAGPC,MAAM,CAAE,GAHD,CAIPJ,UAAU,CAAE,QAJL,CAKPK,QAAQ,CAAE,QALH,CANkB,CAa7BC,SAAS,CAAE,CACPC,SAAS,CAAE,QADJ,CAEPC,KAAK,CAAE,MAFA,CAGPC,QAAQ,CAAE,UAHH,CAIPC,MAAM,CAAE,CAJD,CAKPC,QAAQ,CAAE,EALH,CAMPC,UAAU,CAAE,MANL,CAOPC,eAAe,CAAE,MAPV,CAQPC,gBAAgB,CAAE,CACdX,KAAK,CAAE,CAAC,CADM,CAEdC,MAAM,CAAE,CAFM,CARX,CAYPW,gBAAgB,CAAE,CAZX,CAbkB,CA2B7BC,cAAc,CAAE,CACZhB,UAAU,CAAE,QADA,CAEZO,SAAS,CAAE,QAFC,CA3Ba,CA+B7BZ,eAAe,CAAE,CACbK,UAAU,CAAE,QADC,CA/BY,CAAlB,CAAf,CAoCA,cAAe1B,CAAAA,SAAf","sourcesContent":["/**\n * File:        MovieTile.tsx\n * Author:      Nick Donfris\n * Created:     01/24/22\n */\nimport React, {useState} from 'react';\nimport {StyleSheet, View, TouchableOpacity} from 'react-native';\nimport {Movie, MovieMoreInfo, reqBody} from '../helpers/Interfaces';\nimport {failedMovieMoreInfo, requestHelper} from '../helpers/Functions';\nimport serverURL from '../helpers/URL';\nimport Popup from './Popup';\nimport LoadingImage from './LoadingImage';\nimport MovieImage from './MovieImage';\n//import colors from '../helpers/Colors';\n\n\n\n/* single movie from typically from a movieArray */\ninterface Props {\n    movie: Movie;\n    shouldShowLoading ?: boolean;\n}\n\n/**\n * A MovieTile, which is a clickable component, which can render more information about the MovieTile\n *\n * @param {Movie} movie - the Movie interface which contains strings that correlate to the necessary details for a movie\n * @returns {JSX.Element} - the tile shown for a Movie, and the set of states that are coupled to rendering more information about a tile. \n */\nconst MovieTile = ({movie, shouldShowLoading}: Props) => {\n    /* the information retrieved from the api call onClick of MovieTile */\n    const [moreInfo, setMoreInfo] = useState<MovieMoreInfo>({} as MovieMoreInfo);\n\n    /* boolean that determines if the moreInfo modal visible */\n    const [modalVisible, setModalVisible] = useState(false);\n\n    /**\n     * @async Function that is called when a movieTile is selected. \n     *        Returns a unresolved promise. Sets the moreInfo on successful\n     *        api call.\n     *        \n     * @returns {Promise<void>} - instead of returning the objects, it sets them\n     *                            and makes use of global variables.\n     */\n    const ShowMoreInfo = async () : Promise<void> => {\n        const bodyData: reqBody<string> = {\n            \"title\": movie.imdbID\n        };\n        const reqData = requestHelper(JSON.stringify(bodyData));\n        console.log(reqData);\n        if (reqData == {}) {\n            console.log(\"reqData empty\");\n            return;\n        }\n        try {\n            const response = await fetch(serverURL + '/movie/more_info', reqData);\n            const obj = await response.json();\n            console.log(obj);\n            setMoreInfo(obj);\n        } catch (e) {\n            setMoreInfo(failedMovieMoreInfo(movie));\n            console.log(e);\n        }\n    }\n\n    return (\n        <View style={styles.outer}>\n            <Popup moreInfo={moreInfo} modalVisible={modalVisible} updateModal={() => { setModalVisible(!modalVisible) }} />\n            <TouchableOpacity\n                style={styles.buttonContainer}\n                activeOpacity={0.2}\n                onPress={() => {\n                    ShowMoreInfo();\n                    setModalVisible(true);\n                }}>\n                <View style={styles.container}>\n                    <MovieImage movie={movie} extraStyle={styles.container} shouldShowLoading={shouldShowLoading}/>\n                </View>\n            </TouchableOpacity> \n        </View>\n    );\n}\n\n\nconst styles = StyleSheet.create({\n    outer: {\n        flex: 1,\n        alignItems: 'center',\n        padding: 10,\n    },\n    container: {\n        borderRadius: 10,\n        width: 120,\n        height: 120,\n        alignItems: 'center',\n        overflow: 'hidden',\n    },\n    titleText: {\n        textAlign: 'center',\n        color: \"#fff\",\n        position: 'absolute',\n        bottom: 5,\n        fontSize: 10,\n        fontWeight: 'bold',\n        textShadowColor: \"#000\",\n        textShadowOffset: {\n            width: -1,\n            height: 1 \n        },\n        textShadowRadius: 1,\n    },\n    titleContainer: {\n        alignItems: 'center',\n        textAlign: 'center',\n    },\n    buttonContainer: {\n        alignItems: 'center',\n    }\n});\n\nexport default MovieTile;\n"]},"metadata":{},"sourceType":"module"}