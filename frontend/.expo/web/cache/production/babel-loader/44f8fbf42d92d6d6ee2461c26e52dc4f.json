{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import React,{memo,useCallback,useMemo}from'react';import View from\"react-native-web/dist/exports/View\";import Text from\"react-native-web/dist/exports/Text\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import{RTL_DIRECTION,RTL_STYLE}from\"../constants\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function RenderBadge(_ref){var rtl=_ref.rtl,label=_ref.label,value=_ref.value,textStyle=_ref.textStyle,badgeStyle=_ref.badgeStyle,badgeTextStyle=_ref.badgeTextStyle,badgeDotStyle=_ref.badgeDotStyle,getBadgeColor=_ref.getBadgeColor,getBadgeDotColor=_ref.getBadgeDotColor,showBadgeDot=_ref.showBadgeDot,onPress=_ref.onPress,THEME=_ref.THEME;var __onPress=useCallback(function(){return onPress(value);},[onPress,value]);var _badgeStyle=useMemo(function(){return[RTL_DIRECTION(rtl,THEME.badgeStyle)].concat(_toConsumableArray([badgeStyle].flat()),[{backgroundColor:getBadgeColor(value)}]);},[THEME,rtl,badgeStyle,getBadgeColor]);var _badgeDotStyle=useMemo(function(){return[RTL_STYLE(rtl,THEME.badgeDotStyle)].concat(_toConsumableArray([badgeDotStyle].flat()),[{backgroundColor:getBadgeDotColor(value)}]);},[THEME,rtl,badgeDotStyle,getBadgeDotColor]);var _badgeTextStyle=useMemo(function(){return[].concat(_toConsumableArray([textStyle].flat()),_toConsumableArray([badgeTextStyle].flat()));},[textStyle,badgeTextStyle]);return _jsxs(TouchableOpacity,{style:_badgeStyle,onPress:__onPress,children:[showBadgeDot&&_jsx(View,{style:_badgeDotStyle}),_jsx(Text,{style:_badgeTextStyle,children:label})]});}var areEqual=function areEqual(nextProps,prevProps){if(nextProps.label!==prevProps.label)return false;if(nextProps.value!==prevProps.value)return false;if(nextProps.showBadgeDot!==prevProps.showBadgeDot)return false;if(nextProps.rtl!==prevProps.rtl)return false;if(nextProps.theme!==prevProps.theme)return false;return true;};export default memo(RenderBadge,areEqual);","map":{"version":3,"sources":["/home/ndonfris/Projects/ts-movie-list-frontend/frontend/node_modules/react-native-dropdown-picker/src/components/RenderBadgeItem.js"],"names":["React","memo","useCallback","useMemo","RTL_DIRECTION","RTL_STYLE","RenderBadge","rtl","label","value","textStyle","badgeStyle","badgeTextStyle","badgeDotStyle","getBadgeColor","getBadgeDotColor","showBadgeDot","onPress","THEME","__onPress","_badgeStyle","flat","backgroundColor","_badgeDotStyle","_badgeTextStyle","areEqual","nextProps","prevProps","theme"],"mappings":"yEAAA,MAAOA,CAAAA,KAAP,EACIC,IADJ,CACUC,WADV,CACuBC,OADvB,KAEO,OAFP,C,uLAUA,OAASC,aAAT,CAAwBC,SAAxB,oB,wFAEA,QAASC,CAAAA,WAAT,MAaG,IAZCC,CAAAA,GAYD,MAZCA,GAYD,CAXCC,KAWD,MAXCA,KAWD,CAVCC,KAUD,MAVCA,KAUD,CATCC,SASD,MATCA,SASD,CARCC,UAQD,MARCA,UAQD,CAPCC,cAOD,MAPCA,cAOD,CANCC,aAMD,MANCA,aAMD,CALCC,aAKD,MALCA,aAKD,CAJCC,gBAID,MAJCA,gBAID,CAHCC,YAGD,MAHCA,YAGD,CAFCC,OAED,MAFCA,OAED,CADCC,KACD,MADCA,KACD,CAIC,GAAMC,CAAAA,SAAS,CAAGjB,WAAW,CAAC,iBAAMe,CAAAA,OAAO,CAACR,KAAD,CAAb,EAAD,CAAuB,CAACQ,OAAD,CAAUR,KAAV,CAAvB,CAA7B,CAMA,GAAMW,CAAAA,WAAW,CAAGjB,OAAO,CAAC,kBACxBC,aAAa,CAACG,GAAD,CAAMW,KAAK,CAACP,UAAZ,CADW,4BAErB,CAACA,UAAD,EAAaU,IAAb,EAFqB,GAEA,CACpBC,eAAe,CAAER,aAAa,CAACL,KAAD,CADV,CAFA,IAAD,CAKvB,CAACS,KAAD,CAAQX,GAAR,CAAaI,UAAb,CAAyBG,aAAzB,CALuB,CAA3B,CAWA,GAAMS,CAAAA,cAAc,CAAGpB,OAAO,CAAC,kBAC3BE,SAAS,CAACE,GAAD,CAAMW,KAAK,CAACL,aAAZ,CADkB,4BAExB,CAACA,aAAD,EAAgBQ,IAAhB,EAFwB,GAEA,CACvBC,eAAe,CAAEP,gBAAgB,CAACN,KAAD,CADV,CAFA,IAAD,CAK1B,CAACS,KAAD,CAAQX,GAAR,CAAaM,aAAb,CAA4BE,gBAA5B,CAL0B,CAA9B,CAWA,GAAMS,CAAAA,eAAe,CAAGrB,OAAO,CAAC,8CACzB,CAACO,SAAD,EAAYW,IAAZ,EADyB,qBAEzB,CAACT,cAAD,EAAiBS,IAAjB,EAFyB,IAAD,CAG3B,CAACX,SAAD,CAAYE,cAAZ,CAH2B,CAA/B,CAKA,MACI,OAAC,gBAAD,EAAkB,KAAK,CAAEQ,WAAzB,CAAsC,OAAO,CAAED,SAA/C,WACKH,YAAY,EAAI,KAAC,IAAD,EAAM,KAAK,CAAEO,cAAb,EADrB,CAEI,KAAC,IAAD,EAAM,KAAK,CAAEC,eAAb,UAA+BhB,KAA/B,EAFJ,GADJ,CAMH,CAED,GAAMiB,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,SAAD,CAAYC,SAAZ,CAA0B,CACvC,GAAID,SAAS,CAAClB,KAAV,GAAoBmB,SAAS,CAACnB,KAAlC,CACI,MAAO,MAAP,CACJ,GAAIkB,SAAS,CAACjB,KAAV,GAAoBkB,SAAS,CAAClB,KAAlC,CACI,MAAO,MAAP,CACJ,GAAIiB,SAAS,CAACV,YAAV,GAA2BW,SAAS,CAACX,YAAzC,CACI,MAAO,MAAP,CACJ,GAAIU,SAAS,CAACnB,GAAV,GAAkBoB,SAAS,CAACpB,GAAhC,CACI,MAAO,MAAP,CACJ,GAAImB,SAAS,CAACE,KAAV,GAAoBD,SAAS,CAACC,KAAlC,CACI,MAAO,MAAP,CAEJ,MAAO,KAAP,CACH,CAbD,CAeA,cAAe3B,CAAAA,IAAI,CAACK,WAAD,CAAcmB,QAAd,CAAnB","sourcesContent":["import React, {\n    memo, useCallback, useMemo\n} from 'react';\n\nimport {\n    View,\n    Text,\n    TouchableOpacity\n} from 'react-native';\n\nimport { RTL_DIRECTION, RTL_STYLE } from '../constants';\n\nfunction RenderBadge({\n    rtl,\n    label,\n    value,\n    textStyle,\n    badgeStyle,\n    badgeTextStyle,\n    badgeDotStyle,\n    getBadgeColor,\n    getBadgeDotColor,\n    showBadgeDot,\n    onPress,\n    THEME\n}) {\n    /**\n     * onPress.\n     */\n    const __onPress = useCallback(() => onPress(value), [onPress, value]);\n\n    /**\n     * The badge style.\n     * @returns {object}\n     */\n    const _badgeStyle = useMemo(() => ([\n        RTL_DIRECTION(rtl, THEME.badgeStyle),\n        ...[badgeStyle].flat(), {\n            backgroundColor: getBadgeColor(value)\n        }\n    ]), [THEME, rtl, badgeStyle, getBadgeColor]);\n\n    /**\n     * The badge dot style.\n     * @return {object}\n     */\n    const _badgeDotStyle = useMemo(() => ([\n        RTL_STYLE(rtl, THEME.badgeDotStyle),\n        ...[badgeDotStyle].flat(), {\n            backgroundColor: getBadgeDotColor(value)\n        }\n    ]), [THEME, rtl, badgeDotStyle, getBadgeDotColor]);\n\n    /**\n     * The badge text style.\n     * @returns {object}\n     */\n    const _badgeTextStyle = useMemo(() => ([\n        ...[textStyle].flat(),\n        ...[badgeTextStyle].flat()\n    ]), [textStyle, badgeTextStyle]);\n\n    return (\n        <TouchableOpacity style={_badgeStyle} onPress={__onPress}>\n            {showBadgeDot && <View style={_badgeDotStyle} />}\n            <Text style={_badgeTextStyle}>{label}</Text>\n        </TouchableOpacity>\n    );\n}\n\nconst areEqual = (nextProps, prevProps) => {\n    if (nextProps.label !== prevProps.label)\n        return false;\n    if (nextProps.value !== prevProps.value)\n        return false;\n    if (nextProps.showBadgeDot !== prevProps.showBadgeDot)\n        return false;\n    if (nextProps.rtl !== prevProps.rtl)\n        return false;\n    if (nextProps.theme !== prevProps.theme)\n        return false;\n\n    return true;\n}\n\nexport default memo(RenderBadge, areEqual);"]},"metadata":{},"sourceType":"module"}