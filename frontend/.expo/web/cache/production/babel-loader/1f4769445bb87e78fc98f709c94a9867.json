{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import React,{useState}from'react';import Keyboard from\"react-native-web/dist/exports/Keyboard\";import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import SearchBar from\"../components/SearchBar\";import MovieList from\"../components/MovieList\";import{HitSearchKey,requestHelper,setFirstMovieResults,SimulateSearch}from\"../helpers/Functions\";import serverURL from\"../helpers/URL\";import Movies from\"../assets/Top250MoviesShort.json\";import colors from\"../helpers/Colors\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function SearchRoute(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),query=_useState2[0],setQuery=_useState2[1];var _useState3=useState(setFirstMovieResults(Movies)),_useState4=_slicedToArray(_useState3,2),movieResults=_useState4[0],setMovieResults=_useState4[1];var handleSearch=function handleSearch(){var strippedQuery;return _regeneratorRuntime.async(function handleSearch$(_context){while(1){switch(_context.prev=_context.next){case 0:Keyboard.dismiss();strippedQuery=query.trim();if(!(strippedQuery==\"\")){_context.next=4;break;}return _context.abrupt(\"return\");case 4:HitSearchKey();SimulateSearch();searchQuery(strippedQuery);return _context.abrupt(\"return\",movieResults);case 8:case\"end\":return _context.stop();}}},null,null,null,Promise);};var searchQuery=function searchQuery(strippedQuery){var bodyData,reqData,response,body;return _regeneratorRuntime.async(function searchQuery$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:bodyData={\"title\":strippedQuery};reqData=requestHelper(JSON.stringify(bodyData));_context2.prev=2;_context2.next=5;return _regeneratorRuntime.awrap(fetch(serverURL+\"/search/title\",reqData));case 5:response=_context2.sent;_context2.next=8;return _regeneratorRuntime.awrap(response.json());case 8:body=_context2.sent;console.log(body.Search);setMovieResults(body.Search);_context2.next=17;break;case 13:_context2.prev=13;_context2.t0=_context2[\"catch\"](2);console.log(_context2.t0);throw new Error(_context2.t0);case 17:case\"end\":return _context2.stop();}}},null,null,[[2,13]],Promise);};return _jsxs(View,{style:styles.container,children:[_jsx(SearchBar,{placeholder:\"Search for a movie...\",query:query,updateQuery:function updateQuery(text){return setQuery(text);},searchFunction:function searchFunction(){handleSearch();}}),_jsx(View,{style:styles.results,children:_jsx(MovieList,{movieArray:movieResults})})]});}var styles=StyleSheet.create({container:{flex:1,backgroundColor:colors.black},results:{paddingTop:0,height:'82%'}});","map":{"version":3,"sources":["/home/ndonfris/Projects/ts-movie-list-frontend/frontend/routes/SearchRoute.tsx"],"names":["React","useState","SearchBar","MovieList","HitSearchKey","requestHelper","setFirstMovieResults","SimulateSearch","serverURL","Movies","colors","SearchRoute","query","setQuery","movieResults","setMovieResults","handleSearch","Keyboard","dismiss","strippedQuery","trim","searchQuery","bodyData","reqData","JSON","stringify","fetch","response","json","body","console","log","Search","Error","styles","container","text","results","StyleSheet","create","flex","backgroundColor","black","paddingTop","height"],"mappings":"6HAKA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,C,mLAEA,MAAOC,CAAAA,SAAP,+BACA,MAAOC,CAAAA,SAAP,+BACA,OAAuBC,YAAvB,CAAqCC,aAArC,CAAoDC,oBAApD,CAA0EC,cAA1E,4BAEA,MAAOC,CAAAA,SAAP,sBACA,MAAOC,CAAAA,MAAP,wCACA,MAAOC,CAAAA,MAAP,yB,wFAQA,cAAe,SAASC,CAAAA,WAAT,EAAuB,CAElC,cAA0BV,QAAQ,CAAC,EAAD,CAAlC,wCAAOW,KAAP,eAAcC,QAAd,eAGA,eAAwCZ,QAAQ,CAAUK,oBAAoB,CAACG,MAAD,CAA9B,CAAhD,yCAAOK,YAAP,eAAqBC,eAArB,eAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,2IACjBC,QAAQ,CAACC,OAAT,GACIC,aAFa,CAEGP,KAAK,CAACQ,IAAN,EAFH,MAGbD,aAAa,EAAI,EAHJ,kEAMjBf,YAAY,GACZG,cAAc,GACdc,WAAW,CAACF,aAAD,CAAX,CARiB,gCASVL,YATU,uEAArB,CAkBA,GAAMO,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAOF,aAAP,6JACZG,QADY,CACD,CAAE,QAASH,aAAX,CADC,CAEZI,OAFY,CAEFlB,aAAa,CAACmB,IAAI,CAACC,SAAL,CAAeH,QAAf,CAAD,CAFX,oEAIWI,KAAK,CAAClB,SAAS,CAAC,eAAX,CAA4Be,OAA5B,CAJhB,SAINI,QAJM,kEAKOA,QAAQ,CAACC,IAAT,EALP,SAKNC,IALM,gBAMZC,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,MAAjB,EACAjB,eAAe,CAACc,IAAI,CAACG,MAAN,CAAf,CAPY,qFASZF,OAAO,CAACC,GAAR,eATY,KAUN,IAAIE,CAAAA,KAAJ,cAVM,4EAApB,CAcA,MACI,OAAC,IAAD,EAAM,KAAK,CAAEC,MAAM,CAACC,SAApB,WACI,KAAC,SAAD,EACI,WAAW,CAAC,uBADhB,CAEI,KAAK,CAAEvB,KAFX,CAGI,WAAW,CAAE,qBAAAwB,IAAI,QAAIvB,CAAAA,QAAQ,CAACuB,IAAD,CAAZ,EAHrB,CAII,cAAc,CAAE,yBAAM,CAClBpB,YAAY,GACf,CANL,EADJ,CASI,KAAC,IAAD,EAAM,KAAK,CAAEkB,MAAM,CAACG,OAApB,UACI,KAAC,SAAD,EAAW,UAAU,CAAEvB,YAAvB,EADJ,EATJ,GADJ,CAeH,CAGD,GAAMoB,CAAAA,MAAM,CAAGI,UAAU,CAACC,MAAX,CAAkB,CAC7BJ,SAAS,CAAE,CACPK,IAAI,CAAE,CADC,CAEPC,eAAe,CAAE/B,MAAM,CAACgC,KAFjB,CADkB,CAK7BL,OAAO,CAAE,CACLM,UAAU,CAAE,CADP,CAELC,MAAM,CAAE,KAFH,CALoB,CAAlB,CAAf","sourcesContent":["/**\n * File:        SearchRoute.tsx\n * Author:      Nick Donfris\n * Created:     01/24/22\n */\nimport React, {useState} from 'react';\nimport {Keyboard, View, StyleSheet} from 'react-native';\nimport SearchBar from '../components/SearchBar';\nimport MovieList from '../components/MovieList';\nimport {createRequest, HitSearchKey, requestHelper, setFirstMovieResults, SimulateSearch} from '../helpers/Functions';\nimport {Movie, reqBody} from '../helpers/Interfaces';\nimport serverURL from '../helpers/URL';\nimport Movies from '../assets/Top250MoviesShort.json';\nimport colors from '../helpers/Colors';\n\n/*\n * Creates the SearchRoute page. Imports the static file Top250Movies.json, which \n * is just used for pre-query info.\n *\n * @returns {JSX.Element} Search Page rendered by clicking on the bottom bar.\n */\nexport default function SearchRoute() {\n    /* the text that is inputed to the SearchBar component */\n    const [query, setQuery] = useState('');\n\n    /* the list of movies currently rendered on screen as results */\n    const [movieResults, setMovieResults] = useState<Movie[]>(setFirstMovieResults(Movies));\n\n    const handleSearch = async () : Promise<Movie[]> => {\n        Keyboard.dismiss();\n        let strippedQuery = query.trim();\n        if (strippedQuery == \"\") {\n            return;\n        }\n        HitSearchKey();\n        SimulateSearch();\n        searchQuery(strippedQuery);\n        return movieResults;\n    }\n\n    /**\n     * @async searchQuery - uses the query, changed in the SearchBar component. \n     *\n     * @throws {Error} - Typically thrown if server is not connected/running\n     * @returns {Promise<void>} - Array of Movies, found from query\n     */\n    const searchQuery = async (strippedQuery: string) => {\n        let bodyData = { \"title\": strippedQuery };\n        let reqData = requestHelper(JSON.stringify(bodyData));\n        try {\n            const response = await fetch(serverURL+\"/search/title\", reqData);\n            const body = await response.json();\n            console.log(body.Search);\n            setMovieResults(body.Search);\n        } catch (e) {\n            console.log(e);\n            throw new Error(e);\n        }\n    };\n\n    return (\n        <View style={styles.container}>\n            <SearchBar\n                placeholder=\"Search for a movie...\"\n                query={query}\n                updateQuery={text => setQuery(text)} \n                searchFunction={() => {\n                    handleSearch();\n                }}\n            />\n            <View style={styles.results}>\n                <MovieList movieArray={movieResults} />\n            </View>\n        </View>\n    )\n}\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: colors.black,\n    },\n    results: {\n        paddingTop: 0,\n        height: '82%',\n    }\n\n});\n\n"]},"metadata":{},"sourceType":"module"}