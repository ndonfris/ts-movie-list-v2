{"ast":null,"code":"import MovieTileObj from\"./MovieTileObj\";export function requestHelper(bodyData){console.log(\"requestHelper got:\\n\"+bodyData);return{method:'POST',mode:'no-cors',headers:{Accept:'application/json','Content-Type':'application/json'},body:JSON.stringify({bodyData:bodyData})};}export function createRequest(request){return{method:request.method,mode:request.mode,headers:{Accept:request.headers.accept,'Content-Type':'application/json'},body:JSON.stringify({\"title\":request.body})};}export function createRequestBody(keyString,valueString){return{method:'POST',mode:'no-cors',headers:{Accept:'application/json','Content-Type':'application/json'},body:JSON.stringify({\"Genre\":valueString})};}export function failedMovieMoreInfo(found){return{Title:found.Title,Year:found.Year,Rated:\"N/a\",Released:found.Year,Runtime:\"N/a\",Genre:\"N/a\",Director:\"N/a\",Writer:\"N/a\",Actors:\"N/a\",Plot:\"Oops, it looks like there was an error retrieving more info about the \"+found.Type+\", \"+found.Title+\".\",Language:\"N/a\",Country:\"N/a\",Awards:\"N/a\",Poster:found.Poster,Ratings:[{Source:\"N/a\",Value:\"N/a\"},{Source:\"N/a\",Value:\"N/a\"}],Metascore:\"N/a\",imdbRating:\"N/a\",imdbVotes:\"N/a\",imdbID:found.imdbID,Type:found.Type,DVD:\"N/a\",BoxOffice:\"N/a\",Production:\"N/a\",Website:\"N/a\",Response:\"N/a\"};}export function getRandomNumber(min,max){return Math.floor(Math.random()*(max-min+1)+min);}export function noStreamingSites(imdbID){return[{id:imdbID,icon:\"\",name:\"Not Found\",url:\"\",display_name:\"n/a\",country:[{itemNumber:0,location:\"\"}]}];}export function HitSearchKey(){return[];}export function SimulateSearch(){var amount=getRandomNumber(1,5);var movies=[];for(var i=0;i<amount;i++){movies.push(new MovieTileObj());}return movies;}export function getBadRatings(){return[{Source:\"N/a\",Value:\"N/a\"}];}export function setFirstMovieResults(movieArray){var rand=getRandomNumber(0,4);var start=rand*50;var end=start+50;var newArr=movieArray.slice(start,end);var shuffled=newArr.map(function(value){return{value:value,sort:Math.random};}).sort(function(){return Math.random()-0.5;}).map(function(_ref){var value=_ref.value;return value;});return shuffled;}","map":{"version":3,"sources":["/home/ndonfris/Projects/ts-movie-list-frontend/frontend/helpers/Functions.tsx"],"names":["MovieTileObj","requestHelper","bodyData","console","log","method","mode","headers","Accept","body","JSON","stringify","createRequest","request","accept","createRequestBody","keyString","valueString","failedMovieMoreInfo","found","Title","Year","Rated","Released","Runtime","Genre","Director","Writer","Actors","Plot","Type","Language","Country","Awards","Poster","Ratings","Source","Value","Metascore","imdbRating","imdbVotes","imdbID","DVD","BoxOffice","Production","Website","Response","getRandomNumber","min","max","Math","floor","random","noStreamingSites","id","icon","name","url","display_name","country","itemNumber","location","HitSearchKey","SimulateSearch","amount","movies","i","push","getBadRatings","setFirstMovieResults","movieArray","rand","start","end","newArr","slice","shuffled","map","value","sort"],"mappings":"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","sourcesContent":["/**\n * File:        Functions.tsx\n * Author:      Nick Donfris\n * Created:     02/06/22\n * Description: This file exports functions used throughout the entire \n * frontend of this application. These functions are typically used to\n * help simplify the readability of the components in the application. \n * Building the json needed to send a request to  the backend, and defining\n * what a default state should contain for an Interface, are some examples\n * of what I decided to include here.\n */\n\nimport {PostRequest, Movie, MovieMoreInfo, StreamWebsite, addRequestBody, reqBody, Rating} from './Interfaces';\nimport MovieTileObj from './MovieTileObj';\n\n/**\n * requestHelper(bodyString) - this function is similiar to createRequest. However, instead\n *                             of passing in the entire Interface of options, only the string \n *                             used in the body (as a value for the key \"title\"), is\n *                             passed in. \n *\n * @param {string} bodyString - the string of the post request to call to the backend.\n * @returns {RequestInit} - defines a request to send to a backend URI,\n *                          with this request having the request method, headers, mode\n *                          defined. Also sets the body set to the key \"title\"\n */\nexport function requestHelper(bodyData: string): RequestInit {\n    console.log(\"requestHelper got:\\n\" + bodyData);\n    return {\n        method: 'POST',\n        mode: 'no-cors',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ bodyData })\n    };\n}\n\n/**\n * createRequest(PostRequest) - Returns part of a Request with all of the \n *                              fields defined in the parameter passed in.\n *\n * @param {PostRequest} request - interface containing a method, more, headers,\n *\n * @returns {RequestInit} - the Request to send the back (without the URI),\n *                          with the fields set to their defined values in the\n *                          request parameter \n */\nexport function createRequest(request: PostRequest): RequestInit {\n    return {\n        method: request.method,\n        mode: request.mode,\n        headers: {\n            Accept: request.headers.accept,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\"title\": request.body})\n    }\n}\n\n/**\n * createRequestBody(PostRequest) - Returns part of a Request with all of the \n *                                  fields pre-defined and the body matching the\n *                                  key value pair.\n *\n * @param {string} keyString -  the key for the bodyString\n * @param {string} valueString -  the value for the bodyString\n * @returns {RequestInit} - defines a request to send to a backend URI,\n *                          with this request having the request method, headers, mode\n *                          defined. Also sets the body set to the key \"title\"\n */\nexport function createRequestBody(keyString: string, valueString: string): RequestInit {\n    return {\n        method: 'POST',\n        mode: 'no-cors',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\"Genre\": valueString}),\n    }\n}\n\n\n/**\n * This function is called when a movie is expected to show more info, but \n * the call to the backend failed. \n *\n * @param {Movie} found - the Movie interface that was found from the search screen\n *                        \n * @returns {MovieMoreInfo} - A object, with all availible fields from the Movie\n *                            inserted to the MovieMoreInfo interface.\n */\nexport function failedMovieMoreInfo(found: Movie) : MovieMoreInfo{\n    return {\n        Title: found.Title,\n        Year: found.Year,\n        Rated: \"N/a\",\n        Released: found.Year,\n        Runtime: \"N/a\",\n        Genre: \"N/a\",\n        Director: \"N/a\",\n        Writer: \"N/a\",\n        Actors: \"N/a\",\n        Plot: \"Oops, it looks like there was an error retrieving more info about the \" + found.Type + \", \" + found.Title + \".\",\n        Language: \"N/a\",\n        Country: \"N/a\",\n        Awards: \"N/a\",\n        Poster: found.Poster,\n        Ratings: [{Source: \"N/a\", Value: \"N/a\"}, {Source: \"N/a\", Value: \"N/a\"}],\n        Metascore: \"N/a\",\n        imdbRating: \"N/a\",\n        imdbVotes: \"N/a\",\n        imdbID: found.imdbID,\n        Type: found.Type,\n        DVD: \"N/a\",\n        BoxOffice: \"N/a\",\n        Production: \"N/a\",\n        Website: \"N/a\",\n        Response: \"N/a\"\n    };\n}\n\n\n\nexport function getRandomNumber(min: number, max: number){\n        return Math.floor(Math.random()*(max-min+1)+min);\n    }\n\n/**\n * noStreamingSites(imdbID) - defines a default behavior for the streaming sites\n *                            of a movie when no results are found.\n *\n * @param {string} imdbID - the string of the imdbID field from a Movie interface\n * \n * @returns {StreamWebsite[]} - an array of 1 StreamingWebsite, with only only the \n *                              id, name, display_name, and county.number fields set\n */\nexport function noStreamingSites(imdbID : string): StreamWebsite[] {\n    return [{\n        id: imdbID,\n        icon: \"\",\n        name: \"Not Found\",\n        url: \"\",\n        display_name: \"n/a\",\n        country: [\n            {\n                itemNumber: 0,\n                location: \"\",\n            },\n        ],\n    }]\n}\n\nexport function HitSearchKey() {\n    return [] as Movie[];\n\n}\n\nexport function SimulateSearch() : Movie[] {\n    var amount = getRandomNumber(1, 5);\n    var movies: Movie[] = [];\n    for (let i = 0; i < amount; i++) {\n        movies.push(new MovieTileObj());\n        \n    }\n    return movies;\n}\n\nexport function getBadRatings() : Rating[] {\n    return [{Source: \"N/a\", Value: \"N/a\"}];\n}\n\n\nexport function setFirstMovieResults(movieArray : Movie[]) : Movie[] {\n    let rand = getRandomNumber(0, 4);\n    var start = rand * 50;\n    var end = start + 50;\n\n    const newArr = movieArray.slice(start, end);\n    var shuffled = newArr\n        .map(value => ({value, sort: Math.random}))\n        .sort( () => Math.random() - 0.5) \n        .map(({value}) => value)\n    return shuffled;\n}\n\n"]},"metadata":{},"sourceType":"module"}